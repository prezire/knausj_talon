[
    {
        "label": "talon",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "talon",
        "description": "talon",
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "ui",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "ui",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "ui",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "ui",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "resource",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "clip",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "ui",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "ui",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "clip",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "ui",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "ui",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "ui",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "speech_system",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "ui",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "ui",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "ui",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "ui",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "fs",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "imgui",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "ui",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "clip",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "imgui",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "registry",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "imgui",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "scope",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "ui",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "clip",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "fs",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "imgui",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "ui",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "speech_system",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "canvas",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "cron",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "ctrl",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "screen",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "ui",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "cron",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "ui",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "imgui",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "grammar",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "ui",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "ui",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "ui",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "speech_system",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "speech_system",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "resource",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "imgui",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "registry",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "imgui",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "registry",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "registry",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "speech_system",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "imgui",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "speech_system",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "ui",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "ctrl",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "ui",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "ui",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "speech_system",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "imgui",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "clip",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "cron",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "ctrl",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "imgui",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "noise",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "ui",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "clip",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "cron",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "screen",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "ui",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "ui",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "cron",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "clip",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "registry",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "scope",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "speech_system",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "ui",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "imgui",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "registry",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "ui",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "imgui",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "registry",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "talon",
        "description": "talon",
        "isExtraImport": true,
        "detail": "talon",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "applescript",
        "importPath": "talon.mac",
        "description": "talon.mac",
        "isExtraImport": true,
        "detail": "talon.mac",
        "documentation": {}
    },
    {
        "label": "applescript",
        "importPath": "talon.mac",
        "description": "talon.mac",
        "isExtraImport": true,
        "detail": "talon.mac",
        "documentation": {}
    },
    {
        "label": "applescript",
        "importPath": "talon.mac",
        "description": "talon.mac",
        "isExtraImport": true,
        "detail": "talon.mac",
        "documentation": {}
    },
    {
        "label": "applescript",
        "importPath": "talon.mac",
        "description": "talon.mac",
        "isExtraImport": true,
        "detail": "talon.mac",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "os.path",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.path",
        "description": "os.path",
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "gettempdir",
        "importPath": "tempfile",
        "description": "tempfile",
        "isExtraImport": true,
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "FALSE",
        "importPath": "pickle",
        "description": "pickle",
        "isExtraImport": true,
        "detail": "pickle",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "log_exception",
        "importPath": "talon.debug",
        "description": "talon.debug",
        "isExtraImport": true,
        "detail": "talon.debug",
        "documentation": {}
    },
    {
        "label": "itertools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "itertools",
        "description": "itertools",
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "islice",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "islice",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "islice",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Paint",
        "importPath": "talon.skia",
        "description": "talon.skia",
        "isExtraImport": true,
        "detail": "talon.skia",
        "documentation": {}
    },
    {
        "label": "Rect",
        "importPath": "talon.skia",
        "description": "talon.skia",
        "isExtraImport": true,
        "detail": "talon.skia",
        "documentation": {}
    },
    {
        "label": "Point2d",
        "importPath": "talon.types.point",
        "description": "talon.types.point",
        "isExtraImport": true,
        "detail": "talon.types.point",
        "documentation": {}
    },
    {
        "label": "eye_mouse",
        "importPath": "talon_plugins",
        "description": "talon_plugins",
        "isExtraImport": true,
        "detail": "talon_plugins",
        "documentation": {}
    },
    {
        "label": "eye_zoom_mouse",
        "importPath": "talon_plugins",
        "description": "talon_plugins",
        "isExtraImport": true,
        "detail": "talon_plugins",
        "documentation": {}
    },
    {
        "label": "eye_mouse",
        "importPath": "talon_plugins",
        "description": "talon_plugins",
        "isExtraImport": true,
        "detail": "talon_plugins",
        "documentation": {}
    },
    {
        "label": "eye_zoom_mouse",
        "importPath": "talon_plugins",
        "description": "talon_plugins",
        "isExtraImport": true,
        "detail": "talon_plugins",
        "documentation": {}
    },
    {
        "label": "Canvas",
        "importPath": "talon.canvas",
        "description": "talon.canvas",
        "isExtraImport": true,
        "detail": "talon.canvas",
        "documentation": {}
    },
    {
        "label": "Canvas",
        "importPath": "talon.canvas",
        "description": "talon.canvas",
        "isExtraImport": true,
        "detail": "talon.canvas",
        "documentation": {}
    },
    {
        "label": "Phrase",
        "importPath": "talon.grammar",
        "description": "talon.grammar",
        "isExtraImport": true,
        "detail": "talon.grammar",
        "documentation": {}
    },
    {
        "label": "Phrase",
        "importPath": "talon.grammar",
        "description": "talon.grammar",
        "isExtraImport": true,
        "detail": "talon.grammar",
        "documentation": {}
    },
    {
        "label": "Phrase",
        "importPath": "talon.grammar",
        "description": "talon.grammar",
        "isExtraImport": true,
        "detail": "talon.grammar",
        "documentation": {}
    },
    {
        "label": "webbrowser",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "webbrowser",
        "description": "webbrowser",
        "detail": "webbrowser",
        "documentation": {}
    },
    {
        "label": "quote_plus",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "contextlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "contextlib",
        "description": "contextlib",
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "cubeb",
        "importPath": "talon.lib",
        "description": "talon.lib",
        "isExtraImport": true,
        "detail": "talon.lib",
        "documentation": {}
    },
    {
        "label": "config",
        "importPath": "talon_plugins.eye_mouse",
        "description": "talon_plugins.eye_mouse",
        "isExtraImport": true,
        "detail": "talon_plugins.eye_mouse",
        "documentation": {}
    },
    {
        "label": "toggle_camera_overlay",
        "importPath": "talon_plugins.eye_mouse",
        "description": "talon_plugins.eye_mouse",
        "isExtraImport": true,
        "detail": "talon_plugins.eye_mouse",
        "documentation": {}
    },
    {
        "label": "toggle_control",
        "importPath": "talon_plugins.eye_mouse",
        "description": "talon_plugins.eye_mouse",
        "isExtraImport": true,
        "detail": "talon_plugins.eye_mouse",
        "documentation": {}
    },
    {
        "label": "DarkThemeLabels",
        "importPath": "talon.experimental.textarea",
        "description": "talon.experimental.textarea",
        "isExtraImport": true,
        "detail": "talon.experimental.textarea",
        "documentation": {}
    },
    {
        "label": "LightThemeLabels",
        "importPath": "talon.experimental.textarea",
        "description": "talon.experimental.textarea",
        "isExtraImport": true,
        "detail": "talon.experimental.textarea",
        "documentation": {}
    },
    {
        "label": "Span",
        "importPath": "talon.experimental.textarea",
        "description": "talon.experimental.textarea",
        "isExtraImport": true,
        "detail": "talon.experimental.textarea",
        "documentation": {}
    },
    {
        "label": "TextArea",
        "importPath": "talon.experimental.textarea",
        "description": "talon.experimental.textarea",
        "isExtraImport": true,
        "detail": "talon.experimental.textarea",
        "documentation": {}
    },
    {
        "label": "platform",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "platform",
        "description": "platform",
        "detail": "platform",
        "documentation": {}
    },
    {
        "label": "pprint",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pprint",
        "description": "pprint",
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "importlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "importlib",
        "description": "importlib",
        "detail": "importlib",
        "documentation": {}
    },
    {
        "label": "UserActions",
        "kind": 6,
        "importPath": "apps.1password.1password_mac",
        "description": "apps.1password.1password_mac",
        "peekOfCode": "class UserActions:\n    def password_fill():\n        actions.key(\"cmd-\\\\\")\n    def password_show():\n        actions.key(\"cmd-alt-\\\\\")\n    def password_new():\n        actions.key(\"cmd-i\")\n    def password_duplicate():\n        actions.key(\"cmd-d\")\n    def password_edit():",
        "detail": "apps.1password.1password_mac",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.1password.1password_mac",
        "description": "apps.1password.1password_mac",
        "peekOfCode": "ctx = Context()\n# i don't see a need to restrict the app here, this just defines the actions\n# each app can support appropriate voice commands as needed\n# the below are for 1password, redefine as needed\nctx.matches = r\"\"\"\nos: mac\n\"\"\"\n@ctx.action_class(\"user\")\nclass UserActions:\n    def password_fill():",
        "detail": "apps.1password.1password_mac",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "apps.1password.1password_mac",
        "description": "apps.1password.1password_mac",
        "peekOfCode": "ctx.matches = r\"\"\"\nos: mac\n\"\"\"\n@ctx.action_class(\"user\")\nclass UserActions:\n    def password_fill():\n        actions.key(\"cmd-\\\\\")\n    def password_show():\n        actions.key(\"cmd-alt-\\\\\")\n    def password_new():",
        "detail": "apps.1password.1password_mac",
        "documentation": {}
    },
    {
        "label": "UserActions",
        "kind": 6,
        "importPath": "apps.1password.1password_win",
        "description": "apps.1password.1password_win",
        "peekOfCode": "class UserActions:\n    def password_fill():\n        actions.key(\"ctrl-\\\\\\\\\")\n    def password_show():\n        actions.key(\"alt-ctrl-\\\\\\\\\")\n    def password_new():\n        actions.key(\"ctrl-n\")\n    def password_duplicate():\n        actions.key(\"ctrl-d\")\n    def password_edit():",
        "detail": "apps.1password.1password_win",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.1password.1password_win",
        "description": "apps.1password.1password_win",
        "peekOfCode": "ctx = Context()\n# i don't see a need to restrict the app here, this just defines the actions\n# each app can support appropriate voice commands as needed\n# the below are for 1password, redefine as needed\nctx.matches = r\"\"\"\nos: windows\n\"\"\"\n@ctx.action_class(\"user\")\nclass UserActions:\n    def password_fill():",
        "detail": "apps.1password.1password_win",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "apps.1password.1password_win",
        "description": "apps.1password.1password_win",
        "peekOfCode": "ctx.matches = r\"\"\"\nos: windows\n\"\"\"\n@ctx.action_class(\"user\")\nclass UserActions:\n    def password_fill():\n        actions.key(\"ctrl-\\\\\\\\\")\n    def password_show():\n        actions.key(\"alt-ctrl-\\\\\\\\\")\n    def password_new():",
        "detail": "apps.1password.1password_win",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "apps.1password.password_manager",
        "description": "apps.1password.password_manager",
        "peekOfCode": "class Actions:\n    def password_fill():\n        \"\"\"fill the password\"\"\"\n    def password_show():\n        \"\"\"show the password\"\"\"\n    def password_new():\n        \"\"\"New password\"\"\"\n    def password_duplicate():\n        \"\"\"Duplicate password\"\"\"\n    def password_edit():",
        "detail": "apps.1password.password_manager",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "apps.1password.password_manager",
        "description": "apps.1password.password_manager",
        "peekOfCode": "mod = Module()\n# 1password\nmod.apps.one_password = \"app.bundle: com.agilebits.onepassword7\"\nmod.apps.one_password = \"app.name: 1Password for Windows desktop\"\nmod.apps.one_password = \"app.name: 1Password.exe\"\n@mod.action_class\nclass Actions:\n    def password_fill():\n        \"\"\"fill the password\"\"\"\n    def password_show():",
        "detail": "apps.1password.password_manager",
        "documentation": {}
    },
    {
        "label": "mod.apps.one_password",
        "kind": 5,
        "importPath": "apps.1password.password_manager",
        "description": "apps.1password.password_manager",
        "peekOfCode": "mod.apps.one_password = \"app.bundle: com.agilebits.onepassword7\"\nmod.apps.one_password = \"app.name: 1Password for Windows desktop\"\nmod.apps.one_password = \"app.name: 1Password.exe\"\n@mod.action_class\nclass Actions:\n    def password_fill():\n        \"\"\"fill the password\"\"\"\n    def password_show():\n        \"\"\"show the password\"\"\"\n    def password_new():",
        "detail": "apps.1password.password_manager",
        "documentation": {}
    },
    {
        "label": "mod.apps.one_password",
        "kind": 5,
        "importPath": "apps.1password.password_manager",
        "description": "apps.1password.password_manager",
        "peekOfCode": "mod.apps.one_password = \"app.name: 1Password for Windows desktop\"\nmod.apps.one_password = \"app.name: 1Password.exe\"\n@mod.action_class\nclass Actions:\n    def password_fill():\n        \"\"\"fill the password\"\"\"\n    def password_show():\n        \"\"\"show the password\"\"\"\n    def password_new():\n        \"\"\"New password\"\"\"",
        "detail": "apps.1password.password_manager",
        "documentation": {}
    },
    {
        "label": "mod.apps.one_password",
        "kind": 5,
        "importPath": "apps.1password.password_manager",
        "description": "apps.1password.password_manager",
        "peekOfCode": "mod.apps.one_password = \"app.name: 1Password.exe\"\n@mod.action_class\nclass Actions:\n    def password_fill():\n        \"\"\"fill the password\"\"\"\n    def password_show():\n        \"\"\"show the password\"\"\"\n    def password_new():\n        \"\"\"New password\"\"\"\n    def password_duplicate():",
        "detail": "apps.1password.password_manager",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "apps.adobe.adobe_acrobat_reader_dc",
        "description": "apps.adobe.adobe_acrobat_reader_dc",
        "peekOfCode": "mod = Module()\nmod.apps.adobe_acrobat_reader_dc = \"\"\"\nos: windows\nand app.name: Adobe Acrobat DC\nos: windows\nand app.exe: Acrobat.exe\nos: windows\nand app.name: Adobe Acrobat Reader DC\nos: windows\nand app.exe: AcroRd32.exe",
        "detail": "apps.adobe.adobe_acrobat_reader_dc",
        "documentation": {}
    },
    {
        "label": "mod.apps.adobe_acrobat_reader_dc",
        "kind": 5,
        "importPath": "apps.adobe.adobe_acrobat_reader_dc",
        "description": "apps.adobe.adobe_acrobat_reader_dc",
        "peekOfCode": "mod.apps.adobe_acrobat_reader_dc = \"\"\"\nos: windows\nand app.name: Adobe Acrobat DC\nos: windows\nand app.exe: Acrobat.exe\nos: windows\nand app.name: Adobe Acrobat Reader DC\nos: windows\nand app.exe: AcroRd32.exe\n\"\"\"",
        "detail": "apps.adobe.adobe_acrobat_reader_dc",
        "documentation": {}
    },
    {
        "label": "AppActions",
        "kind": 6,
        "importPath": "apps.adobe.adobe_acrobat_reader_dc_win",
        "description": "apps.adobe.adobe_acrobat_reader_dc_win",
        "peekOfCode": "class AppActions:\n    # app.tabs\n    def tab_next():\n        actions.key(\"ctrl-tab\")\n    def tab_previous():\n        actions.key(\"ctrl-shift-tab\")\n@ctx.action_class(\"edit\")\nclass EditActions:\n    def zoom_in():\n        actions.key(\"ctrl-0\")  # in german version",
        "detail": "apps.adobe.adobe_acrobat_reader_dc_win",
        "documentation": {}
    },
    {
        "label": "EditActions",
        "kind": 6,
        "importPath": "apps.adobe.adobe_acrobat_reader_dc_win",
        "description": "apps.adobe.adobe_acrobat_reader_dc_win",
        "peekOfCode": "class EditActions:\n    def zoom_in():\n        actions.key(\"ctrl-0\")  # in german version\n    def zoom_out():\n        actions.key(\"ctrl-1\")  # in german version TODO: differentiate languages\n    def zoom_reset():\n        actions.key(\"ctrl-2\")\n@ctx.action_class(\"user\")\nclass UserActions:\n    # user.pages",
        "detail": "apps.adobe.adobe_acrobat_reader_dc_win",
        "documentation": {}
    },
    {
        "label": "UserActions",
        "kind": 6,
        "importPath": "apps.adobe.adobe_acrobat_reader_dc_win",
        "description": "apps.adobe.adobe_acrobat_reader_dc_win",
        "peekOfCode": "class UserActions:\n    # user.pages\n    def page_current():\n        actions.key(\"ctrl-shift-n\")\n        page = actions.edit.selected_text()\n        actions.key(\"tab:2 enter\")\n        return int(page)\n    def page_next():\n        actions.key(\"ctrl-pagedown\")\n    def page_previous():",
        "detail": "apps.adobe.adobe_acrobat_reader_dc_win",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.adobe.adobe_acrobat_reader_dc_win",
        "description": "apps.adobe.adobe_acrobat_reader_dc_win",
        "peekOfCode": "ctx = Context()\nctx.matches = \"\"\"\nos: windows\napp: adobe_acrobat_reader_dc\n\"\"\"\n# --- Implement actions ---\n@ctx.action_class(\"app\")\nclass AppActions:\n    # app.tabs\n    def tab_next():",
        "detail": "apps.adobe.adobe_acrobat_reader_dc_win",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "apps.adobe.adobe_acrobat_reader_dc_win",
        "description": "apps.adobe.adobe_acrobat_reader_dc_win",
        "peekOfCode": "ctx.matches = \"\"\"\nos: windows\napp: adobe_acrobat_reader_dc\n\"\"\"\n# --- Implement actions ---\n@ctx.action_class(\"app\")\nclass AppActions:\n    # app.tabs\n    def tab_next():\n        actions.key(\"ctrl-tab\")",
        "detail": "apps.adobe.adobe_acrobat_reader_dc_win",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "apps.anaconda.anaconda",
        "description": "apps.anaconda.anaconda",
        "peekOfCode": "mod = Module()\nmod.tag(\"anaconda\", desc=\"tag for enabling anaconda commands in your terminal\")\nctx = Context()\nctx.matches = r\"\"\"\ntag: user.anaconda\n\"\"\"",
        "detail": "apps.anaconda.anaconda",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.anaconda.anaconda",
        "description": "apps.anaconda.anaconda",
        "peekOfCode": "ctx = Context()\nctx.matches = r\"\"\"\ntag: user.anaconda\n\"\"\"",
        "detail": "apps.anaconda.anaconda",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "apps.anaconda.anaconda",
        "description": "apps.anaconda.anaconda",
        "peekOfCode": "ctx.matches = r\"\"\"\ntag: user.anaconda\n\"\"\"",
        "detail": "apps.anaconda.anaconda",
        "documentation": {}
    },
    {
        "label": "EditActions",
        "kind": 6,
        "importPath": "apps.apple_notes.apple_notes",
        "description": "apps.apple_notes.apple_notes",
        "peekOfCode": "class EditActions:\n    def zoom_in():\n        actions.key(\"shift-cmd->\")\n    def zoom_out():\n        actions.key(\"shift-cmd-<\")\n    def zoom_reset():\n        actions.key(\"shift-cmd-0\")\n    def indent_less():\n        actions.key(\"cmd-[\")",
        "detail": "apps.apple_notes.apple_notes",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.apple_notes.apple_notes",
        "description": "apps.apple_notes.apple_notes",
        "peekOfCode": "ctx = Context()\nctx.matches = r\"\"\"\napp: notes\n\"\"\"\n@ctx.action_class(\"edit\")\nclass EditActions:\n    def zoom_in():\n        actions.key(\"shift-cmd->\")\n    def zoom_out():\n        actions.key(\"shift-cmd-<\")",
        "detail": "apps.apple_notes.apple_notes",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "apps.apple_notes.apple_notes",
        "description": "apps.apple_notes.apple_notes",
        "peekOfCode": "ctx.matches = r\"\"\"\napp: notes\n\"\"\"\n@ctx.action_class(\"edit\")\nclass EditActions:\n    def zoom_in():\n        actions.key(\"shift-cmd->\")\n    def zoom_out():\n        actions.key(\"shift-cmd-<\")\n    def zoom_reset():",
        "detail": "apps.apple_notes.apple_notes",
        "documentation": {}
    },
    {
        "label": "EditActions",
        "kind": 6,
        "importPath": "apps.apple_terminal.apple_terminal",
        "description": "apps.apple_terminal.apple_terminal",
        "peekOfCode": "class EditActions:\n    def delete_line():\n        actions.key(\"ctrl-u\")\n@ctx.action_class(\"user\")\nclass UserActions:\n    def file_manager_current_path():\n        title = ui.active_window().title\n        # take the first split for the zsh-based terminal\n        if \" — \" in title:\n            title = title.split(\" — \")[0]",
        "detail": "apps.apple_terminal.apple_terminal",
        "documentation": {}
    },
    {
        "label": "UserActions",
        "kind": 6,
        "importPath": "apps.apple_terminal.apple_terminal",
        "description": "apps.apple_terminal.apple_terminal",
        "peekOfCode": "class UserActions:\n    def file_manager_current_path():\n        title = ui.active_window().title\n        # take the first split for the zsh-based terminal\n        if \" — \" in title:\n            title = title.split(\" — \")[0]\n        if \"~\" in title:\n            title = os.path.expanduser(title)\n        if title in directories_to_remap:\n            title = directories_to_remap[title]",
        "detail": "apps.apple_terminal.apple_terminal",
        "documentation": {}
    },
    {
        "label": "app_actions",
        "kind": 6,
        "importPath": "apps.apple_terminal.apple_terminal",
        "description": "apps.apple_terminal.apple_terminal",
        "peekOfCode": "class app_actions:\n    # other tab functions should already be implemented in\n    # code/platforms/mac/app.py\n    def tab_previous():\n        actions.key(\"ctrl-shift-tab\")\n    def tab_next():\n        actions.key(\"ctrl-tab\")",
        "detail": "apps.apple_terminal.apple_terminal",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.apple_terminal.apple_terminal",
        "description": "apps.apple_terminal.apple_terminal",
        "peekOfCode": "ctx = Context()\nctx.matches = r\"\"\"\napp: apple_terminal\n\"\"\"\ndirectories_to_remap = {}\ndirectories_to_exclude = {}\n@ctx.action_class(\"edit\")\nclass EditActions:\n    def delete_line():\n        actions.key(\"ctrl-u\")",
        "detail": "apps.apple_terminal.apple_terminal",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "apps.apple_terminal.apple_terminal",
        "description": "apps.apple_terminal.apple_terminal",
        "peekOfCode": "ctx.matches = r\"\"\"\napp: apple_terminal\n\"\"\"\ndirectories_to_remap = {}\ndirectories_to_exclude = {}\n@ctx.action_class(\"edit\")\nclass EditActions:\n    def delete_line():\n        actions.key(\"ctrl-u\")\n@ctx.action_class(\"user\")",
        "detail": "apps.apple_terminal.apple_terminal",
        "documentation": {}
    },
    {
        "label": "directories_to_remap",
        "kind": 5,
        "importPath": "apps.apple_terminal.apple_terminal",
        "description": "apps.apple_terminal.apple_terminal",
        "peekOfCode": "directories_to_remap = {}\ndirectories_to_exclude = {}\n@ctx.action_class(\"edit\")\nclass EditActions:\n    def delete_line():\n        actions.key(\"ctrl-u\")\n@ctx.action_class(\"user\")\nclass UserActions:\n    def file_manager_current_path():\n        title = ui.active_window().title",
        "detail": "apps.apple_terminal.apple_terminal",
        "documentation": {}
    },
    {
        "label": "directories_to_exclude",
        "kind": 5,
        "importPath": "apps.apple_terminal.apple_terminal",
        "description": "apps.apple_terminal.apple_terminal",
        "peekOfCode": "directories_to_exclude = {}\n@ctx.action_class(\"edit\")\nclass EditActions:\n    def delete_line():\n        actions.key(\"ctrl-u\")\n@ctx.action_class(\"user\")\nclass UserActions:\n    def file_manager_current_path():\n        title = ui.active_window().title\n        # take the first split for the zsh-based terminal",
        "detail": "apps.apple_terminal.apple_terminal",
        "documentation": {}
    },
    {
        "label": "UserActions",
        "kind": 6,
        "importPath": "apps.atril.atril",
        "description": "apps.atril.atril",
        "peekOfCode": "class UserActions:\n    # user.pages\n    def page_current():\n        actions.key(\"ctrl-l\")\n        page = actions.edit.selected_text()\n        actions.key(\"right escape\")\n        return int(page)\n    def page_next():\n        actions.key(\"ctrl-pagedown\")\n    def page_previous():",
        "detail": "apps.atril.atril",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "apps.atril.atril",
        "description": "apps.atril.atril",
        "peekOfCode": "mod = Module()\nmod.apps.atril = \"\"\"\nos: linux\nand app.name: Atril\n\"\"\"\n# Context matching\nctx = Context()\nctx.matches = r\"\"\"\napp: atril\n\"\"\"",
        "detail": "apps.atril.atril",
        "documentation": {}
    },
    {
        "label": "mod.apps.atril",
        "kind": 5,
        "importPath": "apps.atril.atril",
        "description": "apps.atril.atril",
        "peekOfCode": "mod.apps.atril = \"\"\"\nos: linux\nand app.name: Atril\n\"\"\"\n# Context matching\nctx = Context()\nctx.matches = r\"\"\"\napp: atril\n\"\"\"\n# --- Implement actions ---",
        "detail": "apps.atril.atril",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.atril.atril",
        "description": "apps.atril.atril",
        "peekOfCode": "ctx = Context()\nctx.matches = r\"\"\"\napp: atril\n\"\"\"\n# --- Implement actions ---\n@ctx.action_class(\"user\")\nclass UserActions:\n    # user.pages\n    def page_current():\n        actions.key(\"ctrl-l\")",
        "detail": "apps.atril.atril",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "apps.atril.atril",
        "description": "apps.atril.atril",
        "peekOfCode": "ctx.matches = r\"\"\"\napp: atril\n\"\"\"\n# --- Implement actions ---\n@ctx.action_class(\"user\")\nclass UserActions:\n    # user.pages\n    def page_current():\n        actions.key(\"ctrl-l\")\n        page = actions.edit.selected_text()",
        "detail": "apps.atril.atril",
        "documentation": {}
    },
    {
        "label": "user_actions",
        "kind": 6,
        "importPath": "apps.brave.brave",
        "description": "apps.brave.brave",
        "peekOfCode": "class user_actions:\n    def tab_jump(number: int):\n        if number < 9:\n            if app.platform == \"mac\":\n                actions.key(f\"cmd-{number}\")\n            else:\n                actions.key(f\"ctrl-{number}\")\n    def tab_final():\n        if app.platform == \"mac\":\n            actions.key(\"cmd-9\")",
        "detail": "apps.brave.brave",
        "documentation": {}
    },
    {
        "label": "browser_actions",
        "kind": 6,
        "importPath": "apps.brave.brave",
        "description": "apps.brave.brave",
        "peekOfCode": "class browser_actions:\n    def go(url: str):\n        actions.browser.focus_address()\n        actions.sleep(\"50ms\")\n        actions.insert(url)\n        actions.key(\"enter\")",
        "detail": "apps.brave.brave",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.brave.brave",
        "description": "apps.brave.brave",
        "peekOfCode": "ctx = Context()\nmod = Module()\nmod.apps.brave = \"app.name: Brave Browser\"\n# TODO: Add other OS application identifiers\nmod.apps.brave = \"\"\"\nos: mac\nand app.bundle: com.brave.Browser\n\"\"\"\nctx.matches = r\"\"\"\napp: brave",
        "detail": "apps.brave.brave",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "apps.brave.brave",
        "description": "apps.brave.brave",
        "peekOfCode": "mod = Module()\nmod.apps.brave = \"app.name: Brave Browser\"\n# TODO: Add other OS application identifiers\nmod.apps.brave = \"\"\"\nos: mac\nand app.bundle: com.brave.Browser\n\"\"\"\nctx.matches = r\"\"\"\napp: brave\n\"\"\"",
        "detail": "apps.brave.brave",
        "documentation": {}
    },
    {
        "label": "mod.apps.brave",
        "kind": 5,
        "importPath": "apps.brave.brave",
        "description": "apps.brave.brave",
        "peekOfCode": "mod.apps.brave = \"app.name: Brave Browser\"\n# TODO: Add other OS application identifiers\nmod.apps.brave = \"\"\"\nos: mac\nand app.bundle: com.brave.Browser\n\"\"\"\nctx.matches = r\"\"\"\napp: brave\n\"\"\"\n@ctx.action_class(\"user\")",
        "detail": "apps.brave.brave",
        "documentation": {}
    },
    {
        "label": "mod.apps.brave",
        "kind": 5,
        "importPath": "apps.brave.brave",
        "description": "apps.brave.brave",
        "peekOfCode": "mod.apps.brave = \"\"\"\nos: mac\nand app.bundle: com.brave.Browser\n\"\"\"\nctx.matches = r\"\"\"\napp: brave\n\"\"\"\n@ctx.action_class(\"user\")\nclass user_actions:\n    def tab_jump(number: int):",
        "detail": "apps.brave.brave",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "apps.brave.brave",
        "description": "apps.brave.brave",
        "peekOfCode": "ctx.matches = r\"\"\"\napp: brave\n\"\"\"\n@ctx.action_class(\"user\")\nclass user_actions:\n    def tab_jump(number: int):\n        if number < 9:\n            if app.platform == \"mac\":\n                actions.key(f\"cmd-{number}\")\n            else:",
        "detail": "apps.brave.brave",
        "documentation": {}
    },
    {
        "label": "BrowserActions",
        "kind": 6,
        "importPath": "apps.brave.brave_mac",
        "description": "apps.brave.brave_mac",
        "peekOfCode": "class BrowserActions:\n    def address() -> str:\n        try:\n            window = brave_app().windows()[0]\n        except IndexError:\n            return \"\"\n        try:\n            web_area = window.element.children.find_one(AXRole=\"AXWebArea\")\n            address = web_area.AXURL\n        except (ui.UIErr, AttributeError):",
        "detail": "apps.brave.brave_mac",
        "documentation": {}
    },
    {
        "label": "brave_app",
        "kind": 2,
        "importPath": "apps.brave.brave_mac",
        "description": "apps.brave.brave_mac",
        "peekOfCode": "def brave_app():\n    return ui.apps(bundle=\"com.brave.Browser\")[0]\n@ctx.action_class(\"browser\")\nclass BrowserActions:\n    def address() -> str:\n        try:\n            window = brave_app().windows()[0]\n        except IndexError:\n            return \"\"\n        try:",
        "detail": "apps.brave.brave_mac",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.brave.brave_mac",
        "description": "apps.brave.brave_mac",
        "peekOfCode": "ctx = Context()\nctx.matches = r\"\"\"\nos: mac\napp: brave\n\"\"\"\nctx.tags = [\"browser\", \"user.tabs\"]\ndef brave_app():\n    return ui.apps(bundle=\"com.brave.Browser\")[0]\n@ctx.action_class(\"browser\")\nclass BrowserActions:",
        "detail": "apps.brave.brave_mac",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "apps.brave.brave_mac",
        "description": "apps.brave.brave_mac",
        "peekOfCode": "ctx.matches = r\"\"\"\nos: mac\napp: brave\n\"\"\"\nctx.tags = [\"browser\", \"user.tabs\"]\ndef brave_app():\n    return ui.apps(bundle=\"com.brave.Browser\")[0]\n@ctx.action_class(\"browser\")\nclass BrowserActions:\n    def address() -> str:",
        "detail": "apps.brave.brave_mac",
        "documentation": {}
    },
    {
        "label": "ctx.tags",
        "kind": 5,
        "importPath": "apps.brave.brave_mac",
        "description": "apps.brave.brave_mac",
        "peekOfCode": "ctx.tags = [\"browser\", \"user.tabs\"]\ndef brave_app():\n    return ui.apps(bundle=\"com.brave.Browser\")[0]\n@ctx.action_class(\"browser\")\nclass BrowserActions:\n    def address() -> str:\n        try:\n            window = brave_app().windows()[0]\n        except IndexError:\n            return \"\"",
        "detail": "apps.brave.brave_mac",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "apps.calibre.calibre",
        "description": "apps.calibre.calibre",
        "peekOfCode": "mod = Module()\nmod.apps.calibre = \"\"\"\nos: windows\nand app.name: calibre.exe\nos: windows\nand app.exe: calibre.exe\nos: windows\nand app.name: calibre-parallel.exe\nos: windows\nand app.exe: calibre-parallel.exe",
        "detail": "apps.calibre.calibre",
        "documentation": {}
    },
    {
        "label": "mod.apps.calibre",
        "kind": 5,
        "importPath": "apps.calibre.calibre",
        "description": "apps.calibre.calibre",
        "peekOfCode": "mod.apps.calibre = \"\"\"\nos: windows\nand app.name: calibre.exe\nos: windows\nand app.exe: calibre.exe\nos: windows\nand app.name: calibre-parallel.exe\nos: windows\nand app.exe: calibre-parallel.exe\n\"\"\"",
        "detail": "apps.calibre.calibre",
        "documentation": {}
    },
    {
        "label": "mod.apps.calibre",
        "kind": 5,
        "importPath": "apps.calibre.calibre",
        "description": "apps.calibre.calibre",
        "peekOfCode": "mod.apps.calibre = \"\"\"\nos: linux\napp.name: calibre\n\"\"\"\n# TODO: mac context",
        "detail": "apps.calibre.calibre",
        "documentation": {}
    },
    {
        "label": "UserActions",
        "kind": 6,
        "importPath": "apps.calibre.calibre_viewer",
        "description": "apps.calibre.calibre_viewer",
        "peekOfCode": "class UserActions:\n    # user.pages\n    def page_next():\n        actions.key(\"pagedown\")\n    def page_previous():\n        actions.key(\"pageup\")\n    def page_final():\n        actions.key(\"ctrl-end\")\n    # user.chapters\n    def chapter_next():",
        "detail": "apps.calibre.calibre_viewer",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "apps.calibre.calibre_viewer",
        "description": "apps.calibre.calibre_viewer",
        "peekOfCode": "mod = Module()\nmod.apps.calibre_viewer = \"\"\"\napp: calibre\ntitle: /E-book viewer$/\ntitle: /eBook-Betrachter$/\n\"\"\"\n# Context matching\nctx = Context()\nctx.matches = \"\"\"\nos: windows",
        "detail": "apps.calibre.calibre_viewer",
        "documentation": {}
    },
    {
        "label": "mod.apps.calibre_viewer",
        "kind": 5,
        "importPath": "apps.calibre.calibre_viewer",
        "description": "apps.calibre.calibre_viewer",
        "peekOfCode": "mod.apps.calibre_viewer = \"\"\"\napp: calibre\ntitle: /E-book viewer$/\ntitle: /eBook-Betrachter$/\n\"\"\"\n# Context matching\nctx = Context()\nctx.matches = \"\"\"\nos: windows\nos: linux",
        "detail": "apps.calibre.calibre_viewer",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.calibre.calibre_viewer",
        "description": "apps.calibre.calibre_viewer",
        "peekOfCode": "ctx = Context()\nctx.matches = \"\"\"\nos: windows\nos: linux\napp: calibre_viewer\n\"\"\"\n# TODO: mac implementation\n# --- Implement actions ---\n@ctx.action_class(\"user\")\nclass UserActions:",
        "detail": "apps.calibre.calibre_viewer",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "apps.calibre.calibre_viewer",
        "description": "apps.calibre.calibre_viewer",
        "peekOfCode": "ctx.matches = \"\"\"\nos: windows\nos: linux\napp: calibre_viewer\n\"\"\"\n# TODO: mac implementation\n# --- Implement actions ---\n@ctx.action_class(\"user\")\nclass UserActions:\n    # user.pages",
        "detail": "apps.calibre.calibre_viewer",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "apps.chrome.chrome",
        "description": "apps.chrome.chrome",
        "peekOfCode": "class Actions:\n    def chrome_mod(key: str):\n        \"\"\"Press the specified key with the correct modifier key for the OS\"\"\"\n        if app.platform == \"mac\":\n            actions.key(f\"cmd-{key}\")\n        else:\n            actions.key(f\"ctrl-{key}\")\n@ctx.action_class(\"user\")\nclass user_actions:\n    def tab_jump(number: int):",
        "detail": "apps.chrome.chrome",
        "documentation": {}
    },
    {
        "label": "user_actions",
        "kind": 6,
        "importPath": "apps.chrome.chrome",
        "description": "apps.chrome.chrome",
        "peekOfCode": "class user_actions:\n    def tab_jump(number: int):\n        if number < 9:\n            if app.platform == \"mac\":\n                actions.key(f\"cmd-{number}\")\n            else:\n                actions.key(f\"ctrl-{number}\")\n    def tab_final():\n        if app.platform == \"mac\":\n            actions.key(\"cmd-9\")",
        "detail": "apps.chrome.chrome",
        "documentation": {}
    },
    {
        "label": "browser_actions",
        "kind": 6,
        "importPath": "apps.chrome.chrome",
        "description": "apps.chrome.chrome",
        "peekOfCode": "class browser_actions:\n    def go(url: str):\n        actions.browser.focus_address()\n        actions.sleep(\"50ms\")\n        actions.insert(url)\n        actions.key(\"enter\")",
        "detail": "apps.chrome.chrome",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.chrome.chrome",
        "description": "apps.chrome.chrome",
        "peekOfCode": "ctx = Context()\nmod = Module()\nmod.apps.chrome = \"app.name: Google Chrome\"\nmod.apps.chrome = \"\"\"\nos: windows\nand app.exe: chrome.exe\n\"\"\"\nmod.apps.chrome = \"\"\"\nos: mac\nand app.bundle: com.google.Chrome",
        "detail": "apps.chrome.chrome",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "apps.chrome.chrome",
        "description": "apps.chrome.chrome",
        "peekOfCode": "mod = Module()\nmod.apps.chrome = \"app.name: Google Chrome\"\nmod.apps.chrome = \"\"\"\nos: windows\nand app.exe: chrome.exe\n\"\"\"\nmod.apps.chrome = \"\"\"\nos: mac\nand app.bundle: com.google.Chrome\n\"\"\"",
        "detail": "apps.chrome.chrome",
        "documentation": {}
    },
    {
        "label": "mod.apps.chrome",
        "kind": 5,
        "importPath": "apps.chrome.chrome",
        "description": "apps.chrome.chrome",
        "peekOfCode": "mod.apps.chrome = \"app.name: Google Chrome\"\nmod.apps.chrome = \"\"\"\nos: windows\nand app.exe: chrome.exe\n\"\"\"\nmod.apps.chrome = \"\"\"\nos: mac\nand app.bundle: com.google.Chrome\n\"\"\"\nmod.apps.chrome = \"\"\"",
        "detail": "apps.chrome.chrome",
        "documentation": {}
    },
    {
        "label": "mod.apps.chrome",
        "kind": 5,
        "importPath": "apps.chrome.chrome",
        "description": "apps.chrome.chrome",
        "peekOfCode": "mod.apps.chrome = \"\"\"\nos: windows\nand app.exe: chrome.exe\n\"\"\"\nmod.apps.chrome = \"\"\"\nos: mac\nand app.bundle: com.google.Chrome\n\"\"\"\nmod.apps.chrome = \"\"\"\nos: mac",
        "detail": "apps.chrome.chrome",
        "documentation": {}
    },
    {
        "label": "mod.apps.chrome",
        "kind": 5,
        "importPath": "apps.chrome.chrome",
        "description": "apps.chrome.chrome",
        "peekOfCode": "mod.apps.chrome = \"\"\"\nos: mac\nand app.bundle: com.google.Chrome\n\"\"\"\nmod.apps.chrome = \"\"\"\nos: mac\nand app.bundle: org.chromium.Chromium\n\"\"\"\nmod.apps.chrome = \"\"\"\nos: linux",
        "detail": "apps.chrome.chrome",
        "documentation": {}
    },
    {
        "label": "mod.apps.chrome",
        "kind": 5,
        "importPath": "apps.chrome.chrome",
        "description": "apps.chrome.chrome",
        "peekOfCode": "mod.apps.chrome = \"\"\"\nos: mac\nand app.bundle: org.chromium.Chromium\n\"\"\"\nmod.apps.chrome = \"\"\"\nos: linux\napp.exe: chrome\napp.exe: chromium-browser\n\"\"\"\nmod.apps.chrome = \"\"\"",
        "detail": "apps.chrome.chrome",
        "documentation": {}
    },
    {
        "label": "mod.apps.chrome",
        "kind": 5,
        "importPath": "apps.chrome.chrome",
        "description": "apps.chrome.chrome",
        "peekOfCode": "mod.apps.chrome = \"\"\"\nos: linux\napp.exe: chrome\napp.exe: chromium-browser\n\"\"\"\nmod.apps.chrome = \"\"\"\nos: linux\nand app.name: Google-chrome\n\"\"\"\nctx.matches = r\"\"\"",
        "detail": "apps.chrome.chrome",
        "documentation": {}
    },
    {
        "label": "mod.apps.chrome",
        "kind": 5,
        "importPath": "apps.chrome.chrome",
        "description": "apps.chrome.chrome",
        "peekOfCode": "mod.apps.chrome = \"\"\"\nos: linux\nand app.name: Google-chrome\n\"\"\"\nctx.matches = r\"\"\"\napp: chrome\n\"\"\"\n@mod.action_class\nclass Actions:\n    def chrome_mod(key: str):",
        "detail": "apps.chrome.chrome",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "apps.chrome.chrome",
        "description": "apps.chrome.chrome",
        "peekOfCode": "ctx.matches = r\"\"\"\napp: chrome\n\"\"\"\n@mod.action_class\nclass Actions:\n    def chrome_mod(key: str):\n        \"\"\"Press the specified key with the correct modifier key for the OS\"\"\"\n        if app.platform == \"mac\":\n            actions.key(f\"cmd-{key}\")\n        else:",
        "detail": "apps.chrome.chrome",
        "documentation": {}
    },
    {
        "label": "BrowserActions",
        "kind": 6,
        "importPath": "apps.chrome.chrome_linux",
        "description": "apps.chrome.chrome_linux",
        "peekOfCode": "class BrowserActions:\n    def bookmark():\n        actions.key(\"ctrl-d\")\n    def bookmarks():\n        actions.key(\"ctrl-shift-o\")\n    def bookmarks_bar():\n        actions.key(\"ctrl-shift-b\")\n    def focus_address():\n        actions.key(\"ctrl-l\")\n    def focus_search():",
        "detail": "apps.chrome.chrome_linux",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.chrome.chrome_linux",
        "description": "apps.chrome.chrome_linux",
        "peekOfCode": "ctx = Context()\nctx.matches = \"\"\"\nos: linux\napp: chrome\n\"\"\"\nctx.tags = [\"browser\", \"user.tabs\"]\n@ctx.action_class(\"browser\")\nclass BrowserActions:\n    def bookmark():\n        actions.key(\"ctrl-d\")",
        "detail": "apps.chrome.chrome_linux",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "apps.chrome.chrome_linux",
        "description": "apps.chrome.chrome_linux",
        "peekOfCode": "ctx.matches = \"\"\"\nos: linux\napp: chrome\n\"\"\"\nctx.tags = [\"browser\", \"user.tabs\"]\n@ctx.action_class(\"browser\")\nclass BrowserActions:\n    def bookmark():\n        actions.key(\"ctrl-d\")\n    def bookmarks():",
        "detail": "apps.chrome.chrome_linux",
        "documentation": {}
    },
    {
        "label": "ctx.tags",
        "kind": 5,
        "importPath": "apps.chrome.chrome_linux",
        "description": "apps.chrome.chrome_linux",
        "peekOfCode": "ctx.tags = [\"browser\", \"user.tabs\"]\n@ctx.action_class(\"browser\")\nclass BrowserActions:\n    def bookmark():\n        actions.key(\"ctrl-d\")\n    def bookmarks():\n        actions.key(\"ctrl-shift-o\")\n    def bookmarks_bar():\n        actions.key(\"ctrl-shift-b\")\n    def focus_address():",
        "detail": "apps.chrome.chrome_linux",
        "documentation": {}
    },
    {
        "label": "BrowserActions",
        "kind": 6,
        "importPath": "apps.chrome.chrome_mac",
        "description": "apps.chrome.chrome_mac",
        "peekOfCode": "class BrowserActions:\n    def address() -> str:\n        try:\n            window = chrome_app().windows()[0]\n        except IndexError:\n            return \"\"\n        try:\n            web_area = window.element.children.find_one(AXRole=\"AXWebArea\")\n            address = web_area.AXURL\n        except (ui.UIErr, AttributeError):",
        "detail": "apps.chrome.chrome_mac",
        "documentation": {}
    },
    {
        "label": "chrome_app",
        "kind": 2,
        "importPath": "apps.chrome.chrome_mac",
        "description": "apps.chrome.chrome_mac",
        "peekOfCode": "def chrome_app():\n    return ui.apps(bundle=\"com.google.Chrome\")[0]\n@ctx.action_class(\"browser\")\nclass BrowserActions:\n    def address() -> str:\n        try:\n            window = chrome_app().windows()[0]\n        except IndexError:\n            return \"\"\n        try:",
        "detail": "apps.chrome.chrome_mac",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.chrome.chrome_mac",
        "description": "apps.chrome.chrome_mac",
        "peekOfCode": "ctx = Context()\nctx.matches = r\"\"\"\nos: mac\napp: chrome\n\"\"\"\nctx.tags = [\"browser\", \"user.tabs\"]\ndef chrome_app():\n    return ui.apps(bundle=\"com.google.Chrome\")[0]\n@ctx.action_class(\"browser\")\nclass BrowserActions:",
        "detail": "apps.chrome.chrome_mac",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "apps.chrome.chrome_mac",
        "description": "apps.chrome.chrome_mac",
        "peekOfCode": "ctx.matches = r\"\"\"\nos: mac\napp: chrome\n\"\"\"\nctx.tags = [\"browser\", \"user.tabs\"]\ndef chrome_app():\n    return ui.apps(bundle=\"com.google.Chrome\")[0]\n@ctx.action_class(\"browser\")\nclass BrowserActions:\n    def address() -> str:",
        "detail": "apps.chrome.chrome_mac",
        "documentation": {}
    },
    {
        "label": "ctx.tags",
        "kind": 5,
        "importPath": "apps.chrome.chrome_mac",
        "description": "apps.chrome.chrome_mac",
        "peekOfCode": "ctx.tags = [\"browser\", \"user.tabs\"]\ndef chrome_app():\n    return ui.apps(bundle=\"com.google.Chrome\")[0]\n@ctx.action_class(\"browser\")\nclass BrowserActions:\n    def address() -> str:\n        try:\n            window = chrome_app().windows()[0]\n        except IndexError:\n            return \"\"",
        "detail": "apps.chrome.chrome_mac",
        "documentation": {}
    },
    {
        "label": "BrowserActions",
        "kind": 6,
        "importPath": "apps.chrome.chrome_win",
        "description": "apps.chrome.chrome_win",
        "peekOfCode": "class BrowserActions:\n    # action(browser.address):\n    def bookmark():\n        actions.key(\"ctrl-d\")\n    def bookmark_tabs():\n        actions.key(\"ctrl-shift-d\")\n    def bookmarks():\n        actions.key(\"ctrl-shift-o\")\n    def bookmarks_bar():\n        actions.key(\"ctrl-shift-b\")",
        "detail": "apps.chrome.chrome_win",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.chrome.chrome_win",
        "description": "apps.chrome.chrome_win",
        "peekOfCode": "ctx = Context()\nctx.matches = r\"\"\"\nos: windows\napp: chrome\n\"\"\"\nctx.tags = [\"browser\", \"user.tabs\"]\n@ctx.action_class(\"browser\")\nclass BrowserActions:\n    # action(browser.address):\n    def bookmark():",
        "detail": "apps.chrome.chrome_win",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "apps.chrome.chrome_win",
        "description": "apps.chrome.chrome_win",
        "peekOfCode": "ctx.matches = r\"\"\"\nos: windows\napp: chrome\n\"\"\"\nctx.tags = [\"browser\", \"user.tabs\"]\n@ctx.action_class(\"browser\")\nclass BrowserActions:\n    # action(browser.address):\n    def bookmark():\n        actions.key(\"ctrl-d\")",
        "detail": "apps.chrome.chrome_win",
        "documentation": {}
    },
    {
        "label": "ctx.tags",
        "kind": 5,
        "importPath": "apps.chrome.chrome_win",
        "description": "apps.chrome.chrome_win",
        "peekOfCode": "ctx.tags = [\"browser\", \"user.tabs\"]\n@ctx.action_class(\"browser\")\nclass BrowserActions:\n    # action(browser.address):\n    def bookmark():\n        actions.key(\"ctrl-d\")\n    def bookmark_tabs():\n        actions.key(\"ctrl-shift-d\")\n    def bookmarks():\n        actions.key(\"ctrl-shift-o\")",
        "detail": "apps.chrome.chrome_win",
        "documentation": {}
    },
    {
        "label": "discord_actions",
        "kind": 6,
        "importPath": "apps.discord.discord",
        "description": "apps.discord.discord",
        "peekOfCode": "class discord_actions:\n    def discord_mentions_last():\n        \"\"\"Go up to channel with unread mentions\"\"\"\n    def discord_mentions_next():\n        \"\"\"Go down to channel with unread mentions\"\"\"\n    def discord_oldest_unread():\n        \"\"\"Go to oldest unread message\"\"\"\n    def discord_toggle_pins():\n        \"\"\"Toggle pins popout\"\"\"\n    def discord_toggle_inbox():",
        "detail": "apps.discord.discord",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "apps.discord.discord",
        "description": "apps.discord.discord",
        "peekOfCode": "mod = Module()\napps = mod.apps\napps.discord = \"app.name: Discord\"\napps.discord = \"app.name: Discord.exe\"\napps.discord = \"\"\"\ntag: browser\nbrowser.host: discord.com\n\"\"\"\nmod.list(\"discord_destination\", desc=\"discord destination\")\nctx = Context()",
        "detail": "apps.discord.discord",
        "documentation": {}
    },
    {
        "label": "apps",
        "kind": 5,
        "importPath": "apps.discord.discord",
        "description": "apps.discord.discord",
        "peekOfCode": "apps = mod.apps\napps.discord = \"app.name: Discord\"\napps.discord = \"app.name: Discord.exe\"\napps.discord = \"\"\"\ntag: browser\nbrowser.host: discord.com\n\"\"\"\nmod.list(\"discord_destination\", desc=\"discord destination\")\nctx = Context()\nctx.matches = r\"\"\"",
        "detail": "apps.discord.discord",
        "documentation": {}
    },
    {
        "label": "apps.discord",
        "kind": 5,
        "importPath": "apps.discord.discord",
        "description": "apps.discord.discord",
        "peekOfCode": "apps.discord = \"app.name: Discord\"\napps.discord = \"app.name: Discord.exe\"\napps.discord = \"\"\"\ntag: browser\nbrowser.host: discord.com\n\"\"\"\nmod.list(\"discord_destination\", desc=\"discord destination\")\nctx = Context()\nctx.matches = r\"\"\"\napp: discord",
        "detail": "apps.discord.discord",
        "documentation": {}
    },
    {
        "label": "apps.discord",
        "kind": 5,
        "importPath": "apps.discord.discord",
        "description": "apps.discord.discord",
        "peekOfCode": "apps.discord = \"app.name: Discord.exe\"\napps.discord = \"\"\"\ntag: browser\nbrowser.host: discord.com\n\"\"\"\nmod.list(\"discord_destination\", desc=\"discord destination\")\nctx = Context()\nctx.matches = r\"\"\"\napp: discord\n\"\"\"",
        "detail": "apps.discord.discord",
        "documentation": {}
    },
    {
        "label": "apps.discord",
        "kind": 5,
        "importPath": "apps.discord.discord",
        "description": "apps.discord.discord",
        "peekOfCode": "apps.discord = \"\"\"\ntag: browser\nbrowser.host: discord.com\n\"\"\"\nmod.list(\"discord_destination\", desc=\"discord destination\")\nctx = Context()\nctx.matches = r\"\"\"\napp: discord\n\"\"\"\nctx.lists[\"user.discord_destination\"] = {",
        "detail": "apps.discord.discord",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.discord.discord",
        "description": "apps.discord.discord",
        "peekOfCode": "ctx = Context()\nctx.matches = r\"\"\"\napp: discord\n\"\"\"\nctx.lists[\"user.discord_destination\"] = {\n    \"user\": \"@\",\n    \"channel\": \"#\",\n    \"voice\": \"!\",\n    \"server\": \"*\",\n}",
        "detail": "apps.discord.discord",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "apps.discord.discord",
        "description": "apps.discord.discord",
        "peekOfCode": "ctx.matches = r\"\"\"\napp: discord\n\"\"\"\nctx.lists[\"user.discord_destination\"] = {\n    \"user\": \"@\",\n    \"channel\": \"#\",\n    \"voice\": \"!\",\n    \"server\": \"*\",\n}\n@mod.action_class",
        "detail": "apps.discord.discord",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"user.discord_destination\"]",
        "kind": 5,
        "importPath": "apps.discord.discord",
        "description": "apps.discord.discord",
        "peekOfCode": "ctx.lists[\"user.discord_destination\"] = {\n    \"user\": \"@\",\n    \"channel\": \"#\",\n    \"voice\": \"!\",\n    \"server\": \"*\",\n}\n@mod.action_class\nclass discord_actions:\n    def discord_mentions_last():\n        \"\"\"Go up to channel with unread mentions\"\"\"",
        "detail": "apps.discord.discord",
        "documentation": {}
    },
    {
        "label": "UserActions",
        "kind": 6,
        "importPath": "apps.discord.discord_mac",
        "description": "apps.discord.discord_mac",
        "peekOfCode": "class UserActions:\n    # Navigation: Servers\n    def messaging_workspace_previous():\n        actions.key(\"cmd-alt-up\")\n    def messaging_workspace_next():\n        actions.key(\"cmd-alt-down\")\n    # Navigation: Channels\n    def messaging_open_channel_picker():\n        actions.key(\"cmd-k\")\n    def messaging_channel_previous():",
        "detail": "apps.discord.discord_mac",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.discord.discord_mac",
        "description": "apps.discord.discord_mac",
        "peekOfCode": "ctx = Context()\nctx.matches = r\"\"\"\nos: mac\napp: discord\n\"\"\"\n@ctx.action_class(\"user\")\nclass UserActions:\n    # Navigation: Servers\n    def messaging_workspace_previous():\n        actions.key(\"cmd-alt-up\")",
        "detail": "apps.discord.discord_mac",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "apps.discord.discord_mac",
        "description": "apps.discord.discord_mac",
        "peekOfCode": "ctx.matches = r\"\"\"\nos: mac\napp: discord\n\"\"\"\n@ctx.action_class(\"user\")\nclass UserActions:\n    # Navigation: Servers\n    def messaging_workspace_previous():\n        actions.key(\"cmd-alt-up\")\n    def messaging_workspace_next():",
        "detail": "apps.discord.discord_mac",
        "documentation": {}
    },
    {
        "label": "UserActions",
        "kind": 6,
        "importPath": "apps.discord.discord_win",
        "description": "apps.discord.discord_win",
        "peekOfCode": "class UserActions:\n    # Navigation: Servers\n    def messaging_workspace_previous():\n        actions.key(\"ctrl-alt-up\")\n    def messaging_workspace_next():\n        actions.key(\"ctrl-alt-down\")\n    # Navigation: Channels\n    def messaging_open_channel_picker():\n        actions.key(\"ctrl-k\")\n    def messaging_channel_previous():",
        "detail": "apps.discord.discord_win",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.discord.discord_win",
        "description": "apps.discord.discord_win",
        "peekOfCode": "ctx = Context()\nctx.matches = r\"\"\"\nos: windows\nos: linux\napp: discord\n\"\"\"\n@ctx.action_class(\"user\")\nclass UserActions:\n    # Navigation: Servers\n    def messaging_workspace_previous():",
        "detail": "apps.discord.discord_win",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "apps.discord.discord_win",
        "description": "apps.discord.discord_win",
        "peekOfCode": "ctx.matches = r\"\"\"\nos: windows\nos: linux\napp: discord\n\"\"\"\n@ctx.action_class(\"user\")\nclass UserActions:\n    # Navigation: Servers\n    def messaging_workspace_previous():\n        actions.key(\"ctrl-alt-up\")",
        "detail": "apps.discord.discord_win",
        "documentation": {}
    },
    {
        "label": "AppActions",
        "kind": 6,
        "importPath": "apps.eclipse.eclipse_win",
        "description": "apps.eclipse.eclipse_win",
        "peekOfCode": "class AppActions:\n    # talon app actions\n    def tab_close():\n        actions.key(\"ctrl-w\")\n    def tab_next():\n        actions.key(\"ctrl-pagedown\")\n    def tab_previous():\n        actions.key(\"ctrl-pageup\")\n    # action(app.tab_reopen):\n    def window_close():",
        "detail": "apps.eclipse.eclipse_win",
        "documentation": {}
    },
    {
        "label": "CodeActions",
        "kind": 6,
        "importPath": "apps.eclipse.eclipse_win",
        "description": "apps.eclipse.eclipse_win",
        "peekOfCode": "class CodeActions:\n    # talon code actions\n    def toggle_comment():\n        actions.key(\"ctrl-7\")\n@ctx.action_class(\"edit\")\nclass EditActions:\n    def find(text: str):\n        actions.key(\"ctrl-f\")\n        actions.insert(text)\n    def line_swap_up():",
        "detail": "apps.eclipse.eclipse_win",
        "documentation": {}
    },
    {
        "label": "EditActions",
        "kind": 6,
        "importPath": "apps.eclipse.eclipse_win",
        "description": "apps.eclipse.eclipse_win",
        "peekOfCode": "class EditActions:\n    def find(text: str):\n        actions.key(\"ctrl-f\")\n        actions.insert(text)\n    def line_swap_up():\n        actions.key(\"alt-up\")\n    def line_swap_down():\n        actions.key(\"alt-down\")\n    def line_clone():\n        actions.key(\"ctrl-alt-down\")",
        "detail": "apps.eclipse.eclipse_win",
        "documentation": {}
    },
    {
        "label": "UserActions",
        "kind": 6,
        "importPath": "apps.eclipse.eclipse_win",
        "description": "apps.eclipse.eclipse_win",
        "peekOfCode": "class UserActions:\n    # generic_snippet.py support beginHelp close\n    # def snippet_search(text: str):\n    #     actions.user.vscode(\"Insert Snippet\")\n    #     actions.insert(text)\n    # def snippet_insert(text: str):\n    #     \"\"\"Inserts a snippet\"\"\"\n    #     actions.user.vscode(\"Insert Snippet\")\n    #     actions.insert(text)\n    #     actions.key(\"enter\")",
        "detail": "apps.eclipse.eclipse_win",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.eclipse.eclipse_win",
        "description": "apps.eclipse.eclipse_win",
        "peekOfCode": "ctx = Context()\nmod = Module()\nmod.apps.eclipse = \"\"\"\nos: windows\nand app.name: eclipse.exe\n\"\"\"\nctx.matches = r\"\"\"\napp: eclipse\n\"\"\"\n@ctx.action_class(\"app\")",
        "detail": "apps.eclipse.eclipse_win",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "apps.eclipse.eclipse_win",
        "description": "apps.eclipse.eclipse_win",
        "peekOfCode": "mod = Module()\nmod.apps.eclipse = \"\"\"\nos: windows\nand app.name: eclipse.exe\n\"\"\"\nctx.matches = r\"\"\"\napp: eclipse\n\"\"\"\n@ctx.action_class(\"app\")\nclass AppActions:",
        "detail": "apps.eclipse.eclipse_win",
        "documentation": {}
    },
    {
        "label": "mod.apps.eclipse",
        "kind": 5,
        "importPath": "apps.eclipse.eclipse_win",
        "description": "apps.eclipse.eclipse_win",
        "peekOfCode": "mod.apps.eclipse = \"\"\"\nos: windows\nand app.name: eclipse.exe\n\"\"\"\nctx.matches = r\"\"\"\napp: eclipse\n\"\"\"\n@ctx.action_class(\"app\")\nclass AppActions:\n    # talon app actions",
        "detail": "apps.eclipse.eclipse_win",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "apps.eclipse.eclipse_win",
        "description": "apps.eclipse.eclipse_win",
        "peekOfCode": "ctx.matches = r\"\"\"\napp: eclipse\n\"\"\"\n@ctx.action_class(\"app\")\nclass AppActions:\n    # talon app actions\n    def tab_close():\n        actions.key(\"ctrl-w\")\n    def tab_next():\n        actions.key(\"ctrl-pagedown\")",
        "detail": "apps.eclipse.eclipse_win",
        "documentation": {}
    },
    {
        "label": "BrowserActions",
        "kind": 6,
        "importPath": "apps.edge.edge",
        "description": "apps.edge.edge",
        "peekOfCode": "class BrowserActions:\n    def go(url: str):\n        actions.browser.focus_address()\n        actions.sleep(\"50ms\")\n        actions.insert(url)\n        actions.key(\"enter\")",
        "detail": "apps.edge.edge",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "apps.edge.edge",
        "description": "apps.edge.edge",
        "peekOfCode": "mod = Module()\nctx = Context()\nmod.apps.microsoft_edge = \"\"\"\nos: windows\nand app.name: msedge.exe\nos: windows\nand app.name: Microsoft Edge\nos: windows\nand app.exe: msedge.exe\nos: mac",
        "detail": "apps.edge.edge",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.edge.edge",
        "description": "apps.edge.edge",
        "peekOfCode": "ctx = Context()\nmod.apps.microsoft_edge = \"\"\"\nos: windows\nand app.name: msedge.exe\nos: windows\nand app.name: Microsoft Edge\nos: windows\nand app.exe: msedge.exe\nos: mac\nand app.bundle: com.microsoft.edgemac",
        "detail": "apps.edge.edge",
        "documentation": {}
    },
    {
        "label": "mod.apps.microsoft_edge",
        "kind": 5,
        "importPath": "apps.edge.edge",
        "description": "apps.edge.edge",
        "peekOfCode": "mod.apps.microsoft_edge = \"\"\"\nos: windows\nand app.name: msedge.exe\nos: windows\nand app.name: Microsoft Edge\nos: windows\nand app.exe: msedge.exe\nos: mac\nand app.bundle: com.microsoft.edgemac\n\"\"\"",
        "detail": "apps.edge.edge",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "apps.edge.edge",
        "description": "apps.edge.edge",
        "peekOfCode": "ctx.matches = r\"\"\"\napp: microsoft_edge\n\"\"\"\n@ctx.action_class(\"browser\")\nclass BrowserActions:\n    def go(url: str):\n        actions.browser.focus_address()\n        actions.sleep(\"50ms\")\n        actions.insert(url)\n        actions.key(\"enter\")",
        "detail": "apps.edge.edge",
        "documentation": {}
    },
    {
        "label": "BrowserActions",
        "kind": 6,
        "importPath": "apps.edge.edge_mac",
        "description": "apps.edge.edge_mac",
        "peekOfCode": "class BrowserActions:\n    # action(browser.address):\n    def bookmark():\n        actions.key(\"cmd-d\")\n    def bookmark_tabs():\n        actions.key(\"cmd-shift-d\")\n    def bookmarks():\n        actions.key(\"cmd-alt-b\")\n    def bookmarks_bar():\n        actions.key(\"cmd-shift-b\")",
        "detail": "apps.edge.edge_mac",
        "documentation": {}
    },
    {
        "label": "UserActions",
        "kind": 6,
        "importPath": "apps.edge.edge_mac",
        "description": "apps.edge.edge_mac",
        "peekOfCode": "class UserActions:\n    def tab_jump(number: int):\n        if number < 9:\n            actions.key(f\"cmd-{number}\")\n    def tab_final():\n        actions.key(\"cmd-9\")",
        "detail": "apps.edge.edge_mac",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.edge.edge_mac",
        "description": "apps.edge.edge_mac",
        "peekOfCode": "ctx = Context()\nctx.matches = r\"\"\"\nos: mac\napp: microsoft_edge\n\"\"\"\nctx.tags = [\"browser\", \"user.tabs\"]\n@ctx.action_class(\"browser\")\nclass BrowserActions:\n    # action(browser.address):\n    def bookmark():",
        "detail": "apps.edge.edge_mac",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "apps.edge.edge_mac",
        "description": "apps.edge.edge_mac",
        "peekOfCode": "ctx.matches = r\"\"\"\nos: mac\napp: microsoft_edge\n\"\"\"\nctx.tags = [\"browser\", \"user.tabs\"]\n@ctx.action_class(\"browser\")\nclass BrowserActions:\n    # action(browser.address):\n    def bookmark():\n        actions.key(\"cmd-d\")",
        "detail": "apps.edge.edge_mac",
        "documentation": {}
    },
    {
        "label": "ctx.tags",
        "kind": 5,
        "importPath": "apps.edge.edge_mac",
        "description": "apps.edge.edge_mac",
        "peekOfCode": "ctx.tags = [\"browser\", \"user.tabs\"]\n@ctx.action_class(\"browser\")\nclass BrowserActions:\n    # action(browser.address):\n    def bookmark():\n        actions.key(\"cmd-d\")\n    def bookmark_tabs():\n        actions.key(\"cmd-shift-d\")\n    def bookmarks():\n        actions.key(\"cmd-alt-b\")",
        "detail": "apps.edge.edge_mac",
        "documentation": {}
    },
    {
        "label": "BrowserActions",
        "kind": 6,
        "importPath": "apps.edge.edge_win",
        "description": "apps.edge.edge_win",
        "peekOfCode": "class BrowserActions:\n    # action(browser.address):\n    def bookmark():\n        actions.key(\"ctrl-d\")\n    def bookmark_tabs():\n        actions.key(\"ctrl-shift-d\")\n    def bookmarks():\n        actions.key(\"ctrl-shift-o\")\n    def bookmarks_bar():\n        actions.key(\"ctrl-shift-b\")",
        "detail": "apps.edge.edge_win",
        "documentation": {}
    },
    {
        "label": "UserActions",
        "kind": 6,
        "importPath": "apps.edge.edge_win",
        "description": "apps.edge.edge_win",
        "peekOfCode": "class UserActions:\n    def tab_jump(number: int):\n        if number < 9:\n            actions.key(f\"ctrl-{number}\")\n    def tab_final():\n        actions.key(\"ctrl-9\")",
        "detail": "apps.edge.edge_win",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.edge.edge_win",
        "description": "apps.edge.edge_win",
        "peekOfCode": "ctx = Context()\nctx.matches = r\"\"\"\nos: windows\napp: microsoft_edge\n\"\"\"\nctx.tags = [\"browser\", \"user.tabs\"]\n@ctx.action_class(\"browser\")\nclass BrowserActions:\n    # action(browser.address):\n    def bookmark():",
        "detail": "apps.edge.edge_win",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "apps.edge.edge_win",
        "description": "apps.edge.edge_win",
        "peekOfCode": "ctx.matches = r\"\"\"\nos: windows\napp: microsoft_edge\n\"\"\"\nctx.tags = [\"browser\", \"user.tabs\"]\n@ctx.action_class(\"browser\")\nclass BrowserActions:\n    # action(browser.address):\n    def bookmark():\n        actions.key(\"ctrl-d\")",
        "detail": "apps.edge.edge_win",
        "documentation": {}
    },
    {
        "label": "ctx.tags",
        "kind": 5,
        "importPath": "apps.edge.edge_win",
        "description": "apps.edge.edge_win",
        "peekOfCode": "ctx.tags = [\"browser\", \"user.tabs\"]\n@ctx.action_class(\"browser\")\nclass BrowserActions:\n    # action(browser.address):\n    def bookmark():\n        actions.key(\"ctrl-d\")\n    def bookmark_tabs():\n        actions.key(\"ctrl-shift-d\")\n    def bookmarks():\n        actions.key(\"ctrl-shift-o\")",
        "detail": "apps.edge.edge_win",
        "documentation": {}
    },
    {
        "label": "UserActions",
        "kind": 6,
        "importPath": "apps.evince.evince_linux",
        "description": "apps.evince.evince_linux",
        "peekOfCode": "class UserActions:\n    # user.pages\n    def page_current():\n        actions.key(\"ctrl-l\")\n        page = actions.edit.selected_text()\n        actions.key(\"escape\")\n        return int(page)\n    def page_next():\n        actions.key(\"n\")\n    def page_previous():",
        "detail": "apps.evince.evince_linux",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "apps.evince.evince_linux",
        "description": "apps.evince.evince_linux",
        "peekOfCode": "mod = Module()\nmod.apps.evince = \"\"\"\nos: linux\nand app.name: Evince\n\"\"\"\n# Context matching\nctx = Context()\nctx.matches = r\"\"\"\napp: evince\n\"\"\"",
        "detail": "apps.evince.evince_linux",
        "documentation": {}
    },
    {
        "label": "mod.apps.evince",
        "kind": 5,
        "importPath": "apps.evince.evince_linux",
        "description": "apps.evince.evince_linux",
        "peekOfCode": "mod.apps.evince = \"\"\"\nos: linux\nand app.name: Evince\n\"\"\"\n# Context matching\nctx = Context()\nctx.matches = r\"\"\"\napp: evince\n\"\"\"\n# --- Implement actions ---",
        "detail": "apps.evince.evince_linux",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.evince.evince_linux",
        "description": "apps.evince.evince_linux",
        "peekOfCode": "ctx = Context()\nctx.matches = r\"\"\"\napp: evince\n\"\"\"\n# --- Implement actions ---\n@ctx.action_class(\"user\")\nclass UserActions:\n    # user.pages\n    def page_current():\n        actions.key(\"ctrl-l\")",
        "detail": "apps.evince.evince_linux",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "apps.evince.evince_linux",
        "description": "apps.evince.evince_linux",
        "peekOfCode": "ctx.matches = r\"\"\"\napp: evince\n\"\"\"\n# --- Implement actions ---\n@ctx.action_class(\"user\")\nclass UserActions:\n    # user.pages\n    def page_current():\n        actions.key(\"ctrl-l\")\n        page = actions.edit.selected_text()",
        "detail": "apps.evince.evince_linux",
        "documentation": {}
    },
    {
        "label": "UserActions",
        "kind": 6,
        "importPath": "apps.finder.finder",
        "description": "apps.finder.finder",
        "peekOfCode": "class UserActions:\n    def file_manager_open_parent():\n        actions.key(\"cmd-up\")\n    def file_manager_go_forward():\n        actions.key(\"cmd-]\")\n    def file_manager_go_back():\n        actions.key(\"cmd-[\")\n    def file_manager_current_path():\n        title = ui.active_window().title\n        if \"~\" in title:",
        "detail": "apps.finder.finder",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.finder.finder",
        "description": "apps.finder.finder",
        "peekOfCode": "ctx = Context()\nctx.matches = r\"\"\"\napp: finder\n\"\"\"\ndirectories_to_remap = {\"\": \"/Volumes\"}\ndirectories_to_exclude = {}\n@ctx.action_class(\"user\")\nclass UserActions:\n    def file_manager_open_parent():\n        actions.key(\"cmd-up\")",
        "detail": "apps.finder.finder",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "apps.finder.finder",
        "description": "apps.finder.finder",
        "peekOfCode": "ctx.matches = r\"\"\"\napp: finder\n\"\"\"\ndirectories_to_remap = {\"\": \"/Volumes\"}\ndirectories_to_exclude = {}\n@ctx.action_class(\"user\")\nclass UserActions:\n    def file_manager_open_parent():\n        actions.key(\"cmd-up\")\n    def file_manager_go_forward():",
        "detail": "apps.finder.finder",
        "documentation": {}
    },
    {
        "label": "directories_to_remap",
        "kind": 5,
        "importPath": "apps.finder.finder",
        "description": "apps.finder.finder",
        "peekOfCode": "directories_to_remap = {\"\": \"/Volumes\"}\ndirectories_to_exclude = {}\n@ctx.action_class(\"user\")\nclass UserActions:\n    def file_manager_open_parent():\n        actions.key(\"cmd-up\")\n    def file_manager_go_forward():\n        actions.key(\"cmd-]\")\n    def file_manager_go_back():\n        actions.key(\"cmd-[\")",
        "detail": "apps.finder.finder",
        "documentation": {}
    },
    {
        "label": "directories_to_exclude",
        "kind": 5,
        "importPath": "apps.finder.finder",
        "description": "apps.finder.finder",
        "peekOfCode": "directories_to_exclude = {}\n@ctx.action_class(\"user\")\nclass UserActions:\n    def file_manager_open_parent():\n        actions.key(\"cmd-up\")\n    def file_manager_go_forward():\n        actions.key(\"cmd-]\")\n    def file_manager_go_back():\n        actions.key(\"cmd-[\")\n    def file_manager_current_path():",
        "detail": "apps.finder.finder",
        "documentation": {}
    },
    {
        "label": "BrowserActions",
        "kind": 6,
        "importPath": "apps.firefox.firefox",
        "description": "apps.firefox.firefox",
        "peekOfCode": "class BrowserActions:\n    # TODO\n    # action(browser.address):\n    # action(browser.title):\n    def go(url: str):\n        actions.browser.focus_address()\n        actions.sleep(\"50ms\")\n        actions.insert(url)\n        actions.key(\"enter\")\n    def focus_search():",
        "detail": "apps.firefox.firefox",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.firefox.firefox",
        "description": "apps.firefox.firefox",
        "peekOfCode": "ctx = Context()\nmod = Module()\napps = mod.apps\napps.firefox = \"app.name: Firefox\"\napps.firefox = \"app.name: Firefox Developer Edition\"\napps.firefox = \"app.name: firefox\"\napps.firefox = \"\"\"\nos: windows\nand app.name: Firefox\nos: windows",
        "detail": "apps.firefox.firefox",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "apps.firefox.firefox",
        "description": "apps.firefox.firefox",
        "peekOfCode": "mod = Module()\napps = mod.apps\napps.firefox = \"app.name: Firefox\"\napps.firefox = \"app.name: Firefox Developer Edition\"\napps.firefox = \"app.name: firefox\"\napps.firefox = \"\"\"\nos: windows\nand app.name: Firefox\nos: windows\nand app.exe: firefox.exe",
        "detail": "apps.firefox.firefox",
        "documentation": {}
    },
    {
        "label": "apps",
        "kind": 5,
        "importPath": "apps.firefox.firefox",
        "description": "apps.firefox.firefox",
        "peekOfCode": "apps = mod.apps\napps.firefox = \"app.name: Firefox\"\napps.firefox = \"app.name: Firefox Developer Edition\"\napps.firefox = \"app.name: firefox\"\napps.firefox = \"\"\"\nos: windows\nand app.name: Firefox\nos: windows\nand app.exe: firefox.exe\n\"\"\"",
        "detail": "apps.firefox.firefox",
        "documentation": {}
    },
    {
        "label": "apps.firefox",
        "kind": 5,
        "importPath": "apps.firefox.firefox",
        "description": "apps.firefox.firefox",
        "peekOfCode": "apps.firefox = \"app.name: Firefox\"\napps.firefox = \"app.name: Firefox Developer Edition\"\napps.firefox = \"app.name: firefox\"\napps.firefox = \"\"\"\nos: windows\nand app.name: Firefox\nos: windows\nand app.exe: firefox.exe\n\"\"\"\napps.firefox = \"\"\"",
        "detail": "apps.firefox.firefox",
        "documentation": {}
    },
    {
        "label": "apps.firefox",
        "kind": 5,
        "importPath": "apps.firefox.firefox",
        "description": "apps.firefox.firefox",
        "peekOfCode": "apps.firefox = \"app.name: Firefox Developer Edition\"\napps.firefox = \"app.name: firefox\"\napps.firefox = \"\"\"\nos: windows\nand app.name: Firefox\nos: windows\nand app.exe: firefox.exe\n\"\"\"\napps.firefox = \"\"\"\nos: mac",
        "detail": "apps.firefox.firefox",
        "documentation": {}
    },
    {
        "label": "apps.firefox",
        "kind": 5,
        "importPath": "apps.firefox.firefox",
        "description": "apps.firefox.firefox",
        "peekOfCode": "apps.firefox = \"app.name: firefox\"\napps.firefox = \"\"\"\nos: windows\nand app.name: Firefox\nos: windows\nand app.exe: firefox.exe\n\"\"\"\napps.firefox = \"\"\"\nos: mac\nand app.bundle: org.mozilla.firefox",
        "detail": "apps.firefox.firefox",
        "documentation": {}
    },
    {
        "label": "apps.firefox",
        "kind": 5,
        "importPath": "apps.firefox.firefox",
        "description": "apps.firefox.firefox",
        "peekOfCode": "apps.firefox = \"\"\"\nos: windows\nand app.name: Firefox\nos: windows\nand app.exe: firefox.exe\n\"\"\"\napps.firefox = \"\"\"\nos: mac\nand app.bundle: org.mozilla.firefox\n\"\"\"",
        "detail": "apps.firefox.firefox",
        "documentation": {}
    },
    {
        "label": "apps.firefox",
        "kind": 5,
        "importPath": "apps.firefox.firefox",
        "description": "apps.firefox.firefox",
        "peekOfCode": "apps.firefox = \"\"\"\nos: mac\nand app.bundle: org.mozilla.firefox\n\"\"\"\nctx.matches = r\"\"\"\napp: firefox\n\"\"\"\n@ctx.action_class(\"browser\")\nclass BrowserActions:\n    # TODO",
        "detail": "apps.firefox.firefox",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "apps.firefox.firefox",
        "description": "apps.firefox.firefox",
        "peekOfCode": "ctx.matches = r\"\"\"\napp: firefox\n\"\"\"\n@ctx.action_class(\"browser\")\nclass BrowserActions:\n    # TODO\n    # action(browser.address):\n    # action(browser.title):\n    def go(url: str):\n        actions.browser.focus_address()",
        "detail": "apps.firefox.firefox",
        "documentation": {}
    },
    {
        "label": "AppActions",
        "kind": 6,
        "importPath": "apps.firefox.firefox_linux",
        "description": "apps.firefox.firefox_linux",
        "peekOfCode": "class AppActions:\n    def tab_next():\n        actions.key(\"ctrl-pagedown\")\n    def tab_previous():\n        actions.key(\"ctrl-pageup\")\n@ctx.action_class(\"browser\")\nclass BrowserActions:\n    def bookmark():\n        actions.key(\"ctrl-d\")\n    def bookmark_tabs():",
        "detail": "apps.firefox.firefox_linux",
        "documentation": {}
    },
    {
        "label": "BrowserActions",
        "kind": 6,
        "importPath": "apps.firefox.firefox_linux",
        "description": "apps.firefox.firefox_linux",
        "peekOfCode": "class BrowserActions:\n    def bookmark():\n        actions.key(\"ctrl-d\")\n    def bookmark_tabs():\n        actions.key(\"ctrl-shift-d\")\n    def bookmarks():\n        actions.key(\"ctrl-shift-o\")\n    def bookmarks_bar():\n        actions.key(\"ctrl-b\")\n    def focus_address():",
        "detail": "apps.firefox.firefox_linux",
        "documentation": {}
    },
    {
        "label": "UserActions",
        "kind": 6,
        "importPath": "apps.firefox.firefox_linux",
        "description": "apps.firefox.firefox_linux",
        "peekOfCode": "class UserActions:\n    def tab_jump(number: int):\n        if number < 9:\n            actions.key(f\"alt-{number}\")\n    def tab_final():\n        actions.key(\"alt-9\")",
        "detail": "apps.firefox.firefox_linux",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.firefox.firefox_linux",
        "description": "apps.firefox.firefox_linux",
        "peekOfCode": "ctx = Context()\nctx.matches = r\"\"\"\nos: linux\napp: Firefox\napp: firefox\n\"\"\"\n@ctx.action_class(\"app\")\nclass AppActions:\n    def tab_next():\n        actions.key(\"ctrl-pagedown\")",
        "detail": "apps.firefox.firefox_linux",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "apps.firefox.firefox_linux",
        "description": "apps.firefox.firefox_linux",
        "peekOfCode": "ctx.matches = r\"\"\"\nos: linux\napp: Firefox\napp: firefox\n\"\"\"\n@ctx.action_class(\"app\")\nclass AppActions:\n    def tab_next():\n        actions.key(\"ctrl-pagedown\")\n    def tab_previous():",
        "detail": "apps.firefox.firefox_linux",
        "documentation": {}
    },
    {
        "label": "BrowserActions",
        "kind": 6,
        "importPath": "apps.firefox.firefox_mac",
        "description": "apps.firefox.firefox_mac",
        "peekOfCode": "class BrowserActions:\n    def bookmark():\n        actions.key(\"cmd-d\")\n    def bookmark_tabs():\n        actions.key(\"cmd-shift-d\")\n    def bookmarks():\n        actions.key(\"cmd-alt-b\")\n        # action(browser.bookmarks_bar):\n        # \tkey(ctrl-shift-b)\n    def focus_address():",
        "detail": "apps.firefox.firefox_mac",
        "documentation": {}
    },
    {
        "label": "UserActions",
        "kind": 6,
        "importPath": "apps.firefox.firefox_mac",
        "description": "apps.firefox.firefox_mac",
        "peekOfCode": "class UserActions:\n    def tab_jump(number: int):\n        if number < 9:\n            actions.key(f\"cmd-{number}\")\n    def tab_final():\n        actions.key(\"cmd-9\")",
        "detail": "apps.firefox.firefox_mac",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.firefox.firefox_mac",
        "description": "apps.firefox.firefox_mac",
        "peekOfCode": "ctx = Context()\nctx.matches = r\"\"\"\nos: mac\napp: firefox\n\"\"\"\n@ctx.action_class(\"browser\")\nclass BrowserActions:\n    def bookmark():\n        actions.key(\"cmd-d\")\n    def bookmark_tabs():",
        "detail": "apps.firefox.firefox_mac",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "apps.firefox.firefox_mac",
        "description": "apps.firefox.firefox_mac",
        "peekOfCode": "ctx.matches = r\"\"\"\nos: mac\napp: firefox\n\"\"\"\n@ctx.action_class(\"browser\")\nclass BrowserActions:\n    def bookmark():\n        actions.key(\"cmd-d\")\n    def bookmark_tabs():\n        actions.key(\"cmd-shift-d\")",
        "detail": "apps.firefox.firefox_mac",
        "documentation": {}
    },
    {
        "label": "AppActions",
        "kind": 6,
        "importPath": "apps.firefox.firefox_win",
        "description": "apps.firefox.firefox_win",
        "peekOfCode": "class AppActions:\n    def tab_next():\n        actions.key(\"ctrl-pagedown\")\n    def tab_previous():\n        actions.key(\"ctrl-pageup\")\n@ctx.action_class(\"browser\")\nclass BrowserActions:\n    def bookmark():\n        actions.key(\"ctrl-d\")\n    def bookmark_tabs():",
        "detail": "apps.firefox.firefox_win",
        "documentation": {}
    },
    {
        "label": "BrowserActions",
        "kind": 6,
        "importPath": "apps.firefox.firefox_win",
        "description": "apps.firefox.firefox_win",
        "peekOfCode": "class BrowserActions:\n    def bookmark():\n        actions.key(\"ctrl-d\")\n    def bookmark_tabs():\n        actions.key(\"ctrl-shift-d\")\n    def bookmarks():\n        actions.key(\"ctrl-shift-b\")\n    def bookmarks_bar():\n        actions.key(\"alt-v\")\n        actions.sleep(\"50ms\")",
        "detail": "apps.firefox.firefox_win",
        "documentation": {}
    },
    {
        "label": "UserActions",
        "kind": 6,
        "importPath": "apps.firefox.firefox_win",
        "description": "apps.firefox.firefox_win",
        "peekOfCode": "class UserActions:\n    def tab_jump(number: int):\n        if number < 9:\n            actions.key(f\"ctrl-{number}\")\n    def tab_final():\n        actions.key(\"ctrl-9\")",
        "detail": "apps.firefox.firefox_win",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.firefox.firefox_win",
        "description": "apps.firefox.firefox_win",
        "peekOfCode": "ctx = Context()\nctx.matches = r\"\"\"\nos: windows\napp: firefox\n\"\"\"\n@ctx.action_class(\"app\")\nclass AppActions:\n    def tab_next():\n        actions.key(\"ctrl-pagedown\")\n    def tab_previous():",
        "detail": "apps.firefox.firefox_win",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "apps.firefox.firefox_win",
        "description": "apps.firefox.firefox_win",
        "peekOfCode": "ctx.matches = r\"\"\"\nos: windows\napp: firefox\n\"\"\"\n@ctx.action_class(\"app\")\nclass AppActions:\n    def tab_next():\n        actions.key(\"ctrl-pagedown\")\n    def tab_previous():\n        actions.key(\"ctrl-pageup\")",
        "detail": "apps.firefox.firefox_win",
        "documentation": {}
    },
    {
        "label": "UserActions",
        "kind": 6,
        "importPath": "apps.gdb.gdb",
        "description": "apps.gdb.gdb",
        "peekOfCode": "class UserActions:\n    ##\n    # Generic debugger actions\n    ##\n    # Code execution\n    def debugger_step_into():\n        actions.auto_insert(\"stepi\\n\")\n    def debugger_step_over():\n        actions.auto_insert(\"nexti\\n\")\n    def debugger_step_line():",
        "detail": "apps.gdb.gdb",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.gdb.gdb",
        "description": "apps.gdb.gdb",
        "peekOfCode": "ctx = Context()\nctx.matches = r\"\"\"\nmode: user.gdb\n\"\"\"\n@ctx.action_class(\"user\")\nclass UserActions:\n    ##\n    # Generic debugger actions\n    ##\n    # Code execution",
        "detail": "apps.gdb.gdb",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "apps.gdb.gdb",
        "description": "apps.gdb.gdb",
        "peekOfCode": "ctx.matches = r\"\"\"\nmode: user.gdb\n\"\"\"\n@ctx.action_class(\"user\")\nclass UserActions:\n    ##\n    # Generic debugger actions\n    ##\n    # Code execution\n    def debugger_step_into():",
        "detail": "apps.gdb.gdb",
        "documentation": {}
    },
    {
        "label": "make_list",
        "kind": 2,
        "importPath": "apps.git.git",
        "description": "apps.git.git",
        "peekOfCode": "def make_list(path):\n    with resource.open(path, \"r\") as f:\n        rows = list(csv.reader(f))\n    mapping = {}\n    # ignore header row\n    for row in rows[1:]:\n        if len(row) == 0:\n            continue\n        if len(row) == 1:\n            row = row[0], row[0]",
        "detail": "apps.git.git",
        "documentation": {}
    },
    {
        "label": "git_arguments",
        "kind": 2,
        "importPath": "apps.git.git",
        "description": "apps.git.git",
        "peekOfCode": "def git_arguments(m) -> str:\n    \"\"\"A non-empty sequence of git command arguments, preceded by a space.\"\"\"\n    return \" \" + \" \".join(m.git_argument_list)",
        "detail": "apps.git.git",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "apps.git.git",
        "description": "apps.git.git",
        "peekOfCode": "mod = Module()\nctx = Context()\nmod.list(\"git_command\", desc=\"Git commands.\")\nmod.list(\"git_argument\", desc=\"Command-line git options and arguments.\")\ndirpath = Path(__file__).parent\narguments_csv_path = str(dirpath / \"git_arguments.csv\")\ncommands_csv_path = str(dirpath / \"git_commands.csv\")\ndef make_list(path):\n    with resource.open(path, \"r\") as f:\n        rows = list(csv.reader(f))",
        "detail": "apps.git.git",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.git.git",
        "description": "apps.git.git",
        "peekOfCode": "ctx = Context()\nmod.list(\"git_command\", desc=\"Git commands.\")\nmod.list(\"git_argument\", desc=\"Command-line git options and arguments.\")\ndirpath = Path(__file__).parent\narguments_csv_path = str(dirpath / \"git_arguments.csv\")\ncommands_csv_path = str(dirpath / \"git_commands.csv\")\ndef make_list(path):\n    with resource.open(path, \"r\") as f:\n        rows = list(csv.reader(f))\n    mapping = {}",
        "detail": "apps.git.git",
        "documentation": {}
    },
    {
        "label": "dirpath",
        "kind": 5,
        "importPath": "apps.git.git",
        "description": "apps.git.git",
        "peekOfCode": "dirpath = Path(__file__).parent\narguments_csv_path = str(dirpath / \"git_arguments.csv\")\ncommands_csv_path = str(dirpath / \"git_commands.csv\")\ndef make_list(path):\n    with resource.open(path, \"r\") as f:\n        rows = list(csv.reader(f))\n    mapping = {}\n    # ignore header row\n    for row in rows[1:]:\n        if len(row) == 0:",
        "detail": "apps.git.git",
        "documentation": {}
    },
    {
        "label": "arguments_csv_path",
        "kind": 5,
        "importPath": "apps.git.git",
        "description": "apps.git.git",
        "peekOfCode": "arguments_csv_path = str(dirpath / \"git_arguments.csv\")\ncommands_csv_path = str(dirpath / \"git_commands.csv\")\ndef make_list(path):\n    with resource.open(path, \"r\") as f:\n        rows = list(csv.reader(f))\n    mapping = {}\n    # ignore header row\n    for row in rows[1:]:\n        if len(row) == 0:\n            continue",
        "detail": "apps.git.git",
        "documentation": {}
    },
    {
        "label": "commands_csv_path",
        "kind": 5,
        "importPath": "apps.git.git",
        "description": "apps.git.git",
        "peekOfCode": "commands_csv_path = str(dirpath / \"git_commands.csv\")\ndef make_list(path):\n    with resource.open(path, \"r\") as f:\n        rows = list(csv.reader(f))\n    mapping = {}\n    # ignore header row\n    for row in rows[1:]:\n        if len(row) == 0:\n            continue\n        if len(row) == 1:",
        "detail": "apps.git.git",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"self.git_argument\"]",
        "kind": 5,
        "importPath": "apps.git.git",
        "description": "apps.git.git",
        "peekOfCode": "ctx.lists[\"self.git_argument\"] = make_list(arguments_csv_path)\nctx.lists[\"self.git_command\"] = make_list(commands_csv_path)\n@mod.capture(rule=\"{user.git_argument}+\")\ndef git_arguments(m) -> str:\n    \"\"\"A non-empty sequence of git command arguments, preceded by a space.\"\"\"\n    return \" \" + \" \".join(m.git_argument_list)",
        "detail": "apps.git.git",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"self.git_command\"]",
        "kind": 5,
        "importPath": "apps.git.git",
        "description": "apps.git.git",
        "peekOfCode": "ctx.lists[\"self.git_command\"] = make_list(commands_csv_path)\n@mod.capture(rule=\"{user.git_argument}+\")\ndef git_arguments(m) -> str:\n    \"\"\"A non-empty sequence of git command arguments, preceded by a space.\"\"\"\n    return \" \" + \" \".join(m.git_argument_list)",
        "detail": "apps.git.git",
        "documentation": {}
    },
    {
        "label": "user_actions",
        "kind": 6,
        "importPath": "apps.gnome_terminal.gnome_terminal",
        "description": "apps.gnome_terminal.gnome_terminal",
        "peekOfCode": "class user_actions:\n    # user.tabs\n    def tab_jump(number):\n        actions.key(f\"alt-{number}\")\n@ctx.action_class(\"app\")\nclass app_actions:\n    # app.tabs\n    def tab_open():\n        actions.key(\"ctrl-shift-t\")\n    def tab_previous():",
        "detail": "apps.gnome_terminal.gnome_terminal",
        "documentation": {}
    },
    {
        "label": "app_actions",
        "kind": 6,
        "importPath": "apps.gnome_terminal.gnome_terminal",
        "description": "apps.gnome_terminal.gnome_terminal",
        "peekOfCode": "class app_actions:\n    # app.tabs\n    def tab_open():\n        actions.key(\"ctrl-shift-t\")\n    def tab_previous():\n        actions.key(\"ctrl-pageup\")\n    def tab_next():\n        actions.key(\"ctrl-pagedown\")\n    def tab_close():\n        actions.key(\"ctrl-shift-w\")",
        "detail": "apps.gnome_terminal.gnome_terminal",
        "documentation": {}
    },
    {
        "label": "EditActions",
        "kind": 6,
        "importPath": "apps.gnome_terminal.gnome_terminal",
        "description": "apps.gnome_terminal.gnome_terminal",
        "peekOfCode": "class EditActions:\n    def page_down():\n        actions.key(\"shift-pagedown\")\n    def page_up():\n        actions.key(\"shift-pageup\")\n    def paste():\n        actions.key(\"ctrl-shift-v\")\n    def copy():\n        actions.key(\"ctrl-shift-c\")\n    def find(text: str = None):",
        "detail": "apps.gnome_terminal.gnome_terminal",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "apps.gnome_terminal.gnome_terminal",
        "description": "apps.gnome_terminal.gnome_terminal",
        "peekOfCode": "mod = Module()\nmod.apps.gnome_terminal = \"\"\"\nos: linux\nand app.exe: gnome-terminal-server\nos: linux\nand app.name: Gnome-terminal\n\"\"\"\n# Context matching\nctx = Context()\nctx.matches = r\"\"\"",
        "detail": "apps.gnome_terminal.gnome_terminal",
        "documentation": {}
    },
    {
        "label": "mod.apps.gnome_terminal",
        "kind": 5,
        "importPath": "apps.gnome_terminal.gnome_terminal",
        "description": "apps.gnome_terminal.gnome_terminal",
        "peekOfCode": "mod.apps.gnome_terminal = \"\"\"\nos: linux\nand app.exe: gnome-terminal-server\nos: linux\nand app.name: Gnome-terminal\n\"\"\"\n# Context matching\nctx = Context()\nctx.matches = r\"\"\"\napp: gnome_terminal",
        "detail": "apps.gnome_terminal.gnome_terminal",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.gnome_terminal.gnome_terminal",
        "description": "apps.gnome_terminal.gnome_terminal",
        "peekOfCode": "ctx = Context()\nctx.matches = r\"\"\"\napp: gnome_terminal\n\"\"\"\n# --- Implement actions ---\n@ctx.action_class(\"user\")\nclass user_actions:\n    # user.tabs\n    def tab_jump(number):\n        actions.key(f\"alt-{number}\")",
        "detail": "apps.gnome_terminal.gnome_terminal",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "apps.gnome_terminal.gnome_terminal",
        "description": "apps.gnome_terminal.gnome_terminal",
        "peekOfCode": "ctx.matches = r\"\"\"\napp: gnome_terminal\n\"\"\"\n# --- Implement actions ---\n@ctx.action_class(\"user\")\nclass user_actions:\n    # user.tabs\n    def tab_jump(number):\n        actions.key(f\"alt-{number}\")\n@ctx.action_class(\"app\")",
        "detail": "apps.gnome_terminal.gnome_terminal",
        "documentation": {}
    },
    {
        "label": "AppActions",
        "kind": 6,
        "importPath": "apps.guake.guake_linux",
        "description": "apps.guake.guake_linux",
        "peekOfCode": "class AppActions:\n    def tab_open():\n        actions.key(\"ctrl-shift-t\")\n    def tab_close():\n        actions.key(\"ctrl-shift-w\")\n    def tab_next():\n        actions.key(\"ctrl-pagedown\")\n    def tab_previous():\n        actions.key(\"ctrl-pageup\")",
        "detail": "apps.guake.guake_linux",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.guake.guake_linux",
        "description": "apps.guake.guake_linux",
        "peekOfCode": "ctx = Context()\nctx.matches = r\"\"\"\nos: linux\napp: Guake\n\"\"\"\nctx.tags = [\"user.git\", \"user.kubectl\", \"user.tabs\", \"terminal\"]\n@ctx.action_class(\"app\")\nclass AppActions:\n    def tab_open():\n        actions.key(\"ctrl-shift-t\")",
        "detail": "apps.guake.guake_linux",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "apps.guake.guake_linux",
        "description": "apps.guake.guake_linux",
        "peekOfCode": "ctx.matches = r\"\"\"\nos: linux\napp: Guake\n\"\"\"\nctx.tags = [\"user.git\", \"user.kubectl\", \"user.tabs\", \"terminal\"]\n@ctx.action_class(\"app\")\nclass AppActions:\n    def tab_open():\n        actions.key(\"ctrl-shift-t\")\n    def tab_close():",
        "detail": "apps.guake.guake_linux",
        "documentation": {}
    },
    {
        "label": "ctx.tags",
        "kind": 5,
        "importPath": "apps.guake.guake_linux",
        "description": "apps.guake.guake_linux",
        "peekOfCode": "ctx.tags = [\"user.git\", \"user.kubectl\", \"user.tabs\", \"terminal\"]\n@ctx.action_class(\"app\")\nclass AppActions:\n    def tab_open():\n        actions.key(\"ctrl-shift-t\")\n    def tab_close():\n        actions.key(\"ctrl-shift-w\")\n    def tab_next():\n        actions.key(\"ctrl-pagedown\")\n    def tab_previous():",
        "detail": "apps.guake.guake_linux",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "apps.i3wm.i3wm",
        "description": "apps.i3wm.i3wm",
        "peekOfCode": "class Actions:\n    def i3wm_launch():\n        \"\"\"Trigger the i3 launcher: ex rofi\"\"\"\n        key = settings.get(\"user.i3_mod_key\")\n        actions.key(f\"{key}-d\")\n    def i3wm_shell():\n        \"\"\"Launch a shell\"\"\"\n        key = settings.get(\"user.i3_mod_key\")\n        actions.key(f\"{key}-enter\")\n    def i3wm_lock():",
        "detail": "apps.i3wm.i3wm",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "apps.i3wm.i3wm",
        "description": "apps.i3wm.i3wm",
        "peekOfCode": "mod = Module()\nmod.tag(\"i3wm\", desc=\"tag for loading i3wm related files\")\nmod.setting(\n    \"i3_config_path\",\n    type=str,\n    default=\"~/.i3/config\",\n    desc=\"Where to find the configuration path\",\n)\nmod.setting(\n    \"i3_mod_key\",",
        "detail": "apps.i3wm.i3wm",
        "documentation": {}
    },
    {
        "label": "user_actions",
        "kind": 6,
        "importPath": "apps.iterm.iterm",
        "description": "apps.iterm.iterm",
        "peekOfCode": "class user_actions:\n    # def file_manager_current_path():\n    #     title = ui.active_window().title\n    #     if \"~\" in title:\n    #         title = os.path.expanduser(title)\n    #     if title in directories_to_remap:\n    #         title = directories_to_remap[title]\n    #     if title in directories_to_exclude:\n    #         title = None\n    #     return title",
        "detail": "apps.iterm.iterm",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.iterm.iterm",
        "description": "apps.iterm.iterm",
        "peekOfCode": "ctx = Context()\nctx.matches = r\"\"\"\napp: iterm2\n\"\"\"\ndirectories_to_remap = {}\ndirectories_to_exclude = {}\n@ctx.action_class(\"user\")\nclass user_actions:\n    # def file_manager_current_path():\n    #     title = ui.active_window().title",
        "detail": "apps.iterm.iterm",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "apps.iterm.iterm",
        "description": "apps.iterm.iterm",
        "peekOfCode": "ctx.matches = r\"\"\"\napp: iterm2\n\"\"\"\ndirectories_to_remap = {}\ndirectories_to_exclude = {}\n@ctx.action_class(\"user\")\nclass user_actions:\n    # def file_manager_current_path():\n    #     title = ui.active_window().title\n    #     if \"~\" in title:",
        "detail": "apps.iterm.iterm",
        "documentation": {}
    },
    {
        "label": "directories_to_remap",
        "kind": 5,
        "importPath": "apps.iterm.iterm",
        "description": "apps.iterm.iterm",
        "peekOfCode": "directories_to_remap = {}\ndirectories_to_exclude = {}\n@ctx.action_class(\"user\")\nclass user_actions:\n    # def file_manager_current_path():\n    #     title = ui.active_window().title\n    #     if \"~\" in title:\n    #         title = os.path.expanduser(title)\n    #     if title in directories_to_remap:\n    #         title = directories_to_remap[title]",
        "detail": "apps.iterm.iterm",
        "documentation": {}
    },
    {
        "label": "directories_to_exclude",
        "kind": 5,
        "importPath": "apps.iterm.iterm",
        "description": "apps.iterm.iterm",
        "peekOfCode": "directories_to_exclude = {}\n@ctx.action_class(\"user\")\nclass user_actions:\n    # def file_manager_current_path():\n    #     title = ui.active_window().title\n    #     if \"~\" in title:\n    #         title = os.path.expanduser(title)\n    #     if title in directories_to_remap:\n    #         title = directories_to_remap[title]\n    #     if title in directories_to_exclude:",
        "detail": "apps.iterm.iterm",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "apps.jetbrains.jetbrains",
        "description": "apps.jetbrains.jetbrains",
        "peekOfCode": "class Actions:\n    def idea(commands: str):\n        \"\"\"Send a command to Jetbrains product\"\"\"\n        idea_commands(commands)\n    def idea_grab(times: int):\n        \"\"\"Copies specified number of words to the left\"\"\"\n        old_clip = clip.get()\n        try:\n            original_line, original_column = get_idea_location()\n            for _ in range(times):",
        "detail": "apps.jetbrains.jetbrains",
        "documentation": {}
    },
    {
        "label": "AppActions",
        "kind": 6,
        "importPath": "apps.jetbrains.jetbrains",
        "description": "apps.jetbrains.jetbrains",
        "peekOfCode": "class AppActions:\n    def tab_next():\n        actions.user.idea(\"action NextTab\")\n    def tab_previous():\n        actions.user.idea(\"action PreviousTab\")\n    def tab_close():\n        actions.user.idea(\"action CloseContent\")\n    def tab_reopen():\n        actions.user.idea(\"action ReopenClosedTab\")\n@ctx.action_class(\"code\")",
        "detail": "apps.jetbrains.jetbrains",
        "documentation": {}
    },
    {
        "label": "CodeActions",
        "kind": 6,
        "importPath": "apps.jetbrains.jetbrains",
        "description": "apps.jetbrains.jetbrains",
        "peekOfCode": "class CodeActions:\n    # talon code actions\n    def toggle_comment():\n        actions.user.idea(\"action CommentByLineComment\")\n@ctx.action_class(\"edit\")\nclass EditActions:\n    # talon edit actions\n    def copy():\n        actions.user.idea(\"action EditorCopy\")\n    def cut():",
        "detail": "apps.jetbrains.jetbrains",
        "documentation": {}
    },
    {
        "label": "EditActions",
        "kind": 6,
        "importPath": "apps.jetbrains.jetbrains",
        "description": "apps.jetbrains.jetbrains",
        "peekOfCode": "class EditActions:\n    # talon edit actions\n    def copy():\n        actions.user.idea(\"action EditorCopy\")\n    def cut():\n        actions.user.idea(\"action EditorCut\")\n    def delete():\n        actions.user.idea(\"action EditorBackSpace\")\n    def paste():\n        actions.user.idea(\"action EditorPaste\")",
        "detail": "apps.jetbrains.jetbrains",
        "documentation": {}
    },
    {
        "label": "WinActions",
        "kind": 6,
        "importPath": "apps.jetbrains.jetbrains",
        "description": "apps.jetbrains.jetbrains",
        "peekOfCode": "class WinActions:\n    def filename() -> str:\n        title: str = actions.win.title()\n        result = title.split()\n        # iterate over reversed result\n        # to support titles such as\n        # Class.Library2 – a.js [.workspace]\n        for word in reversed(result):\n            if not word.startswith(\"[\") and \".\" in word:\n                return word",
        "detail": "apps.jetbrains.jetbrains",
        "documentation": {}
    },
    {
        "label": "UserActions",
        "kind": 6,
        "importPath": "apps.jetbrains.jetbrains",
        "description": "apps.jetbrains.jetbrains",
        "peekOfCode": "class UserActions:\n    def tab_jump(number: int):\n        # depends on plugin GoToTabs\n        if number < 10:\n            actions.user.idea(f\"action GoToTab{number}\")\n    def extend_until_line(line: int):\n        actions.user.idea(f\"extend {line}\")\n    def select_range(line_start: int, line_end: int):\n        # if it's a single line, select the entire thing including the ending new-line5\n        if line_start == line_end:",
        "detail": "apps.jetbrains.jetbrains",
        "documentation": {}
    },
    {
        "label": "send_idea_command",
        "kind": 2,
        "importPath": "apps.jetbrains.jetbrains",
        "description": "apps.jetbrains.jetbrains",
        "peekOfCode": "def send_idea_command(cmd):\n    print(f\"Sending {cmd}\")\n    active_app = ui.active_app()\n    bundle = active_app.bundle or active_app.name\n    port = port_mapping.get(bundle, None)\n    nonce = _get_nonce(port, \".vcidea_\") or _get_nonce(port, \"vcidea_\")\n    proxies = {\"http\": None, \"https\": None}\n    print(f\"sending {bundle} {port} {nonce}\")\n    if port and nonce:\n        response = requests.get(",
        "detail": "apps.jetbrains.jetbrains",
        "documentation": {}
    },
    {
        "label": "get_idea_location",
        "kind": 2,
        "importPath": "apps.jetbrains.jetbrains",
        "description": "apps.jetbrains.jetbrains",
        "peekOfCode": "def get_idea_location():\n    return send_idea_command(\"location\").split()\ndef idea_commands(commands):\n    command_list = commands.split(\",\")\n    print(\"executing jetbrains\", commands)\n    global extendCommands\n    extendCommands = command_list\n    for cmd in command_list:\n        if cmd:\n            send_idea_command(cmd.strip())",
        "detail": "apps.jetbrains.jetbrains",
        "documentation": {}
    },
    {
        "label": "idea_commands",
        "kind": 2,
        "importPath": "apps.jetbrains.jetbrains",
        "description": "apps.jetbrains.jetbrains",
        "peekOfCode": "def idea_commands(commands):\n    command_list = commands.split(\",\")\n    print(\"executing jetbrains\", commands)\n    global extendCommands\n    extendCommands = command_list\n    for cmd in command_list:\n        if cmd:\n            send_idea_command(cmd.strip())\n            time.sleep(0.1)\nctx = Context()",
        "detail": "apps.jetbrains.jetbrains",
        "documentation": {}
    },
    {
        "label": "extendCommands",
        "kind": 5,
        "importPath": "apps.jetbrains.jetbrains",
        "description": "apps.jetbrains.jetbrains",
        "peekOfCode": "extendCommands = []\n# Each IDE gets its own port, as otherwise you wouldn't be able\n# to run two at the same time and switch between them.\n# Note that MPS and IntelliJ ultimate will conflict...\nport_mapping = {\n    \"com.google.android.studio\": 8652,\n    \"com.jetbrains.AppCode\": 8655,\n    \"com.jetbrains.CLion\": 8657,\n    \"com.jetbrains.datagrip\": 8664,\n    \"com.jetbrains.goland-EAP\": 8659,",
        "detail": "apps.jetbrains.jetbrains",
        "documentation": {}
    },
    {
        "label": "port_mapping",
        "kind": 5,
        "importPath": "apps.jetbrains.jetbrains",
        "description": "apps.jetbrains.jetbrains",
        "peekOfCode": "port_mapping = {\n    \"com.google.android.studio\": 8652,\n    \"com.jetbrains.AppCode\": 8655,\n    \"com.jetbrains.CLion\": 8657,\n    \"com.jetbrains.datagrip\": 8664,\n    \"com.jetbrains.goland-EAP\": 8659,\n    \"com.jetbrains.goland\": 8659,\n    \"com.jetbrains.intellij-EAP\": 8653,\n    \"com.jetbrains.intellij.ce\": 8654,\n    \"com.jetbrains.intellij\": 8653,",
        "detail": "apps.jetbrains.jetbrains",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.jetbrains.jetbrains",
        "description": "apps.jetbrains.jetbrains",
        "peekOfCode": "ctx = Context()\nmod = Module()\nmod.apps.jetbrains = \"app.name: /jetbrains/\"\nmod.apps.jetbrains = \"app.name: CLion\"\nmod.apps.jetbrains = \"app.name: IntelliJ IDEA\"\nmod.apps.jetbrains = \"app.name: PyCharm\"\nmod.apps.jetbrains = \"app.name: WebStorm\"\nmod.apps.jetbrains = \"app.name: RubyMine\"\nmod.apps.jetbrains = \"app.name: RubyMine-EAP\"\nmod.apps.jetbrains = \"app.name: DataGrip\"",
        "detail": "apps.jetbrains.jetbrains",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "apps.jetbrains.jetbrains",
        "description": "apps.jetbrains.jetbrains",
        "peekOfCode": "mod = Module()\nmod.apps.jetbrains = \"app.name: /jetbrains/\"\nmod.apps.jetbrains = \"app.name: CLion\"\nmod.apps.jetbrains = \"app.name: IntelliJ IDEA\"\nmod.apps.jetbrains = \"app.name: PyCharm\"\nmod.apps.jetbrains = \"app.name: WebStorm\"\nmod.apps.jetbrains = \"app.name: RubyMine\"\nmod.apps.jetbrains = \"app.name: RubyMine-EAP\"\nmod.apps.jetbrains = \"app.name: DataGrip\"\nmod.apps.jetbrains = \"\"\"",
        "detail": "apps.jetbrains.jetbrains",
        "documentation": {}
    },
    {
        "label": "mod.apps.jetbrains",
        "kind": 5,
        "importPath": "apps.jetbrains.jetbrains",
        "description": "apps.jetbrains.jetbrains",
        "peekOfCode": "mod.apps.jetbrains = \"app.name: /jetbrains/\"\nmod.apps.jetbrains = \"app.name: CLion\"\nmod.apps.jetbrains = \"app.name: IntelliJ IDEA\"\nmod.apps.jetbrains = \"app.name: PyCharm\"\nmod.apps.jetbrains = \"app.name: WebStorm\"\nmod.apps.jetbrains = \"app.name: RubyMine\"\nmod.apps.jetbrains = \"app.name: RubyMine-EAP\"\nmod.apps.jetbrains = \"app.name: DataGrip\"\nmod.apps.jetbrains = \"\"\"\nos: mac",
        "detail": "apps.jetbrains.jetbrains",
        "documentation": {}
    },
    {
        "label": "mod.apps.jetbrains",
        "kind": 5,
        "importPath": "apps.jetbrains.jetbrains",
        "description": "apps.jetbrains.jetbrains",
        "peekOfCode": "mod.apps.jetbrains = \"app.name: CLion\"\nmod.apps.jetbrains = \"app.name: IntelliJ IDEA\"\nmod.apps.jetbrains = \"app.name: PyCharm\"\nmod.apps.jetbrains = \"app.name: WebStorm\"\nmod.apps.jetbrains = \"app.name: RubyMine\"\nmod.apps.jetbrains = \"app.name: RubyMine-EAP\"\nmod.apps.jetbrains = \"app.name: DataGrip\"\nmod.apps.jetbrains = \"\"\"\nos: mac\nand app.bundle: com.google.android.studio",
        "detail": "apps.jetbrains.jetbrains",
        "documentation": {}
    },
    {
        "label": "mod.apps.jetbrains",
        "kind": 5,
        "importPath": "apps.jetbrains.jetbrains",
        "description": "apps.jetbrains.jetbrains",
        "peekOfCode": "mod.apps.jetbrains = \"app.name: IntelliJ IDEA\"\nmod.apps.jetbrains = \"app.name: PyCharm\"\nmod.apps.jetbrains = \"app.name: WebStorm\"\nmod.apps.jetbrains = \"app.name: RubyMine\"\nmod.apps.jetbrains = \"app.name: RubyMine-EAP\"\nmod.apps.jetbrains = \"app.name: DataGrip\"\nmod.apps.jetbrains = \"\"\"\nos: mac\nand app.bundle: com.google.android.studio\n\"\"\"",
        "detail": "apps.jetbrains.jetbrains",
        "documentation": {}
    },
    {
        "label": "mod.apps.jetbrains",
        "kind": 5,
        "importPath": "apps.jetbrains.jetbrains",
        "description": "apps.jetbrains.jetbrains",
        "peekOfCode": "mod.apps.jetbrains = \"app.name: PyCharm\"\nmod.apps.jetbrains = \"app.name: WebStorm\"\nmod.apps.jetbrains = \"app.name: RubyMine\"\nmod.apps.jetbrains = \"app.name: RubyMine-EAP\"\nmod.apps.jetbrains = \"app.name: DataGrip\"\nmod.apps.jetbrains = \"\"\"\nos: mac\nand app.bundle: com.google.android.studio\n\"\"\"\n# windows",
        "detail": "apps.jetbrains.jetbrains",
        "documentation": {}
    },
    {
        "label": "mod.apps.jetbrains",
        "kind": 5,
        "importPath": "apps.jetbrains.jetbrains",
        "description": "apps.jetbrains.jetbrains",
        "peekOfCode": "mod.apps.jetbrains = \"app.name: WebStorm\"\nmod.apps.jetbrains = \"app.name: RubyMine\"\nmod.apps.jetbrains = \"app.name: RubyMine-EAP\"\nmod.apps.jetbrains = \"app.name: DataGrip\"\nmod.apps.jetbrains = \"\"\"\nos: mac\nand app.bundle: com.google.android.studio\n\"\"\"\n# windows\nmod.apps.jetbrains = \"app.exe: idea64.exe\"",
        "detail": "apps.jetbrains.jetbrains",
        "documentation": {}
    },
    {
        "label": "mod.apps.jetbrains",
        "kind": 5,
        "importPath": "apps.jetbrains.jetbrains",
        "description": "apps.jetbrains.jetbrains",
        "peekOfCode": "mod.apps.jetbrains = \"app.name: RubyMine\"\nmod.apps.jetbrains = \"app.name: RubyMine-EAP\"\nmod.apps.jetbrains = \"app.name: DataGrip\"\nmod.apps.jetbrains = \"\"\"\nos: mac\nand app.bundle: com.google.android.studio\n\"\"\"\n# windows\nmod.apps.jetbrains = \"app.exe: idea64.exe\"\nmod.apps.jetbrains = \"app.exe: PyCharm64.exe\"",
        "detail": "apps.jetbrains.jetbrains",
        "documentation": {}
    },
    {
        "label": "mod.apps.jetbrains",
        "kind": 5,
        "importPath": "apps.jetbrains.jetbrains",
        "description": "apps.jetbrains.jetbrains",
        "peekOfCode": "mod.apps.jetbrains = \"app.name: RubyMine-EAP\"\nmod.apps.jetbrains = \"app.name: DataGrip\"\nmod.apps.jetbrains = \"\"\"\nos: mac\nand app.bundle: com.google.android.studio\n\"\"\"\n# windows\nmod.apps.jetbrains = \"app.exe: idea64.exe\"\nmod.apps.jetbrains = \"app.exe: PyCharm64.exe\"\nmod.apps.jetbrains = \"app.exe: pycharm64.exe\"",
        "detail": "apps.jetbrains.jetbrains",
        "documentation": {}
    },
    {
        "label": "mod.apps.jetbrains",
        "kind": 5,
        "importPath": "apps.jetbrains.jetbrains",
        "description": "apps.jetbrains.jetbrains",
        "peekOfCode": "mod.apps.jetbrains = \"app.name: DataGrip\"\nmod.apps.jetbrains = \"\"\"\nos: mac\nand app.bundle: com.google.android.studio\n\"\"\"\n# windows\nmod.apps.jetbrains = \"app.exe: idea64.exe\"\nmod.apps.jetbrains = \"app.exe: PyCharm64.exe\"\nmod.apps.jetbrains = \"app.exe: pycharm64.exe\"\nmod.apps.jetbrains = \"app.exe: webstorm64.exe\"",
        "detail": "apps.jetbrains.jetbrains",
        "documentation": {}
    },
    {
        "label": "mod.apps.jetbrains",
        "kind": 5,
        "importPath": "apps.jetbrains.jetbrains",
        "description": "apps.jetbrains.jetbrains",
        "peekOfCode": "mod.apps.jetbrains = \"\"\"\nos: mac\nand app.bundle: com.google.android.studio\n\"\"\"\n# windows\nmod.apps.jetbrains = \"app.exe: idea64.exe\"\nmod.apps.jetbrains = \"app.exe: PyCharm64.exe\"\nmod.apps.jetbrains = \"app.exe: pycharm64.exe\"\nmod.apps.jetbrains = \"app.exe: webstorm64.exe\"\nmod.apps.jetbrains = \"\"\"",
        "detail": "apps.jetbrains.jetbrains",
        "documentation": {}
    },
    {
        "label": "mod.apps.jetbrains",
        "kind": 5,
        "importPath": "apps.jetbrains.jetbrains",
        "description": "apps.jetbrains.jetbrains",
        "peekOfCode": "mod.apps.jetbrains = \"app.exe: idea64.exe\"\nmod.apps.jetbrains = \"app.exe: PyCharm64.exe\"\nmod.apps.jetbrains = \"app.exe: pycharm64.exe\"\nmod.apps.jetbrains = \"app.exe: webstorm64.exe\"\nmod.apps.jetbrains = \"\"\"\nos: mac\nand app.bundle: com.jetbrains.pycharm\n\"\"\"\nmod.apps.jetbrains = \"\"\"\nos: windows",
        "detail": "apps.jetbrains.jetbrains",
        "documentation": {}
    },
    {
        "label": "mod.apps.jetbrains",
        "kind": 5,
        "importPath": "apps.jetbrains.jetbrains",
        "description": "apps.jetbrains.jetbrains",
        "peekOfCode": "mod.apps.jetbrains = \"app.exe: PyCharm64.exe\"\nmod.apps.jetbrains = \"app.exe: pycharm64.exe\"\nmod.apps.jetbrains = \"app.exe: webstorm64.exe\"\nmod.apps.jetbrains = \"\"\"\nos: mac\nand app.bundle: com.jetbrains.pycharm\n\"\"\"\nmod.apps.jetbrains = \"\"\"\nos: windows\nand app.name: JetBrains Rider",
        "detail": "apps.jetbrains.jetbrains",
        "documentation": {}
    },
    {
        "label": "mod.apps.jetbrains",
        "kind": 5,
        "importPath": "apps.jetbrains.jetbrains",
        "description": "apps.jetbrains.jetbrains",
        "peekOfCode": "mod.apps.jetbrains = \"app.exe: pycharm64.exe\"\nmod.apps.jetbrains = \"app.exe: webstorm64.exe\"\nmod.apps.jetbrains = \"\"\"\nos: mac\nand app.bundle: com.jetbrains.pycharm\n\"\"\"\nmod.apps.jetbrains = \"\"\"\nos: windows\nand app.name: JetBrains Rider\nos: windows",
        "detail": "apps.jetbrains.jetbrains",
        "documentation": {}
    },
    {
        "label": "mod.apps.jetbrains",
        "kind": 5,
        "importPath": "apps.jetbrains.jetbrains",
        "description": "apps.jetbrains.jetbrains",
        "peekOfCode": "mod.apps.jetbrains = \"app.exe: webstorm64.exe\"\nmod.apps.jetbrains = \"\"\"\nos: mac\nand app.bundle: com.jetbrains.pycharm\n\"\"\"\nmod.apps.jetbrains = \"\"\"\nos: windows\nand app.name: JetBrains Rider\nos: windows\nand app.exe: rider64.exe",
        "detail": "apps.jetbrains.jetbrains",
        "documentation": {}
    },
    {
        "label": "mod.apps.jetbrains",
        "kind": 5,
        "importPath": "apps.jetbrains.jetbrains",
        "description": "apps.jetbrains.jetbrains",
        "peekOfCode": "mod.apps.jetbrains = \"\"\"\nos: mac\nand app.bundle: com.jetbrains.pycharm\n\"\"\"\nmod.apps.jetbrains = \"\"\"\nos: windows\nand app.name: JetBrains Rider\nos: windows\nand app.exe: rider64.exe\n\"\"\"",
        "detail": "apps.jetbrains.jetbrains",
        "documentation": {}
    },
    {
        "label": "mod.apps.jetbrains",
        "kind": 5,
        "importPath": "apps.jetbrains.jetbrains",
        "description": "apps.jetbrains.jetbrains",
        "peekOfCode": "mod.apps.jetbrains = \"\"\"\nos: windows\nand app.name: JetBrains Rider\nos: windows\nand app.exe: rider64.exe\n\"\"\"\n@mod.action_class\nclass Actions:\n    def idea(commands: str):\n        \"\"\"Send a command to Jetbrains product\"\"\"",
        "detail": "apps.jetbrains.jetbrains",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "apps.jetbrains.jetbrains",
        "description": "apps.jetbrains.jetbrains",
        "peekOfCode": "ctx.matches = r\"\"\"\napp: jetbrains\n\"\"\"\n@ctx.action_class(\"app\")\nclass AppActions:\n    def tab_next():\n        actions.user.idea(\"action NextTab\")\n    def tab_previous():\n        actions.user.idea(\"action PreviousTab\")\n    def tab_close():",
        "detail": "apps.jetbrains.jetbrains",
        "documentation": {}
    },
    {
        "label": "user_actions",
        "kind": 6,
        "importPath": "apps.kde_konsole.kde_konsole",
        "description": "apps.kde_konsole.kde_konsole",
        "peekOfCode": "class user_actions:\n    # tabs-tag functions implementations\n    def tab_jump(number):\n        actions.key(f\"alt-{number}\")\n    # tab_final is not supported by konsole by default\n    # but short cut can be configured\n@ctx.action_class(\"app\")\nclass app_actions:\n    # tabs-tag functions implementations\n    def tab_open():",
        "detail": "apps.kde_konsole.kde_konsole",
        "documentation": {}
    },
    {
        "label": "app_actions",
        "kind": 6,
        "importPath": "apps.kde_konsole.kde_konsole",
        "description": "apps.kde_konsole.kde_konsole",
        "peekOfCode": "class app_actions:\n    # tabs-tag functions implementations\n    def tab_open():\n        actions.key(\"ctrl-shift-t\")\n    def tab_previous():\n        actions.key(\"shift-left\")\n    def tab_next():\n        actions.key(\"shift-right\")\n    def tab_close():\n        actions.key(\"ctrl-shift-w\")",
        "detail": "apps.kde_konsole.kde_konsole",
        "documentation": {}
    },
    {
        "label": "EditActions",
        "kind": 6,
        "importPath": "apps.kde_konsole.kde_konsole",
        "description": "apps.kde_konsole.kde_konsole",
        "peekOfCode": "class EditActions:\n    def page_down():\n        actions.key(\"shift-pagedown\")\n    def page_up():\n        actions.key(\"shift-pageup\")\n    def paste():\n        actions.key(\"ctrl-shift-v\")\n    def copy():\n        actions.key(\"ctrl-shift-c\")\n    def find(text: str):",
        "detail": "apps.kde_konsole.kde_konsole",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.kde_konsole.kde_konsole",
        "description": "apps.kde_konsole.kde_konsole",
        "peekOfCode": "ctx = Context()\nctx.matches = r\"\"\"\napp.name: konsole\n\"\"\"\n@ctx.action_class(\"user\")\nclass user_actions:\n    # tabs-tag functions implementations\n    def tab_jump(number):\n        actions.key(f\"alt-{number}\")\n    # tab_final is not supported by konsole by default",
        "detail": "apps.kde_konsole.kde_konsole",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "apps.kde_konsole.kde_konsole",
        "description": "apps.kde_konsole.kde_konsole",
        "peekOfCode": "ctx.matches = r\"\"\"\napp.name: konsole\n\"\"\"\n@ctx.action_class(\"user\")\nclass user_actions:\n    # tabs-tag functions implementations\n    def tab_jump(number):\n        actions.key(f\"alt-{number}\")\n    # tab_final is not supported by konsole by default\n    # but short cut can be configured",
        "detail": "apps.kde_konsole.kde_konsole",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "apps.kindle.kindle",
        "description": "apps.kindle.kindle",
        "peekOfCode": "mod = Module()\nmod.apps.kindle = \"\"\"\nos: windows\nand app.name: Kindle\nos: windows\nand app.exe: Kindle.exe\n\"\"\"\n# TODO: mac context and implementation",
        "detail": "apps.kindle.kindle",
        "documentation": {}
    },
    {
        "label": "mod.apps.kindle",
        "kind": 5,
        "importPath": "apps.kindle.kindle",
        "description": "apps.kindle.kindle",
        "peekOfCode": "mod.apps.kindle = \"\"\"\nos: windows\nand app.name: Kindle\nos: windows\nand app.exe: Kindle.exe\n\"\"\"\n# TODO: mac context and implementation",
        "detail": "apps.kindle.kindle",
        "documentation": {}
    },
    {
        "label": "UserActions",
        "kind": 6,
        "importPath": "apps.kindle.kindle_win",
        "description": "apps.kindle.kindle_win",
        "peekOfCode": "class UserActions:\n    # user.pages\n    def page_next():\n        actions.key(\"down\")\n    def page_previous():\n        actions.key(\"up\")\n    def page_jump(number: int):\n        actions.key(\"ctrl-g\")\n        actions.insert(str(number))\n        actions.key(\"enter\")",
        "detail": "apps.kindle.kindle_win",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.kindle.kindle_win",
        "description": "apps.kindle.kindle_win",
        "peekOfCode": "ctx = Context()\nctx.matches = \"\"\"\nos: windows\napp: kindle\n\"\"\"\n# --- Implement actions ---\n@ctx.action_class(\"user\")\nclass UserActions:\n    # user.pages\n    def page_next():",
        "detail": "apps.kindle.kindle_win",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "apps.kindle.kindle_win",
        "description": "apps.kindle.kindle_win",
        "peekOfCode": "ctx.matches = \"\"\"\nos: windows\napp: kindle\n\"\"\"\n# --- Implement actions ---\n@ctx.action_class(\"user\")\nclass UserActions:\n    # user.pages\n    def page_next():\n        actions.key(\"down\")",
        "detail": "apps.kindle.kindle_win",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "apps.kubectl.kubectl",
        "description": "apps.kubectl.kubectl",
        "peekOfCode": "mod = Module()\nmod.tag(\"kubectl\", desc=\"tag for enabling kubectl commands in your terminal\")\nkubectl = \"kubectl\"\nctx = Context()\nctx.matches = r\"\"\"\ntag: user.kubectl\n\"\"\"\nmod.list(\"kubectl_action\", desc=\"actions performed by kubectl\")\nctx.lists[\"self.kubectl_action\"] = (\"get\", \"delete\", \"describe\", \"label\")\nmod.list(\"kubectl_object\", desc=\"objects performed by kubectl\")",
        "detail": "apps.kubectl.kubectl",
        "documentation": {}
    },
    {
        "label": "kubectl",
        "kind": 5,
        "importPath": "apps.kubectl.kubectl",
        "description": "apps.kubectl.kubectl",
        "peekOfCode": "kubectl = \"kubectl\"\nctx = Context()\nctx.matches = r\"\"\"\ntag: user.kubectl\n\"\"\"\nmod.list(\"kubectl_action\", desc=\"actions performed by kubectl\")\nctx.lists[\"self.kubectl_action\"] = (\"get\", \"delete\", \"describe\", \"label\")\nmod.list(\"kubectl_object\", desc=\"objects performed by kubectl\")\nctx.lists[\"self.kubectl_object\"] = (\n    \"nodes\",",
        "detail": "apps.kubectl.kubectl",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.kubectl.kubectl",
        "description": "apps.kubectl.kubectl",
        "peekOfCode": "ctx = Context()\nctx.matches = r\"\"\"\ntag: user.kubectl\n\"\"\"\nmod.list(\"kubectl_action\", desc=\"actions performed by kubectl\")\nctx.lists[\"self.kubectl_action\"] = (\"get\", \"delete\", \"describe\", \"label\")\nmod.list(\"kubectl_object\", desc=\"objects performed by kubectl\")\nctx.lists[\"self.kubectl_object\"] = (\n    \"nodes\",\n    \"jobs\",",
        "detail": "apps.kubectl.kubectl",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "apps.kubectl.kubectl",
        "description": "apps.kubectl.kubectl",
        "peekOfCode": "ctx.matches = r\"\"\"\ntag: user.kubectl\n\"\"\"\nmod.list(\"kubectl_action\", desc=\"actions performed by kubectl\")\nctx.lists[\"self.kubectl_action\"] = (\"get\", \"delete\", \"describe\", \"label\")\nmod.list(\"kubectl_object\", desc=\"objects performed by kubectl\")\nctx.lists[\"self.kubectl_object\"] = (\n    \"nodes\",\n    \"jobs\",\n    \"pods\",",
        "detail": "apps.kubectl.kubectl",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"self.kubectl_action\"]",
        "kind": 5,
        "importPath": "apps.kubectl.kubectl",
        "description": "apps.kubectl.kubectl",
        "peekOfCode": "ctx.lists[\"self.kubectl_action\"] = (\"get\", \"delete\", \"describe\", \"label\")\nmod.list(\"kubectl_object\", desc=\"objects performed by kubectl\")\nctx.lists[\"self.kubectl_object\"] = (\n    \"nodes\",\n    \"jobs\",\n    \"pods\",\n    \"namespaces\",\n    \"services\",\n    \"events\",\n    \"deployments\",",
        "detail": "apps.kubectl.kubectl",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"self.kubectl_object\"]",
        "kind": 5,
        "importPath": "apps.kubectl.kubectl",
        "description": "apps.kubectl.kubectl",
        "peekOfCode": "ctx.lists[\"self.kubectl_object\"] = (\n    \"nodes\",\n    \"jobs\",\n    \"pods\",\n    \"namespaces\",\n    \"services\",\n    \"events\",\n    \"deployments\",\n    \"replicasets\",\n    \"daemonsets\",",
        "detail": "apps.kubectl.kubectl",
        "documentation": {}
    },
    {
        "label": "EditActions",
        "kind": 6,
        "importPath": "apps.mintty.mintty_win",
        "description": "apps.mintty.mintty_win",
        "peekOfCode": "class EditActions:\n    def paste():\n        actions.key(\"shift-insert\")\n    def copy():\n        actions.key(\"ctrl-insert\")\n    def delete_line():\n        actions.key(\"ctrl-u\")\n@ctx.action_class(\"user\")\nclass UserActions:\n    def file_manager_open_parent():",
        "detail": "apps.mintty.mintty_win",
        "documentation": {}
    },
    {
        "label": "UserActions",
        "kind": 6,
        "importPath": "apps.mintty.mintty_win",
        "description": "apps.mintty.mintty_win",
        "peekOfCode": "class UserActions:\n    def file_manager_open_parent():\n        actions.insert(\"cd ..\")\n        actions.key(\"enter\")\n    def file_manager_current_path():\n        path = ui.active_window().title\n        path = get_win_path(path)\n        if path in directories_to_remap:\n            path = directories_to_remap[title]\n        if path in directories_to_exclude:",
        "detail": "apps.mintty.mintty_win",
        "documentation": {}
    },
    {
        "label": "get_win_path",
        "kind": 2,
        "importPath": "apps.mintty.mintty_win",
        "description": "apps.mintty.mintty_win",
        "peekOfCode": "def get_win_path(cyg_path):\n    path = \"\"\n    try:\n        path = (\n            subprocess.check_output([setting_cyg_path.get(), \"-w\", cyg_path])\n            .strip(b\"\\n\")\n            .decode()\n        )\n    except:\n        path = \"\"",
        "detail": "apps.mintty.mintty_win",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "apps.mintty.mintty_win",
        "description": "apps.mintty.mintty_win",
        "peekOfCode": "mod = Module()\nmod.apps.mintty = \"\"\"\nos: windows\nand app.name: Terminal\nos: windows\nand app.name: mintty.exe\n\"\"\"\nctx = Context()\nctx.matches = r\"\"\"\napp: mintty",
        "detail": "apps.mintty.mintty_win",
        "documentation": {}
    },
    {
        "label": "mod.apps.mintty",
        "kind": 5,
        "importPath": "apps.mintty.mintty_win",
        "description": "apps.mintty.mintty_win",
        "peekOfCode": "mod.apps.mintty = \"\"\"\nos: windows\nand app.name: Terminal\nos: windows\nand app.name: mintty.exe\n\"\"\"\nctx = Context()\nctx.matches = r\"\"\"\napp: mintty\n\"\"\"",
        "detail": "apps.mintty.mintty_win",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.mintty.mintty_win",
        "description": "apps.mintty.mintty_win",
        "peekOfCode": "ctx = Context()\nctx.matches = r\"\"\"\napp: mintty\n\"\"\"\nctx.tags = [\n    \"terminal\",\n    \"user.generic_unix_shell\",\n    \"user.file_manager\",\n    \"user.git\",\n    \"user.kubectl\",",
        "detail": "apps.mintty.mintty_win",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "apps.mintty.mintty_win",
        "description": "apps.mintty.mintty_win",
        "peekOfCode": "ctx.matches = r\"\"\"\napp: mintty\n\"\"\"\nctx.tags = [\n    \"terminal\",\n    \"user.generic_unix_shell\",\n    \"user.file_manager\",\n    \"user.git\",\n    \"user.kubectl\",\n]",
        "detail": "apps.mintty.mintty_win",
        "documentation": {}
    },
    {
        "label": "ctx.tags",
        "kind": 5,
        "importPath": "apps.mintty.mintty_win",
        "description": "apps.mintty.mintty_win",
        "peekOfCode": "ctx.tags = [\n    \"terminal\",\n    \"user.generic_unix_shell\",\n    \"user.file_manager\",\n    \"user.git\",\n    \"user.kubectl\",\n]\ndirectories_to_remap = {}\ndirectories_to_exclude = {}\nsetting_cyg_path = mod.setting(",
        "detail": "apps.mintty.mintty_win",
        "documentation": {}
    },
    {
        "label": "directories_to_remap",
        "kind": 5,
        "importPath": "apps.mintty.mintty_win",
        "description": "apps.mintty.mintty_win",
        "peekOfCode": "directories_to_remap = {}\ndirectories_to_exclude = {}\nsetting_cyg_path = mod.setting(\n    \"cygpath\",\n    type=str,\n    default=\"C:\\\\cygwin64\\\\bin\\\\cygpath.exe\",\n    desc=\"Path to  cygpath.exe\",\n)\ndef get_win_path(cyg_path):\n    path = \"\"",
        "detail": "apps.mintty.mintty_win",
        "documentation": {}
    },
    {
        "label": "directories_to_exclude",
        "kind": 5,
        "importPath": "apps.mintty.mintty_win",
        "description": "apps.mintty.mintty_win",
        "peekOfCode": "directories_to_exclude = {}\nsetting_cyg_path = mod.setting(\n    \"cygpath\",\n    type=str,\n    default=\"C:\\\\cygwin64\\\\bin\\\\cygpath.exe\",\n    desc=\"Path to  cygpath.exe\",\n)\ndef get_win_path(cyg_path):\n    path = \"\"\n    try:",
        "detail": "apps.mintty.mintty_win",
        "documentation": {}
    },
    {
        "label": "setting_cyg_path",
        "kind": 5,
        "importPath": "apps.mintty.mintty_win",
        "description": "apps.mintty.mintty_win",
        "peekOfCode": "setting_cyg_path = mod.setting(\n    \"cygpath\",\n    type=str,\n    default=\"C:\\\\cygwin64\\\\bin\\\\cygpath.exe\",\n    desc=\"Path to  cygpath.exe\",\n)\ndef get_win_path(cyg_path):\n    path = \"\"\n    try:\n        path = (",
        "detail": "apps.mintty.mintty_win",
        "documentation": {}
    },
    {
        "label": "AppActions",
        "kind": 6,
        "importPath": "apps.nautilus.nautilus",
        "description": "apps.nautilus.nautilus",
        "peekOfCode": "class AppActions:\n    # app.tabs\n    def tab_next():\n        actions.key(\"ctrl-pagedown\")\n    def tab_previous():\n        actions.key(\"ctrl-pageup\")\n@ctx.action_class(\"user\")\nclass UserActions:\n    # user.tabs\n    def tab_jump(number: int):",
        "detail": "apps.nautilus.nautilus",
        "documentation": {}
    },
    {
        "label": "UserActions",
        "kind": 6,
        "importPath": "apps.nautilus.nautilus",
        "description": "apps.nautilus.nautilus",
        "peekOfCode": "class UserActions:\n    # user.tabs\n    def tab_jump(number: int):\n        actions.key(f\"alt-{number}\")\n    # user.file_manager\n    def file_manager_go_back():\n        actions.key(\"alt-left\")\n    def file_manager_go_forward():\n        actions.key(\"alt-right\")\n    def file_manager_open_parent():",
        "detail": "apps.nautilus.nautilus",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "apps.nautilus.nautilus",
        "description": "apps.nautilus.nautilus",
        "peekOfCode": "mod = Module()\nmod.apps.nautilus = \"\"\"\nos: linux\nand app.exe: nautilus\nos: linux\nand app.name: Org.gnome.Nautilus\n\"\"\"\n# Context matching\nctx = Context()\nctx.matches = r\"\"\"",
        "detail": "apps.nautilus.nautilus",
        "documentation": {}
    },
    {
        "label": "mod.apps.nautilus",
        "kind": 5,
        "importPath": "apps.nautilus.nautilus",
        "description": "apps.nautilus.nautilus",
        "peekOfCode": "mod.apps.nautilus = \"\"\"\nos: linux\nand app.exe: nautilus\nos: linux\nand app.name: Org.gnome.Nautilus\n\"\"\"\n# Context matching\nctx = Context()\nctx.matches = r\"\"\"\napp: nautilus",
        "detail": "apps.nautilus.nautilus",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.nautilus.nautilus",
        "description": "apps.nautilus.nautilus",
        "peekOfCode": "ctx = Context()\nctx.matches = r\"\"\"\napp: nautilus\n\"\"\"\n# --- Implement actions ---\n@ctx.action_class(\"app\")\nclass AppActions:\n    # app.tabs\n    def tab_next():\n        actions.key(\"ctrl-pagedown\")",
        "detail": "apps.nautilus.nautilus",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "apps.nautilus.nautilus",
        "description": "apps.nautilus.nautilus",
        "peekOfCode": "ctx.matches = r\"\"\"\napp: nautilus\n\"\"\"\n# --- Implement actions ---\n@ctx.action_class(\"app\")\nclass AppActions:\n    # app.tabs\n    def tab_next():\n        actions.key(\"ctrl-pagedown\")\n    def tab_previous():",
        "detail": "apps.nautilus.nautilus",
        "documentation": {}
    },
    {
        "label": "app_actions",
        "kind": 6,
        "importPath": "apps.nitro_reader.nitro_reader_5",
        "description": "apps.nitro_reader.nitro_reader_5",
        "peekOfCode": "class app_actions:\n    # app.tabs\n    def tab_open():\n        actions.key(\"ctrl-shift-o\")\n@ctx.action_class(\"user\")\nclass UserActions:\n    # user.pages\n    def page_next():\n        actions.key(\"right\")\n    def page_previous():",
        "detail": "apps.nitro_reader.nitro_reader_5",
        "documentation": {}
    },
    {
        "label": "UserActions",
        "kind": 6,
        "importPath": "apps.nitro_reader.nitro_reader_5",
        "description": "apps.nitro_reader.nitro_reader_5",
        "peekOfCode": "class UserActions:\n    # user.pages\n    def page_next():\n        actions.key(\"right\")\n    def page_previous():\n        actions.key(\"left\")\n    def page_jump(number: int):\n        actions.key(\"ctrl-g\")\n        actions.edit.select_line()\n        actions.insert(str(number))",
        "detail": "apps.nitro_reader.nitro_reader_5",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "apps.nitro_reader.nitro_reader_5",
        "description": "apps.nitro_reader.nitro_reader_5",
        "peekOfCode": "mod = Module()\nmod.apps.nitro_reader_five = \"\"\"\nos: windows\nand app.name: Nitro Reader 5\nos: windows\nand app.exe: NitroPDFReader.exe\n\"\"\"\n# Context matching\nctx = Context()\nctx.matches = \"\"\"",
        "detail": "apps.nitro_reader.nitro_reader_5",
        "documentation": {}
    },
    {
        "label": "mod.apps.nitro_reader_five",
        "kind": 5,
        "importPath": "apps.nitro_reader.nitro_reader_5",
        "description": "apps.nitro_reader.nitro_reader_5",
        "peekOfCode": "mod.apps.nitro_reader_five = \"\"\"\nos: windows\nand app.name: Nitro Reader 5\nos: windows\nand app.exe: NitroPDFReader.exe\n\"\"\"\n# Context matching\nctx = Context()\nctx.matches = \"\"\"\napp: nitro_reader_five",
        "detail": "apps.nitro_reader.nitro_reader_5",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.nitro_reader.nitro_reader_5",
        "description": "apps.nitro_reader.nitro_reader_5",
        "peekOfCode": "ctx = Context()\nctx.matches = \"\"\"\napp: nitro_reader_five\n\"\"\"\n# --- Implement actions ---\n@ctx.action_class(\"app\")\nclass app_actions:\n    # app.tabs\n    def tab_open():\n        actions.key(\"ctrl-shift-o\")",
        "detail": "apps.nitro_reader.nitro_reader_5",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "apps.nitro_reader.nitro_reader_5",
        "description": "apps.nitro_reader.nitro_reader_5",
        "peekOfCode": "ctx.matches = \"\"\"\napp: nitro_reader_five\n\"\"\"\n# --- Implement actions ---\n@ctx.action_class(\"app\")\nclass app_actions:\n    # app.tabs\n    def tab_open():\n        actions.key(\"ctrl-shift-o\")\n@ctx.action_class(\"user\")",
        "detail": "apps.nitro_reader.nitro_reader_5",
        "documentation": {}
    },
    {
        "label": "AppActions",
        "kind": 6,
        "importPath": "apps.notepad++.notepad++_win",
        "description": "apps.notepad++.notepad++_win",
        "peekOfCode": "class AppActions:\n    def tab_previous():\n        actions.key(\"ctrl-pageup\")\n    def tab_next():\n        actions.key(\"ctrl-pagedown\")\n@ctx.action_class(\"code\")\nclass CodeActions:\n    def toggle_comment():\n        actions.key(\"ctrl-q\")\n@ctx.action_class(\"edit\")",
        "detail": "apps.notepad++.notepad++_win",
        "documentation": {}
    },
    {
        "label": "CodeActions",
        "kind": 6,
        "importPath": "apps.notepad++.notepad++_win",
        "description": "apps.notepad++.notepad++_win",
        "peekOfCode": "class CodeActions:\n    def toggle_comment():\n        actions.key(\"ctrl-q\")\n@ctx.action_class(\"edit\")\nclass EditActions:\n    def line_clone():\n        actions.key(\"ctrl-d\")\n    def line_swap_up():\n        actions.key(\"ctrl-shift-up\")\n    def line_swap_down():",
        "detail": "apps.notepad++.notepad++_win",
        "documentation": {}
    },
    {
        "label": "EditActions",
        "kind": 6,
        "importPath": "apps.notepad++.notepad++_win",
        "description": "apps.notepad++.notepad++_win",
        "peekOfCode": "class EditActions:\n    def line_clone():\n        actions.key(\"ctrl-d\")\n    def line_swap_up():\n        actions.key(\"ctrl-shift-up\")\n    def line_swap_down():\n        actions.key(\"ctrl-shift-down\")\n    def indent_more():\n        actions.key(\"tab\")\n    def indent_less():",
        "detail": "apps.notepad++.notepad++_win",
        "documentation": {}
    },
    {
        "label": "win_actions",
        "kind": 6,
        "importPath": "apps.notepad++.notepad++_win",
        "description": "apps.notepad++.notepad++_win",
        "peekOfCode": "class win_actions:\n    def filename():\n        title = actions.win.title()\n        result = title.split(\" - \")[0]\n        if \".\" in result:\n            # print(result.split(\"\\\\\")[-1])\n            return result.split(\"\\\\\")[-1]\n        return \"\"\n@ctx.action_class(\"user\")\nclass UserActions:",
        "detail": "apps.notepad++.notepad++_win",
        "documentation": {}
    },
    {
        "label": "UserActions",
        "kind": 6,
        "importPath": "apps.notepad++.notepad++_win",
        "description": "apps.notepad++.notepad++_win",
        "peekOfCode": "class UserActions:\n    def select_next_occurrence(text: str):\n        actions.edit.find(text)\n        actions.sleep(\"100ms\")\n        actions.key(\"enter esc\")\n        actions.sleep(\"100ms\")\n    def select_previous_occurrence(text: str):\n        actions.edit.find(text)\n        actions.sleep(\"100ms\")\n        actions.key(\"shift-enter esc\")",
        "detail": "apps.notepad++.notepad++_win",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "apps.notepad++.notepad++_win",
        "description": "apps.notepad++.notepad++_win",
        "peekOfCode": "mod = Module()\nctx = Context()\napps = mod.apps\napps.notepad_plus_plus = \"\"\"\nos: windows\nand app.name: Notepad++ : a free (GNU) source code editor\nos: windows\nand app.name: Notepad++ : a free (GPL) source code editor\nos: windows\nand app.exe: notepad++.exe",
        "detail": "apps.notepad++.notepad++_win",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.notepad++.notepad++_win",
        "description": "apps.notepad++.notepad++_win",
        "peekOfCode": "ctx = Context()\napps = mod.apps\napps.notepad_plus_plus = \"\"\"\nos: windows\nand app.name: Notepad++ : a free (GNU) source code editor\nos: windows\nand app.name: Notepad++ : a free (GPL) source code editor\nos: windows\nand app.exe: notepad++.exe\n\"\"\"",
        "detail": "apps.notepad++.notepad++_win",
        "documentation": {}
    },
    {
        "label": "apps",
        "kind": 5,
        "importPath": "apps.notepad++.notepad++_win",
        "description": "apps.notepad++.notepad++_win",
        "peekOfCode": "apps = mod.apps\napps.notepad_plus_plus = \"\"\"\nos: windows\nand app.name: Notepad++ : a free (GNU) source code editor\nos: windows\nand app.name: Notepad++ : a free (GPL) source code editor\nos: windows\nand app.exe: notepad++.exe\n\"\"\"\nctx.matches = r\"\"\"",
        "detail": "apps.notepad++.notepad++_win",
        "documentation": {}
    },
    {
        "label": "apps.notepad_plus_plus",
        "kind": 5,
        "importPath": "apps.notepad++.notepad++_win",
        "description": "apps.notepad++.notepad++_win",
        "peekOfCode": "apps.notepad_plus_plus = \"\"\"\nos: windows\nand app.name: Notepad++ : a free (GNU) source code editor\nos: windows\nand app.name: Notepad++ : a free (GPL) source code editor\nos: windows\nand app.exe: notepad++.exe\n\"\"\"\nctx.matches = r\"\"\"\napp: notepad_plus_plus",
        "detail": "apps.notepad++.notepad++_win",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "apps.notepad++.notepad++_win",
        "description": "apps.notepad++.notepad++_win",
        "peekOfCode": "ctx.matches = r\"\"\"\napp: notepad_plus_plus\n\"\"\"\nctx.tags = [\"user.find_and_replace\", \"user.line_commands\", \"user.tabs\"]\n@ctx.action_class(\"app\")\nclass AppActions:\n    def tab_previous():\n        actions.key(\"ctrl-pageup\")\n    def tab_next():\n        actions.key(\"ctrl-pagedown\")",
        "detail": "apps.notepad++.notepad++_win",
        "documentation": {}
    },
    {
        "label": "ctx.tags",
        "kind": 5,
        "importPath": "apps.notepad++.notepad++_win",
        "description": "apps.notepad++.notepad++_win",
        "peekOfCode": "ctx.tags = [\"user.find_and_replace\", \"user.line_commands\", \"user.tabs\"]\n@ctx.action_class(\"app\")\nclass AppActions:\n    def tab_previous():\n        actions.key(\"ctrl-pageup\")\n    def tab_next():\n        actions.key(\"ctrl-pagedown\")\n@ctx.action_class(\"code\")\nclass CodeActions:\n    def toggle_comment():",
        "detail": "apps.notepad++.notepad++_win",
        "documentation": {}
    },
    {
        "label": "UserActions",
        "kind": 6,
        "importPath": "apps.okular.okular",
        "description": "apps.okular.okular",
        "peekOfCode": "class UserActions:\n    # user.pages\n    def page_current():\n        actions.key(\"ctrl-g\")\n        page = actions.edit.selected_text()\n        actions.key(\"escape\")\n        return int(page)\n    def page_next():\n        actions.key(\"l\")\n    def page_previous():",
        "detail": "apps.okular.okular",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "apps.okular.okular",
        "description": "apps.okular.okular",
        "peekOfCode": "mod = Module()\nmod.apps.okular = \"\"\"\nos: windows\nand app.name: okular.exe\nos: windows\nand app.exe: okular.exe\n\"\"\"\nmod.apps.okular = \"\"\"\nos: linux\nand app.name: okular",
        "detail": "apps.okular.okular",
        "documentation": {}
    },
    {
        "label": "mod.apps.okular",
        "kind": 5,
        "importPath": "apps.okular.okular",
        "description": "apps.okular.okular",
        "peekOfCode": "mod.apps.okular = \"\"\"\nos: windows\nand app.name: okular.exe\nos: windows\nand app.exe: okular.exe\n\"\"\"\nmod.apps.okular = \"\"\"\nos: linux\nand app.name: okular\n\"\"\"",
        "detail": "apps.okular.okular",
        "documentation": {}
    },
    {
        "label": "mod.apps.okular",
        "kind": 5,
        "importPath": "apps.okular.okular",
        "description": "apps.okular.okular",
        "peekOfCode": "mod.apps.okular = \"\"\"\nos: linux\nand app.name: okular\n\"\"\"\n# TODO: mac context and implementation\n# Context matching\nctx = Context()\nctx.matches = \"\"\"\nos: windows\nos: linux",
        "detail": "apps.okular.okular",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.okular.okular",
        "description": "apps.okular.okular",
        "peekOfCode": "ctx = Context()\nctx.matches = \"\"\"\nos: windows\nos: linux\napp: okular\n\"\"\"\n# --- Implement actions ---\n@ctx.action_class(\"user\")\nclass UserActions:\n    # user.pages",
        "detail": "apps.okular.okular",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "apps.okular.okular",
        "description": "apps.okular.okular",
        "peekOfCode": "ctx.matches = \"\"\"\nos: windows\nos: linux\napp: okular\n\"\"\"\n# --- Implement actions ---\n@ctx.action_class(\"user\")\nclass UserActions:\n    # user.pages\n    def page_current():",
        "detail": "apps.okular.okular",
        "documentation": {}
    },
    {
        "label": "EditActions",
        "kind": 6,
        "importPath": "apps.powershell.powershell_win",
        "description": "apps.powershell.powershell_win",
        "peekOfCode": "class EditActions:\n    def delete_line():\n        actions.key(\"esc\")\n@ctx.action_class(\"user\")\nclass UserActions:\n    def file_manager_refresh_title():\n        actions.insert(\n            \"$Host.UI.RawUI.WindowTitle = 'Windows PowerShell: ' +  $(get-location)\"\n        )\n        actions.key(\"enter\")",
        "detail": "apps.powershell.powershell_win",
        "documentation": {}
    },
    {
        "label": "UserActions",
        "kind": 6,
        "importPath": "apps.powershell.powershell_win",
        "description": "apps.powershell.powershell_win",
        "peekOfCode": "class UserActions:\n    def file_manager_refresh_title():\n        actions.insert(\n            \"$Host.UI.RawUI.WindowTitle = 'Windows PowerShell: ' +  $(get-location)\"\n        )\n        actions.key(\"enter\")\n        # action(user.file_manager_go_back):\n        #    key(\"alt-left\")\n        # action(user.file_manager_go_forward):\n        #    key(\"alt-right\")",
        "detail": "apps.powershell.powershell_win",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.powershell.powershell_win",
        "description": "apps.powershell.powershell_win",
        "peekOfCode": "ctx = Context()\nmod = Module()\nctx.matches = r\"\"\"\napp: windows_power_shell\napp: windows_terminal\nand win.title: /PowerShell/\n\"\"\"\ndirectories_to_remap = {}\ndirectories_to_exclude = {}\n@ctx.action_class(\"edit\")",
        "detail": "apps.powershell.powershell_win",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "apps.powershell.powershell_win",
        "description": "apps.powershell.powershell_win",
        "peekOfCode": "mod = Module()\nctx.matches = r\"\"\"\napp: windows_power_shell\napp: windows_terminal\nand win.title: /PowerShell/\n\"\"\"\ndirectories_to_remap = {}\ndirectories_to_exclude = {}\n@ctx.action_class(\"edit\")\nclass EditActions:",
        "detail": "apps.powershell.powershell_win",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "apps.powershell.powershell_win",
        "description": "apps.powershell.powershell_win",
        "peekOfCode": "ctx.matches = r\"\"\"\napp: windows_power_shell\napp: windows_terminal\nand win.title: /PowerShell/\n\"\"\"\ndirectories_to_remap = {}\ndirectories_to_exclude = {}\n@ctx.action_class(\"edit\")\nclass EditActions:\n    def delete_line():",
        "detail": "apps.powershell.powershell_win",
        "documentation": {}
    },
    {
        "label": "directories_to_remap",
        "kind": 5,
        "importPath": "apps.powershell.powershell_win",
        "description": "apps.powershell.powershell_win",
        "peekOfCode": "directories_to_remap = {}\ndirectories_to_exclude = {}\n@ctx.action_class(\"edit\")\nclass EditActions:\n    def delete_line():\n        actions.key(\"esc\")\n@ctx.action_class(\"user\")\nclass UserActions:\n    def file_manager_refresh_title():\n        actions.insert(",
        "detail": "apps.powershell.powershell_win",
        "documentation": {}
    },
    {
        "label": "directories_to_exclude",
        "kind": 5,
        "importPath": "apps.powershell.powershell_win",
        "description": "apps.powershell.powershell_win",
        "peekOfCode": "directories_to_exclude = {}\n@ctx.action_class(\"edit\")\nclass EditActions:\n    def delete_line():\n        actions.key(\"esc\")\n@ctx.action_class(\"user\")\nclass UserActions:\n    def file_manager_refresh_title():\n        actions.insert(\n            \"$Host.UI.RawUI.WindowTitle = 'Windows PowerShell: ' +  $(get-location)\"",
        "detail": "apps.powershell.powershell_win",
        "documentation": {}
    },
    {
        "label": "BrowserActions",
        "kind": 6,
        "importPath": "apps.safari.safari_mac",
        "description": "apps.safari.safari_mac",
        "peekOfCode": "class BrowserActions:\n    def address() -> str:\n        try:\n            window = safari_app().windows()[0]\n        except IndexError:\n            return \"\"\n        try:\n            toolbar = window.children.find_one(AXRole=\"AXToolbar\", max_depth=0)\n            address_field = toolbar.children.find_one(\n                AXRole=\"AXTextField\",",
        "detail": "apps.safari.safari_mac",
        "documentation": {}
    },
    {
        "label": "UserActions",
        "kind": 6,
        "importPath": "apps.safari.safari_mac",
        "description": "apps.safari.safari_mac",
        "peekOfCode": "class UserActions:\n    def tab_jump(number: int):\n        if number < 9:\n            actions.key(f\"cmd-{number}\")\n    def tab_final():\n        actions.key(\"cmd-9\")",
        "detail": "apps.safari.safari_mac",
        "documentation": {}
    },
    {
        "label": "safari_app",
        "kind": 2,
        "importPath": "apps.safari.safari_mac",
        "description": "apps.safari.safari_mac",
        "peekOfCode": "def safari_app():\n    return ui.apps(bundle=\"com.apple.Safari\")[0]\n@ctx.action_class(\"browser\")\nclass BrowserActions:\n    def address() -> str:\n        try:\n            window = safari_app().windows()[0]\n        except IndexError:\n            return \"\"\n        try:",
        "detail": "apps.safari.safari_mac",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.safari.safari_mac",
        "description": "apps.safari.safari_mac",
        "peekOfCode": "ctx = Context()\nmod = Module()\napps = mod.apps\nmod.apps.safari = \"\"\"\nos: mac\nand app.bundle: com.apple.Safari\n\"\"\"\nctx.matches = r\"\"\"\napp: safari\n\"\"\"",
        "detail": "apps.safari.safari_mac",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "apps.safari.safari_mac",
        "description": "apps.safari.safari_mac",
        "peekOfCode": "mod = Module()\napps = mod.apps\nmod.apps.safari = \"\"\"\nos: mac\nand app.bundle: com.apple.Safari\n\"\"\"\nctx.matches = r\"\"\"\napp: safari\n\"\"\"\nctx.tags = [\"browser\", \"user.tabs\"]",
        "detail": "apps.safari.safari_mac",
        "documentation": {}
    },
    {
        "label": "apps",
        "kind": 5,
        "importPath": "apps.safari.safari_mac",
        "description": "apps.safari.safari_mac",
        "peekOfCode": "apps = mod.apps\nmod.apps.safari = \"\"\"\nos: mac\nand app.bundle: com.apple.Safari\n\"\"\"\nctx.matches = r\"\"\"\napp: safari\n\"\"\"\nctx.tags = [\"browser\", \"user.tabs\"]\ndef safari_app():",
        "detail": "apps.safari.safari_mac",
        "documentation": {}
    },
    {
        "label": "mod.apps.safari",
        "kind": 5,
        "importPath": "apps.safari.safari_mac",
        "description": "apps.safari.safari_mac",
        "peekOfCode": "mod.apps.safari = \"\"\"\nos: mac\nand app.bundle: com.apple.Safari\n\"\"\"\nctx.matches = r\"\"\"\napp: safari\n\"\"\"\nctx.tags = [\"browser\", \"user.tabs\"]\ndef safari_app():\n    return ui.apps(bundle=\"com.apple.Safari\")[0]",
        "detail": "apps.safari.safari_mac",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "apps.safari.safari_mac",
        "description": "apps.safari.safari_mac",
        "peekOfCode": "ctx.matches = r\"\"\"\napp: safari\n\"\"\"\nctx.tags = [\"browser\", \"user.tabs\"]\ndef safari_app():\n    return ui.apps(bundle=\"com.apple.Safari\")[0]\n@ctx.action_class(\"browser\")\nclass BrowserActions:\n    def address() -> str:\n        try:",
        "detail": "apps.safari.safari_mac",
        "documentation": {}
    },
    {
        "label": "ctx.tags",
        "kind": 5,
        "importPath": "apps.safari.safari_mac",
        "description": "apps.safari.safari_mac",
        "peekOfCode": "ctx.tags = [\"browser\", \"user.tabs\"]\ndef safari_app():\n    return ui.apps(bundle=\"com.apple.Safari\")[0]\n@ctx.action_class(\"browser\")\nclass BrowserActions:\n    def address() -> str:\n        try:\n            window = safari_app().windows()[0]\n        except IndexError:\n            return \"\"",
        "detail": "apps.safari.safari_mac",
        "documentation": {}
    },
    {
        "label": "EditActions",
        "kind": 6,
        "importPath": "apps.slack.slack",
        "description": "apps.slack.slack",
        "peekOfCode": "class EditActions:\n    def line_insert_down():\n        actions.edit.line_end()\n        actions.key(\"shift-enter\")",
        "detail": "apps.slack.slack",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.slack.slack",
        "description": "apps.slack.slack",
        "peekOfCode": "ctx = Context()\nmod = Module()\napps = mod.apps\napps.slack = \"app.name: Slack\"\nmod.apps.slack = \"\"\"\nos: windows\nand app.name: Slack\nos: windows\nand app.exe: slack.exe\n\"\"\"",
        "detail": "apps.slack.slack",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "apps.slack.slack",
        "description": "apps.slack.slack",
        "peekOfCode": "mod = Module()\napps = mod.apps\napps.slack = \"app.name: Slack\"\nmod.apps.slack = \"\"\"\nos: windows\nand app.name: Slack\nos: windows\nand app.exe: slack.exe\n\"\"\"\napps.slack = \"\"\"",
        "detail": "apps.slack.slack",
        "documentation": {}
    },
    {
        "label": "apps",
        "kind": 5,
        "importPath": "apps.slack.slack",
        "description": "apps.slack.slack",
        "peekOfCode": "apps = mod.apps\napps.slack = \"app.name: Slack\"\nmod.apps.slack = \"\"\"\nos: windows\nand app.name: Slack\nos: windows\nand app.exe: slack.exe\n\"\"\"\napps.slack = \"\"\"\nos: mac",
        "detail": "apps.slack.slack",
        "documentation": {}
    },
    {
        "label": "apps.slack",
        "kind": 5,
        "importPath": "apps.slack.slack",
        "description": "apps.slack.slack",
        "peekOfCode": "apps.slack = \"app.name: Slack\"\nmod.apps.slack = \"\"\"\nos: windows\nand app.name: Slack\nos: windows\nand app.exe: slack.exe\n\"\"\"\napps.slack = \"\"\"\nos: mac\nand app.bundle: com.tinyspeck.slackmacgap",
        "detail": "apps.slack.slack",
        "documentation": {}
    },
    {
        "label": "mod.apps.slack",
        "kind": 5,
        "importPath": "apps.slack.slack",
        "description": "apps.slack.slack",
        "peekOfCode": "mod.apps.slack = \"\"\"\nos: windows\nand app.name: Slack\nos: windows\nand app.exe: slack.exe\n\"\"\"\napps.slack = \"\"\"\nos: mac\nand app.bundle: com.tinyspeck.slackmacgap\n\"\"\"",
        "detail": "apps.slack.slack",
        "documentation": {}
    },
    {
        "label": "apps.slack",
        "kind": 5,
        "importPath": "apps.slack.slack",
        "description": "apps.slack.slack",
        "peekOfCode": "apps.slack = \"\"\"\nos: mac\nand app.bundle: com.tinyspeck.slackmacgap\n\"\"\"\napps.slack = \"\"\"\ntag: browser\nbrowser.host: app.slack.com\n\"\"\"\nctx.matches = r\"\"\"\napp: slack",
        "detail": "apps.slack.slack",
        "documentation": {}
    },
    {
        "label": "apps.slack",
        "kind": 5,
        "importPath": "apps.slack.slack",
        "description": "apps.slack.slack",
        "peekOfCode": "apps.slack = \"\"\"\ntag: browser\nbrowser.host: app.slack.com\n\"\"\"\nctx.matches = r\"\"\"\napp: slack\n\"\"\"\n@ctx.action_class(\"edit\")\nclass EditActions:\n    def line_insert_down():",
        "detail": "apps.slack.slack",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "apps.slack.slack",
        "description": "apps.slack.slack",
        "peekOfCode": "ctx.matches = r\"\"\"\napp: slack\n\"\"\"\n@ctx.action_class(\"edit\")\nclass EditActions:\n    def line_insert_down():\n        actions.edit.line_end()\n        actions.key(\"shift-enter\")",
        "detail": "apps.slack.slack",
        "documentation": {}
    },
    {
        "label": "UserActions",
        "kind": 6,
        "importPath": "apps.slack.slack_mac",
        "description": "apps.slack.slack_mac",
        "peekOfCode": "class UserActions:\n    def messaging_workspace_previous():\n        actions.key(\"cmd-shift-[\")\n    def messaging_workspace_next():\n        actions.key(\"cmd-shift-]\")\n    def messaging_open_channel_picker():\n        actions.key(\"cmd-k\")\n    def messaging_channel_previous():\n        actions.key(\"alt-up\")\n    def messaging_channel_next():",
        "detail": "apps.slack.slack_mac",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.slack.slack_mac",
        "description": "apps.slack.slack_mac",
        "peekOfCode": "ctx = Context()\nctx.matches = r\"\"\"\nos: mac\napp: slack\n\"\"\"\n@ctx.action_class(\"user\")\nclass UserActions:\n    def messaging_workspace_previous():\n        actions.key(\"cmd-shift-[\")\n    def messaging_workspace_next():",
        "detail": "apps.slack.slack_mac",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "apps.slack.slack_mac",
        "description": "apps.slack.slack_mac",
        "peekOfCode": "ctx.matches = r\"\"\"\nos: mac\napp: slack\n\"\"\"\n@ctx.action_class(\"user\")\nclass UserActions:\n    def messaging_workspace_previous():\n        actions.key(\"cmd-shift-[\")\n    def messaging_workspace_next():\n        actions.key(\"cmd-shift-]\")",
        "detail": "apps.slack.slack_mac",
        "documentation": {}
    },
    {
        "label": "UserActions",
        "kind": 6,
        "importPath": "apps.slack.slack_win",
        "description": "apps.slack.slack_win",
        "peekOfCode": "class UserActions:\n    def messaging_workspace_previous():\n        actions.key(\"ctrl-shift-tab\")\n    def messaging_workspace_next():\n        actions.key(\"ctrl-tab\")\n    def messaging_open_channel_picker():\n        actions.key(\"ctrl-k\")\n    def messaging_channel_previous():\n        actions.key(\"alt-up\")\n    def messaging_channel_next():",
        "detail": "apps.slack.slack_win",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.slack.slack_win",
        "description": "apps.slack.slack_win",
        "peekOfCode": "ctx = Context()\nctx.matches = r\"\"\"\nos: windows\nos: linux\napp: slack\n\"\"\"\n@ctx.action_class(\"user\")\nclass UserActions:\n    def messaging_workspace_previous():\n        actions.key(\"ctrl-shift-tab\")",
        "detail": "apps.slack.slack_win",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "apps.slack.slack_win",
        "description": "apps.slack.slack_win",
        "peekOfCode": "ctx.matches = r\"\"\"\nos: windows\nos: linux\napp: slack\n\"\"\"\n@ctx.action_class(\"user\")\nclass UserActions:\n    def messaging_workspace_previous():\n        actions.key(\"ctrl-shift-tab\")\n    def messaging_workspace_next():",
        "detail": "apps.slack.slack_win",
        "documentation": {}
    },
    {
        "label": "app_actions",
        "kind": 6,
        "importPath": "apps.sumatrapdf.sumatrapdf",
        "description": "apps.sumatrapdf.sumatrapdf",
        "peekOfCode": "class app_actions:\n    # app.tabs\n    def tab_open():\n        actions.key(\"ctrl-o\")\n@ctx.action_class(\"edit\")\nclass EditActions:\n    def zoom_in():\n        actions.key(\"+\")\n    def zoom_out():\n        actions.key(\"-\")",
        "detail": "apps.sumatrapdf.sumatrapdf",
        "documentation": {}
    },
    {
        "label": "EditActions",
        "kind": 6,
        "importPath": "apps.sumatrapdf.sumatrapdf",
        "description": "apps.sumatrapdf.sumatrapdf",
        "peekOfCode": "class EditActions:\n    def zoom_in():\n        actions.key(\"+\")\n    def zoom_out():\n        actions.key(\"-\")\n@ctx.action_class(\"user\")\nclass UserActions:\n    # user.pages\n    def page_current():\n        actions.key(\"ctrl-g\")",
        "detail": "apps.sumatrapdf.sumatrapdf",
        "documentation": {}
    },
    {
        "label": "UserActions",
        "kind": 6,
        "importPath": "apps.sumatrapdf.sumatrapdf",
        "description": "apps.sumatrapdf.sumatrapdf",
        "peekOfCode": "class UserActions:\n    # user.pages\n    def page_current():\n        actions.key(\"ctrl-g\")\n        page = actions.edit.selected_text()\n        actions.key(\"escape\")\n        return int(page)\n    def page_next():\n        actions.key(\"n\")\n    def page_previous():",
        "detail": "apps.sumatrapdf.sumatrapdf",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "apps.sumatrapdf.sumatrapdf",
        "description": "apps.sumatrapdf.sumatrapdf",
        "peekOfCode": "mod = Module()\nmod.apps.sumatrapdf = \"\"\"\nos: windows\nand app.name: SumatraPDF\nos: windows\nand app.exe: SumatraPDF.exe\n\"\"\"\n# Context matching\nctx = Context()\nctx.matches = \"\"\"",
        "detail": "apps.sumatrapdf.sumatrapdf",
        "documentation": {}
    },
    {
        "label": "mod.apps.sumatrapdf",
        "kind": 5,
        "importPath": "apps.sumatrapdf.sumatrapdf",
        "description": "apps.sumatrapdf.sumatrapdf",
        "peekOfCode": "mod.apps.sumatrapdf = \"\"\"\nos: windows\nand app.name: SumatraPDF\nos: windows\nand app.exe: SumatraPDF.exe\n\"\"\"\n# Context matching\nctx = Context()\nctx.matches = \"\"\"\napp: sumatrapdf",
        "detail": "apps.sumatrapdf.sumatrapdf",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.sumatrapdf.sumatrapdf",
        "description": "apps.sumatrapdf.sumatrapdf",
        "peekOfCode": "ctx = Context()\nctx.matches = \"\"\"\napp: sumatrapdf\n\"\"\"\n# --- Implement actions ---\n@ctx.action_class(\"app\")\nclass app_actions:\n    # app.tabs\n    def tab_open():\n        actions.key(\"ctrl-o\")",
        "detail": "apps.sumatrapdf.sumatrapdf",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "apps.sumatrapdf.sumatrapdf",
        "description": "apps.sumatrapdf.sumatrapdf",
        "peekOfCode": "ctx.matches = \"\"\"\napp: sumatrapdf\n\"\"\"\n# --- Implement actions ---\n@ctx.action_class(\"app\")\nclass app_actions:\n    # app.tabs\n    def tab_open():\n        actions.key(\"ctrl-o\")\n@ctx.action_class(\"edit\")",
        "detail": "apps.sumatrapdf.sumatrapdf",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "apps.teams.teams",
        "description": "apps.teams.teams",
        "peekOfCode": "mod = Module()\napps = mod.apps\napps.microsoft_teams = \"\"\"\nos: linux\nand app.name: /teams/\nos: linux\nand app.name: /Teams/\n\"\"\"",
        "detail": "apps.teams.teams",
        "documentation": {}
    },
    {
        "label": "apps",
        "kind": 5,
        "importPath": "apps.teams.teams",
        "description": "apps.teams.teams",
        "peekOfCode": "apps = mod.apps\napps.microsoft_teams = \"\"\"\nos: linux\nand app.name: /teams/\nos: linux\nand app.name: /Teams/\n\"\"\"",
        "detail": "apps.teams.teams",
        "documentation": {}
    },
    {
        "label": "apps.microsoft_teams",
        "kind": 5,
        "importPath": "apps.teams.teams",
        "description": "apps.teams.teams",
        "peekOfCode": "apps.microsoft_teams = \"\"\"\nos: linux\nand app.name: /teams/\nos: linux\nand app.name: /Teams/\n\"\"\"",
        "detail": "apps.teams.teams",
        "documentation": {}
    },
    {
        "label": "EditActions",
        "kind": 6,
        "importPath": "apps.teams.teams_linux",
        "description": "apps.teams.teams_linux",
        "peekOfCode": "class EditActions:\n    # zoom in: key(ctrl-=)\n    # zoom out: key(ctrl--)\n    # reset zoom: key(ctrl-0)\n    def zoom_in():\n        actions.key(\"ctrl-=\")\n    def zoom_out():\n        actions.key(\"ctrl--\")\n    def zoom_reset():\n        actions.key(\"ctrl-0\")",
        "detail": "apps.teams.teams_linux",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.teams.teams_linux",
        "description": "apps.teams.teams_linux",
        "peekOfCode": "ctx = Context()\nctx.matches = r\"\"\"\nos: linux\napp: microsoft_teams\n\"\"\"\n@ctx.action_class(\"edit\")\nclass EditActions:\n    # zoom in: key(ctrl-=)\n    # zoom out: key(ctrl--)\n    # reset zoom: key(ctrl-0)",
        "detail": "apps.teams.teams_linux",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "apps.teams.teams_linux",
        "description": "apps.teams.teams_linux",
        "peekOfCode": "ctx.matches = r\"\"\"\nos: linux\napp: microsoft_teams\n\"\"\"\n@ctx.action_class(\"edit\")\nclass EditActions:\n    # zoom in: key(ctrl-=)\n    # zoom out: key(ctrl--)\n    # reset zoom: key(ctrl-0)\n    def zoom_in():",
        "detail": "apps.teams.teams_linux",
        "documentation": {}
    },
    {
        "label": "user_actions",
        "kind": 6,
        "importPath": "apps.terminator.terminator_linux",
        "description": "apps.terminator.terminator_linux",
        "peekOfCode": "class user_actions:\n    # user.splits\n    def split_window_right():\n        actions.key(\"alt-right\")\n    def split_window_left():\n        actions.key(\"alt-left\")\n    def split_window_down():\n        actions.key(\"alt-down\")\n    def split_window_up():\n        actions.key(\"alt-up\")",
        "detail": "apps.terminator.terminator_linux",
        "documentation": {}
    },
    {
        "label": "AppActions",
        "kind": 6,
        "importPath": "apps.terminator.terminator_linux",
        "description": "apps.terminator.terminator_linux",
        "peekOfCode": "class AppActions:\n    # app.tabs\n    def tab_open():\n        actions.key(\"ctrl-shift-t\")\n    def tab_previous():\n        actions.key(\"ctrl-pageup\")\n    def tab_next():\n        actions.key(\"ctrl-pagedown\")\n    def tab_close():\n        actions.key(\"ctrl-shift-w\")",
        "detail": "apps.terminator.terminator_linux",
        "documentation": {}
    },
    {
        "label": "EditActions",
        "kind": 6,
        "importPath": "apps.terminator.terminator_linux",
        "description": "apps.terminator.terminator_linux",
        "peekOfCode": "class EditActions:\n    def page_down():\n        actions.key(\"shift-pagedown\")\n    def page_up():\n        actions.key(\"shift-pageup\")\n    def paste():\n        actions.key(\"ctrl-shift-v\")\n    def copy():\n        actions.key(\"ctrl-shift-c\")\n    def find(text: str = None):",
        "detail": "apps.terminator.terminator_linux",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "apps.terminator.terminator_linux",
        "description": "apps.terminator.terminator_linux",
        "peekOfCode": "mod = Module()\nmod.apps.terminator = \"\"\"\nos: linux\nand app.exe: terminator\nos: linux\nand app.name: Terminator\n\"\"\"\n# Context matching\nctx = Context()\nctx.matches = r\"\"\"",
        "detail": "apps.terminator.terminator_linux",
        "documentation": {}
    },
    {
        "label": "mod.apps.terminator",
        "kind": 5,
        "importPath": "apps.terminator.terminator_linux",
        "description": "apps.terminator.terminator_linux",
        "peekOfCode": "mod.apps.terminator = \"\"\"\nos: linux\nand app.exe: terminator\nos: linux\nand app.name: Terminator\n\"\"\"\n# Context matching\nctx = Context()\nctx.matches = r\"\"\"\napp: terminator",
        "detail": "apps.terminator.terminator_linux",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.terminator.terminator_linux",
        "description": "apps.terminator.terminator_linux",
        "peekOfCode": "ctx = Context()\nctx.matches = r\"\"\"\napp: terminator\n\"\"\"\nctx.tags = [\n    \"terminal\",\n    \"user.tabs\",\n    \"user.splits\",\n    \"user.generic_unix_shell\",\n    \"user.git\",",
        "detail": "apps.terminator.terminator_linux",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "apps.terminator.terminator_linux",
        "description": "apps.terminator.terminator_linux",
        "peekOfCode": "ctx.matches = r\"\"\"\napp: terminator\n\"\"\"\nctx.tags = [\n    \"terminal\",\n    \"user.tabs\",\n    \"user.splits\",\n    \"user.generic_unix_shell\",\n    \"user.git\",\n    \"user.kubectl\",",
        "detail": "apps.terminator.terminator_linux",
        "documentation": {}
    },
    {
        "label": "ctx.tags",
        "kind": 5,
        "importPath": "apps.terminator.terminator_linux",
        "description": "apps.terminator.terminator_linux",
        "peekOfCode": "ctx.tags = [\n    \"terminal\",\n    \"user.tabs\",\n    \"user.splits\",\n    \"user.generic_unix_shell\",\n    \"user.git\",\n    \"user.kubectl\",\n]\n# --- Implement actions ---\n@ctx.action_class(\"user\")",
        "detail": "apps.terminator.terminator_linux",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "apps.terraform.terraform",
        "description": "apps.terraform.terraform",
        "peekOfCode": "mod = Module()\nmod.tag(\"terraform_client\", desc=\"tag for enabling terraform commands in your terminal\")",
        "detail": "apps.terraform.terraform",
        "documentation": {}
    },
    {
        "label": "UserActions",
        "kind": 6,
        "importPath": "apps.thunderbird.thunderbird",
        "description": "apps.thunderbird.thunderbird",
        "peekOfCode": "class UserActions:\n    def thunderbird_mod(keys: str):\n        \"\"\"Press keys with modifier ctrl or cmd\"\"\"\n    def thunderbird_calendar_view(number: int):\n        \"\"\"Select between calendar view tabs\"\"\"\n# --- Implement actions ---\n@ctx.action_class(\"app\")\nclass AppActions:\n    # app.tabs\n    # not possible in thunderbird",
        "detail": "apps.thunderbird.thunderbird",
        "documentation": {}
    },
    {
        "label": "AppActions",
        "kind": 6,
        "importPath": "apps.thunderbird.thunderbird",
        "description": "apps.thunderbird.thunderbird",
        "peekOfCode": "class AppActions:\n    # app.tabs\n    # not possible in thunderbird\n    def tab_open():\n        pass",
        "detail": "apps.thunderbird.thunderbird",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "apps.thunderbird.thunderbird",
        "description": "apps.thunderbird.thunderbird",
        "peekOfCode": "mod = Module()\nmod.apps.thunderbird = \"\"\"\nos: windows\nand app.name: Thunderbird\nos: windows\nand app.exe: thunderbird.exe\n\"\"\"\nmod.apps.thunderbird = \"\"\"\nos: linux\nand app.name: Thunderbird",
        "detail": "apps.thunderbird.thunderbird",
        "documentation": {}
    },
    {
        "label": "mod.apps.thunderbird",
        "kind": 5,
        "importPath": "apps.thunderbird.thunderbird",
        "description": "apps.thunderbird.thunderbird",
        "peekOfCode": "mod.apps.thunderbird = \"\"\"\nos: windows\nand app.name: Thunderbird\nos: windows\nand app.exe: thunderbird.exe\n\"\"\"\nmod.apps.thunderbird = \"\"\"\nos: linux\nand app.name: Thunderbird\n\"\"\"",
        "detail": "apps.thunderbird.thunderbird",
        "documentation": {}
    },
    {
        "label": "mod.apps.thunderbird",
        "kind": 5,
        "importPath": "apps.thunderbird.thunderbird",
        "description": "apps.thunderbird.thunderbird",
        "peekOfCode": "mod.apps.thunderbird = \"\"\"\nos: linux\nand app.name: Thunderbird\n\"\"\"\n# Inbox tab TODO: also matches emails opened in new tab\nmod.apps.thunderbird_inbox = \"\"\"\napp: thunderbird\ntitle: /@/\n\"\"\"\n# Calendar tab (lightning)",
        "detail": "apps.thunderbird.thunderbird",
        "documentation": {}
    },
    {
        "label": "mod.apps.thunderbird_inbox",
        "kind": 5,
        "importPath": "apps.thunderbird.thunderbird",
        "description": "apps.thunderbird.thunderbird",
        "peekOfCode": "mod.apps.thunderbird_inbox = \"\"\"\napp: thunderbird\ntitle: /@/\n\"\"\"\n# Calendar tab (lightning)\nmonths = [\n    \"January\",  # English\n    \"February\",\n    \"March\",\n    \"April\",",
        "detail": "apps.thunderbird.thunderbird",
        "documentation": {}
    },
    {
        "label": "months",
        "kind": 5,
        "importPath": "apps.thunderbird.thunderbird",
        "description": "apps.thunderbird.thunderbird",
        "peekOfCode": "months = [\n    \"January\",  # English\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",",
        "detail": "apps.thunderbird.thunderbird",
        "documentation": {}
    },
    {
        "label": "mod.apps.thunderbird_calendar",
        "kind": 5,
        "importPath": "apps.thunderbird.thunderbird",
        "description": "apps.thunderbird.thunderbird",
        "peekOfCode": "mod.apps.thunderbird_calendar = f\"\"\"\napp: thunderbird\ntitle: Calendar - Mozilla Thunderbird\ntitle: Kalender - Mozilla Thunderbird\ntitle: /({\"|\".join(map(lambda m: m + \" \", months))})/\n\"\"\"\n# Tasks tab\nmod.apps.thunderbird_tasks = \"\"\"\napp: thunderbird\ntitle: Tasks - Mozilla Thunderbird",
        "detail": "apps.thunderbird.thunderbird",
        "documentation": {}
    },
    {
        "label": "mod.apps.thunderbird_tasks",
        "kind": 5,
        "importPath": "apps.thunderbird.thunderbird",
        "description": "apps.thunderbird.thunderbird",
        "peekOfCode": "mod.apps.thunderbird_tasks = \"\"\"\napp: thunderbird\ntitle: Tasks - Mozilla Thunderbird\ntitle: Aufgaben - Mozilla Thunderbird\n\"\"\"\n# Mail composer window\nmod.apps.thunderbird_composer = \"\"\"\napp: thunderbird\ntitle: /Write: /\ntitle: /Verfassen: /",
        "detail": "apps.thunderbird.thunderbird",
        "documentation": {}
    },
    {
        "label": "mod.apps.thunderbird_composer",
        "kind": 5,
        "importPath": "apps.thunderbird.thunderbird",
        "description": "apps.thunderbird.thunderbird",
        "peekOfCode": "mod.apps.thunderbird_composer = \"\"\"\napp: thunderbird\ntitle: /Write: /\ntitle: /Verfassen: /\n\"\"\"\n# Address book popup window\nmod.apps.thunderbird_contacts = \"\"\"\napp: thunderbird\ntitle: Address Book\ntitle: Adressbuch",
        "detail": "apps.thunderbird.thunderbird",
        "documentation": {}
    },
    {
        "label": "mod.apps.thunderbird_contacts",
        "kind": 5,
        "importPath": "apps.thunderbird.thunderbird",
        "description": "apps.thunderbird.thunderbird",
        "peekOfCode": "mod.apps.thunderbird_contacts = \"\"\"\napp: thunderbird\ntitle: Address Book\ntitle: Adressbuch\n\"\"\"\n# Context matching\nctx = Context()\nctx.matches = r\"\"\"\napp: thunderbird\n\"\"\"",
        "detail": "apps.thunderbird.thunderbird",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.thunderbird.thunderbird",
        "description": "apps.thunderbird.thunderbird",
        "peekOfCode": "ctx = Context()\nctx.matches = r\"\"\"\napp: thunderbird\n\"\"\"\n# --- Define actions ---\n@mod.action_class\nclass UserActions:\n    def thunderbird_mod(keys: str):\n        \"\"\"Press keys with modifier ctrl or cmd\"\"\"\n    def thunderbird_calendar_view(number: int):",
        "detail": "apps.thunderbird.thunderbird",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "apps.thunderbird.thunderbird",
        "description": "apps.thunderbird.thunderbird",
        "peekOfCode": "ctx.matches = r\"\"\"\napp: thunderbird\n\"\"\"\n# --- Define actions ---\n@mod.action_class\nclass UserActions:\n    def thunderbird_mod(keys: str):\n        \"\"\"Press keys with modifier ctrl or cmd\"\"\"\n    def thunderbird_calendar_view(number: int):\n        \"\"\"Select between calendar view tabs\"\"\"",
        "detail": "apps.thunderbird.thunderbird",
        "documentation": {}
    },
    {
        "label": "AppActions",
        "kind": 6,
        "importPath": "apps.thunderbird.thunderbird_linux",
        "description": "apps.thunderbird.thunderbird_linux",
        "peekOfCode": "class AppActions:\n    # app.tabs\n    def tab_reopen():\n        actions.key(\"ctrl-shift-t\")  # only works from inbox tab\n@ctx.action_class(\"user\")\nclass UserActions:\n    # user.tabs\n    def tab_jump(number: int):\n        if number <= 9:\n            actions.key(f\"alt-{number}\")",
        "detail": "apps.thunderbird.thunderbird_linux",
        "documentation": {}
    },
    {
        "label": "UserActions",
        "kind": 6,
        "importPath": "apps.thunderbird.thunderbird_linux",
        "description": "apps.thunderbird.thunderbird_linux",
        "peekOfCode": "class UserActions:\n    # user.tabs\n    def tab_jump(number: int):\n        if number <= 9:\n            actions.key(f\"alt-{number}\")\n    def tab_final():\n        actions.key(\"alt-9\")\n    # custom actions\n    def thunderbird_mod(keys: str):\n        actions.key(f\"ctrl-{keys}\")",
        "detail": "apps.thunderbird.thunderbird_linux",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.thunderbird.thunderbird_linux",
        "description": "apps.thunderbird.thunderbird_linux",
        "peekOfCode": "ctx = Context()\nctx.matches = r\"\"\"\nos: linux\napp: thunderbird\n\"\"\"\n# --- Implement actions ---\n@ctx.action_class(\"app\")\nclass AppActions:\n    # app.tabs\n    def tab_reopen():",
        "detail": "apps.thunderbird.thunderbird_linux",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "apps.thunderbird.thunderbird_linux",
        "description": "apps.thunderbird.thunderbird_linux",
        "peekOfCode": "ctx.matches = r\"\"\"\nos: linux\napp: thunderbird\n\"\"\"\n# --- Implement actions ---\n@ctx.action_class(\"app\")\nclass AppActions:\n    # app.tabs\n    def tab_reopen():\n        actions.key(\"ctrl-shift-t\")  # only works from inbox tab",
        "detail": "apps.thunderbird.thunderbird_linux",
        "documentation": {}
    },
    {
        "label": "AppActions",
        "kind": 6,
        "importPath": "apps.thunderbird.thunderbird_mac",
        "description": "apps.thunderbird.thunderbird_mac",
        "peekOfCode": "class AppActions:\n    # app.tabs\n    def tab_reopen():\n        actions.key(\"cmd-shift-t\")  # only works from inbox tab\n@ctx.action_class(\"user\")\nclass UserActions:\n    # user.tabs\n    def tab_jump(number: int):\n        if number <= 9:\n            actions.key(f\"cmd-{number}\")",
        "detail": "apps.thunderbird.thunderbird_mac",
        "documentation": {}
    },
    {
        "label": "UserActions",
        "kind": 6,
        "importPath": "apps.thunderbird.thunderbird_mac",
        "description": "apps.thunderbird.thunderbird_mac",
        "peekOfCode": "class UserActions:\n    # user.tabs\n    def tab_jump(number: int):\n        if number <= 9:\n            actions.key(f\"cmd-{number}\")\n    def tab_final():\n        actions.key(\"cmd-9\")\n    # custom actions\n    def thunderbird_mod(keys: str):\n        actions.key(f\"cmd-{keys}\")",
        "detail": "apps.thunderbird.thunderbird_mac",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.thunderbird.thunderbird_mac",
        "description": "apps.thunderbird.thunderbird_mac",
        "peekOfCode": "ctx = Context()\nctx.matches = r\"\"\"\nos: mac\napp: thunderbird\n\"\"\"\n# --- Implement actions ---\n@ctx.action_class(\"app\")\nclass AppActions:\n    # app.tabs\n    def tab_reopen():",
        "detail": "apps.thunderbird.thunderbird_mac",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "apps.thunderbird.thunderbird_mac",
        "description": "apps.thunderbird.thunderbird_mac",
        "peekOfCode": "ctx.matches = r\"\"\"\nos: mac\napp: thunderbird\n\"\"\"\n# --- Implement actions ---\n@ctx.action_class(\"app\")\nclass AppActions:\n    # app.tabs\n    def tab_reopen():\n        actions.key(\"cmd-shift-t\")  # only works from inbox tab",
        "detail": "apps.thunderbird.thunderbird_mac",
        "documentation": {}
    },
    {
        "label": "AppActions",
        "kind": 6,
        "importPath": "apps.thunderbird.thunderbird_win",
        "description": "apps.thunderbird.thunderbird_win",
        "peekOfCode": "class AppActions:\n    # app.tabs\n    def tab_reopen():\n        actions.key(\"ctrl-shift-t\")  # only works from inbox tab\n@ctx.action_class(\"user\")\nclass UserActions:\n    # user.tabs\n    def tab_jump(number: int):\n        if number <= 9:\n            actions.key(f\"ctrl-{number}\")",
        "detail": "apps.thunderbird.thunderbird_win",
        "documentation": {}
    },
    {
        "label": "UserActions",
        "kind": 6,
        "importPath": "apps.thunderbird.thunderbird_win",
        "description": "apps.thunderbird.thunderbird_win",
        "peekOfCode": "class UserActions:\n    # user.tabs\n    def tab_jump(number: int):\n        if number <= 9:\n            actions.key(f\"ctrl-{number}\")\n    def tab_final():\n        actions.key(\"ctrl-9\")\n    # custom actions\n    def thunderbird_mod(keys: str):\n        actions.key(f\"ctrl-{keys}\")",
        "detail": "apps.thunderbird.thunderbird_win",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.thunderbird.thunderbird_win",
        "description": "apps.thunderbird.thunderbird_win",
        "peekOfCode": "ctx = Context()\nctx.matches = r\"\"\"\nos: windows\napp: thunderbird\n\"\"\"\n# --- Implement actions ---\n@ctx.action_class(\"app\")\nclass AppActions:\n    # app.tabs\n    def tab_reopen():",
        "detail": "apps.thunderbird.thunderbird_win",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "apps.thunderbird.thunderbird_win",
        "description": "apps.thunderbird.thunderbird_win",
        "peekOfCode": "ctx.matches = r\"\"\"\nos: windows\napp: thunderbird\n\"\"\"\n# --- Implement actions ---\n@ctx.action_class(\"app\")\nclass AppActions:\n    # app.tabs\n    def tab_reopen():\n        actions.key(\"ctrl-shift-t\")  # only works from inbox tab",
        "detail": "apps.thunderbird.thunderbird_win",
        "documentation": {}
    },
    {
        "label": "TmuxActions",
        "kind": 6,
        "importPath": "apps.tmux.tmux",
        "description": "apps.tmux.tmux",
        "peekOfCode": "class TmuxActions:\n    def tmux_prefix():\n        \"\"\"press control and the configured tmux prefix key\"\"\"\n        actions.key(f\"ctrl-{setting_tmux_prefix_key.get()}\")\n    def tmux_keybind(key: str):\n        \"\"\"press tmux prefix followed by a key bind\"\"\"\n        actions.user.tmux_prefix()\n        actions.key(key)\n    def tmux_enter_command(command: str = \"\"):\n        \"\"\"Enter tmux command mode and optionally insert a command without executing it.\"\"\"",
        "detail": "apps.tmux.tmux",
        "documentation": {}
    },
    {
        "label": "AppActions",
        "kind": 6,
        "importPath": "apps.tmux.tmux",
        "description": "apps.tmux.tmux",
        "peekOfCode": "class AppActions:\n    def tab_open():\n        actions.user.tmux_execute_command(\"new-window\")\n    def tab_next():\n        actions.user.tmux_execute_command(\"select-window -n\")\n    def tab_previous():\n        actions.user.tmux_execute_command(\"select-window -p\")\n@ctx.action_class(\"user\")\nclass UserActions:\n    def tab_jump(number: int):",
        "detail": "apps.tmux.tmux",
        "documentation": {}
    },
    {
        "label": "UserActions",
        "kind": 6,
        "importPath": "apps.tmux.tmux",
        "description": "apps.tmux.tmux",
        "peekOfCode": "class UserActions:\n    def tab_jump(number: int):\n        actions.user.tmux_execute_command(f\"select-window -t {number}\")\n    def tab_close_wrapper():\n        actions.user.tmux_execute_command_with_confirmation(\n            \"kill-window\", \"kill-window #W?\"\n        )\n    def split_window_right():\n        actions.user.split_window_horizontally()\n        actions.user.tmux_execute_command(\"swap-pane -U -s #P\")",
        "detail": "apps.tmux.tmux",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.tmux.tmux",
        "description": "apps.tmux.tmux",
        "peekOfCode": "ctx = Context()\nmod = Module()\nctx.matches = r\"\"\"\ntag: user.tmux\n\"\"\"\nsetting_tmux_prefix_key = mod.setting(\n    \"tmux_prefix_key\",\n    type=str,\n    default=\"b\",\n    desc=\"The key used to prefix all tmux commands\",",
        "detail": "apps.tmux.tmux",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "apps.tmux.tmux",
        "description": "apps.tmux.tmux",
        "peekOfCode": "mod = Module()\nctx.matches = r\"\"\"\ntag: user.tmux\n\"\"\"\nsetting_tmux_prefix_key = mod.setting(\n    \"tmux_prefix_key\",\n    type=str,\n    default=\"b\",\n    desc=\"The key used to prefix all tmux commands\",\n)",
        "detail": "apps.tmux.tmux",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "apps.tmux.tmux",
        "description": "apps.tmux.tmux",
        "peekOfCode": "ctx.matches = r\"\"\"\ntag: user.tmux\n\"\"\"\nsetting_tmux_prefix_key = mod.setting(\n    \"tmux_prefix_key\",\n    type=str,\n    default=\"b\",\n    desc=\"The key used to prefix all tmux commands\",\n)\n@mod.action_class",
        "detail": "apps.tmux.tmux",
        "documentation": {}
    },
    {
        "label": "setting_tmux_prefix_key",
        "kind": 5,
        "importPath": "apps.tmux.tmux",
        "description": "apps.tmux.tmux",
        "peekOfCode": "setting_tmux_prefix_key = mod.setting(\n    \"tmux_prefix_key\",\n    type=str,\n    default=\"b\",\n    desc=\"The key used to prefix all tmux commands\",\n)\n@mod.action_class\nclass TmuxActions:\n    def tmux_prefix():\n        \"\"\"press control and the configured tmux prefix key\"\"\"",
        "detail": "apps.tmux.tmux",
        "documentation": {}
    },
    {
        "label": "AppActions",
        "kind": 6,
        "importPath": "apps.visualstudio.visual_studio",
        "description": "apps.visualstudio.visual_studio",
        "peekOfCode": "class AppActions:\n    # talon app actions\n    def tab_close():\n        actions.key(\"ctrl-f4\")\n    def tab_next():\n        actions.key(\"ctrl-tab\")\n    def tab_previous():\n        actions.key(\"ctrl-shift-tab\")\n    def tab_reopen():\n        actions.key(\"ctrl-1 ctrl-r enter\")",
        "detail": "apps.visualstudio.visual_studio",
        "documentation": {}
    },
    {
        "label": "CodeActions",
        "kind": 6,
        "importPath": "apps.visualstudio.visual_studio",
        "description": "apps.visualstudio.visual_studio",
        "peekOfCode": "class CodeActions:\n    # talon code actions\n    def toggle_comment():\n        actions.key(\"ctrl-k ctrl-/\")\n@ctx.action_class(\"edit\")\nclass EditActions:\n    # talon edit actions\n    def indent_more():\n        actions.key(\"tab\")\n    def indent_less():",
        "detail": "apps.visualstudio.visual_studio",
        "documentation": {}
    },
    {
        "label": "EditActions",
        "kind": 6,
        "importPath": "apps.visualstudio.visual_studio",
        "description": "apps.visualstudio.visual_studio",
        "peekOfCode": "class EditActions:\n    # talon edit actions\n    def indent_more():\n        actions.key(\"tab\")\n    def indent_less():\n        actions.key(\"shift-tab\")\n    def save_all():\n        actions.key(\"ctrl-shift-s\")\n    def find(text: str):\n        actions.key(\"ctrl-f\")",
        "detail": "apps.visualstudio.visual_studio",
        "documentation": {}
    },
    {
        "label": "WinActions",
        "kind": 6,
        "importPath": "apps.visualstudio.visual_studio",
        "description": "apps.visualstudio.visual_studio",
        "peekOfCode": "class WinActions:\n    def filename():\n        title = actions.win.title()\n        # this doesn't seem to be necessary on VSCode for Mac\n        # if title == \"\":\n        #    title = ui.active_window().doc\n        result = title.split(\"-\")[0].rstrip()\n        if \".\" in result:\n            # print(result)\n            return result",
        "detail": "apps.visualstudio.visual_studio",
        "documentation": {}
    },
    {
        "label": "UserActions",
        "kind": 6,
        "importPath": "apps.visualstudio.visual_studio",
        "description": "apps.visualstudio.visual_studio",
        "peekOfCode": "class UserActions:\n    # snippet.py support beginHelp close\n    def snippet_search(text: str):\n        \"\"\"TEST\"\"\"\n        actions.key(\"ctrl-k ctrl-x\")\n    # def snippet_insert(text: str):\n    #     \"\"\"Inserts a snippet\"\"\"\n    # def snippet_create():\n    #     \"\"\"Triggers snippet creation\"\"\"\n    # snippet.py support end",
        "detail": "apps.visualstudio.visual_studio",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.visualstudio.visual_studio",
        "description": "apps.visualstudio.visual_studio",
        "peekOfCode": "ctx = Context()\nmod = Module()\napps = mod.apps\napps.visual_studio = \"\"\"\nos: windows\nand app.name: Microsoft Visual Studio 2022\nos: windows\nand app.name: Microsoft Visual Studio 2019\nos: windows\nand app.name: devenv.exe",
        "detail": "apps.visualstudio.visual_studio",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "apps.visualstudio.visual_studio",
        "description": "apps.visualstudio.visual_studio",
        "peekOfCode": "mod = Module()\napps = mod.apps\napps.visual_studio = \"\"\"\nos: windows\nand app.name: Microsoft Visual Studio 2022\nos: windows\nand app.name: Microsoft Visual Studio 2019\nos: windows\nand app.name: devenv.exe\n\"\"\"",
        "detail": "apps.visualstudio.visual_studio",
        "documentation": {}
    },
    {
        "label": "apps",
        "kind": 5,
        "importPath": "apps.visualstudio.visual_studio",
        "description": "apps.visualstudio.visual_studio",
        "peekOfCode": "apps = mod.apps\napps.visual_studio = \"\"\"\nos: windows\nand app.name: Microsoft Visual Studio 2022\nos: windows\nand app.name: Microsoft Visual Studio 2019\nos: windows\nand app.name: devenv.exe\n\"\"\"\nctx.matches = r\"\"\"",
        "detail": "apps.visualstudio.visual_studio",
        "documentation": {}
    },
    {
        "label": "apps.visual_studio",
        "kind": 5,
        "importPath": "apps.visualstudio.visual_studio",
        "description": "apps.visualstudio.visual_studio",
        "peekOfCode": "apps.visual_studio = \"\"\"\nos: windows\nand app.name: Microsoft Visual Studio 2022\nos: windows\nand app.name: Microsoft Visual Studio 2019\nos: windows\nand app.name: devenv.exe\n\"\"\"\nctx.matches = r\"\"\"\napp: visual_studio",
        "detail": "apps.visualstudio.visual_studio",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "apps.visualstudio.visual_studio",
        "description": "apps.visualstudio.visual_studio",
        "peekOfCode": "ctx.matches = r\"\"\"\napp: visual_studio\n\"\"\"\nfrom talon import Context, actions\nctx = Context()\nctx.matches = r\"\"\"\nos: windows\napp: visual_studio\n\"\"\"\n@ctx.action_class(\"app\")",
        "detail": "apps.visualstudio.visual_studio",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.visualstudio.visual_studio",
        "description": "apps.visualstudio.visual_studio",
        "peekOfCode": "ctx = Context()\nctx.matches = r\"\"\"\nos: windows\napp: visual_studio\n\"\"\"\n@ctx.action_class(\"app\")\nclass AppActions:\n    # talon app actions\n    def tab_close():\n        actions.key(\"ctrl-f4\")",
        "detail": "apps.visualstudio.visual_studio",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "apps.visualstudio.visual_studio",
        "description": "apps.visualstudio.visual_studio",
        "peekOfCode": "ctx.matches = r\"\"\"\nos: windows\napp: visual_studio\n\"\"\"\n@ctx.action_class(\"app\")\nclass AppActions:\n    # talon app actions\n    def tab_close():\n        actions.key(\"ctrl-f4\")\n    def tab_next():",
        "detail": "apps.visualstudio.visual_studio",
        "documentation": {}
    },
    {
        "label": "AppActions",
        "kind": 6,
        "importPath": "apps.visualstudio.visual_studio_win",
        "description": "apps.visualstudio.visual_studio_win",
        "peekOfCode": "class AppActions:\n    # talon app actions\n    def tab_close():\n        actions.key(\"ctrl-f4\")\n    def tab_next():\n        actions.key(\"ctrl-tab\")\n    def tab_previous():\n        actions.key(\"ctrl-shift-tab\")\n    def tab_reopen():\n        actions.key(\"ctrl-1 ctrl-r enter\")",
        "detail": "apps.visualstudio.visual_studio_win",
        "documentation": {}
    },
    {
        "label": "CodeActions",
        "kind": 6,
        "importPath": "apps.visualstudio.visual_studio_win",
        "description": "apps.visualstudio.visual_studio_win",
        "peekOfCode": "class CodeActions:\n    # talon code actions\n    def toggle_comment():\n        actions.key(\"ctrl-k ctrl-/\")\n@ctx.action_class(\"edit\")\nclass EditActions:\n    # talon edit actions\n    def indent_more():\n        actions.key(\"tab\")\n    def indent_less():",
        "detail": "apps.visualstudio.visual_studio_win",
        "documentation": {}
    },
    {
        "label": "EditActions",
        "kind": 6,
        "importPath": "apps.visualstudio.visual_studio_win",
        "description": "apps.visualstudio.visual_studio_win",
        "peekOfCode": "class EditActions:\n    # talon edit actions\n    def indent_more():\n        actions.key(\"tab\")\n    def indent_less():\n        actions.key(\"shift-tab\")\n    def save_all():\n        actions.key(\"ctrl-shift-s\")\n@ctx.action_class(\"user\")\nclass UserActions:",
        "detail": "apps.visualstudio.visual_studio_win",
        "documentation": {}
    },
    {
        "label": "UserActions",
        "kind": 6,
        "importPath": "apps.visualstudio.visual_studio_win",
        "description": "apps.visualstudio.visual_studio_win",
        "peekOfCode": "class UserActions:\n    # multiple_cursor.py support begin\n    # note: visual studio has no explicit mode for multiple cursors; requires https://marketplace.visualstudio.com/items?itemName=VaclavNadrasky.MultiCaretBooster\n    def multi_cursor_add_above():\n        actions.key(\"shift-alt-up\")\n    def multi_cursor_add_below():\n        actions.key(\"shift-alt-down\")\n    # action(user.multi_cursor_add_to_line_ends): does not exist :(\n    def multi_cursor_disable():\n        actions.key(\"escape\")",
        "detail": "apps.visualstudio.visual_studio_win",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.visualstudio.visual_studio_win",
        "description": "apps.visualstudio.visual_studio_win",
        "peekOfCode": "ctx = Context()\nctx.matches = r\"\"\"\nos: windows\napp: visual_studio\n\"\"\"\n@ctx.action_class(\"app\")\nclass AppActions:\n    # talon app actions\n    def tab_close():\n        actions.key(\"ctrl-f4\")",
        "detail": "apps.visualstudio.visual_studio_win",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "apps.visualstudio.visual_studio_win",
        "description": "apps.visualstudio.visual_studio_win",
        "peekOfCode": "ctx.matches = r\"\"\"\nos: windows\napp: visual_studio\n\"\"\"\n@ctx.action_class(\"app\")\nclass AppActions:\n    # talon app actions\n    def tab_close():\n        actions.key(\"ctrl-f4\")\n    def tab_next():",
        "detail": "apps.visualstudio.visual_studio_win",
        "documentation": {}
    },
    {
        "label": "NotSet",
        "kind": 6,
        "importPath": "apps.vscode.command_client.command_client",
        "description": "apps.vscode.command_client.command_client",
        "peekOfCode": "class NotSet:\n    def __repr__(self):\n        return \"<argument not set>\"\nclass NoFileServerException(Exception):\n    pass\ndef write_json_exclusive(path: Path, body: Any):\n    \"\"\"Writes jsonified object to file, failing if the file already exists\n    Args:\n        path (Path): The path of the file to write\n        body (Any): The object to convert to json and write",
        "detail": "apps.vscode.command_client.command_client",
        "documentation": {}
    },
    {
        "label": "NoFileServerException",
        "kind": 6,
        "importPath": "apps.vscode.command_client.command_client",
        "description": "apps.vscode.command_client.command_client",
        "peekOfCode": "class NoFileServerException(Exception):\n    pass\ndef write_json_exclusive(path: Path, body: Any):\n    \"\"\"Writes jsonified object to file, failing if the file already exists\n    Args:\n        path (Path): The path of the file to write\n        body (Any): The object to convert to json and write\n    \"\"\"\n    with path.open(\"x\") as out_file:\n        out_file.write(json.dumps(body))",
        "detail": "apps.vscode.command_client.command_client",
        "documentation": {}
    },
    {
        "label": "Request",
        "kind": 6,
        "importPath": "apps.vscode.command_client.command_client",
        "description": "apps.vscode.command_client.command_client",
        "peekOfCode": "class Request:\n    command_id: str\n    args: list[Any]\n    wait_for_finish: bool\n    return_command_output: bool\n    uuid: str\n    def to_dict(self):\n        return {\n            \"commandId\": self.command_id,\n            \"args\": self.args,",
        "detail": "apps.vscode.command_client.command_client",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "apps.vscode.command_client.command_client",
        "description": "apps.vscode.command_client.command_client",
        "peekOfCode": "class Actions:\n    def run_rpc_command(\n        command_id: str,\n        arg1: Any = NotSet,\n        arg2: Any = NotSet,\n        arg3: Any = NotSet,\n        arg4: Any = NotSet,\n        arg5: Any = NotSet,\n    ):\n        \"\"\"Execute command via RPC.\"\"\"",
        "detail": "apps.vscode.command_client.command_client",
        "documentation": {}
    },
    {
        "label": "MacUserActions",
        "kind": 6,
        "importPath": "apps.vscode.command_client.command_client",
        "description": "apps.vscode.command_client.command_client",
        "peekOfCode": "class MacUserActions:\n    def trigger_command_server_command_execution():\n        actions.key(\"cmd-shift-f17\")\n@linux_ctx.action_class(\"user\")\nclass LinuxUserActions:\n    def trigger_command_server_command_execution():\n        actions.key(\"ctrl-shift-alt-p\")\n@ctx.action_class(\"user\")\nclass UserActions:\n    def emit_pre_phrase_signal():",
        "detail": "apps.vscode.command_client.command_client",
        "documentation": {}
    },
    {
        "label": "LinuxUserActions",
        "kind": 6,
        "importPath": "apps.vscode.command_client.command_client",
        "description": "apps.vscode.command_client.command_client",
        "peekOfCode": "class LinuxUserActions:\n    def trigger_command_server_command_execution():\n        actions.key(\"ctrl-shift-alt-p\")\n@ctx.action_class(\"user\")\nclass UserActions:\n    def emit_pre_phrase_signal():\n        get_signal_path(\"prePhrase\").touch()\n        return True\nclass MissingCommunicationDir(Exception):\n    pass",
        "detail": "apps.vscode.command_client.command_client",
        "documentation": {}
    },
    {
        "label": "UserActions",
        "kind": 6,
        "importPath": "apps.vscode.command_client.command_client",
        "description": "apps.vscode.command_client.command_client",
        "peekOfCode": "class UserActions:\n    def emit_pre_phrase_signal():\n        get_signal_path(\"prePhrase\").touch()\n        return True\nclass MissingCommunicationDir(Exception):\n    pass\ndef get_signal_path(name: str) -> Path:\n    \"\"\"\n    Get the path to a signal in the signal subdirectory.\n    Args:",
        "detail": "apps.vscode.command_client.command_client",
        "documentation": {}
    },
    {
        "label": "MissingCommunicationDir",
        "kind": 6,
        "importPath": "apps.vscode.command_client.command_client",
        "description": "apps.vscode.command_client.command_client",
        "peekOfCode": "class MissingCommunicationDir(Exception):\n    pass\ndef get_signal_path(name: str) -> Path:\n    \"\"\"\n    Get the path to a signal in the signal subdirectory.\n    Args:\n        name (str): The name of the signal\n    Returns:\n        Path: The signal path\n    \"\"\"",
        "detail": "apps.vscode.command_client.command_client",
        "documentation": {}
    },
    {
        "label": "write_json_exclusive",
        "kind": 2,
        "importPath": "apps.vscode.command_client.command_client",
        "description": "apps.vscode.command_client.command_client",
        "peekOfCode": "def write_json_exclusive(path: Path, body: Any):\n    \"\"\"Writes jsonified object to file, failing if the file already exists\n    Args:\n        path (Path): The path of the file to write\n        body (Any): The object to convert to json and write\n    \"\"\"\n    with path.open(\"x\") as out_file:\n        out_file.write(json.dumps(body))\n@dataclass\nclass Request:",
        "detail": "apps.vscode.command_client.command_client",
        "documentation": {}
    },
    {
        "label": "write_request",
        "kind": 2,
        "importPath": "apps.vscode.command_client.command_client",
        "description": "apps.vscode.command_client.command_client",
        "peekOfCode": "def write_request(request: Request, path: Path):\n    \"\"\"Converts the given request to json and writes it to the file, failing if\n    the file already exists unless it is stale in which case it replaces it\n    Args:\n        request (Request): The request to serialize\n        path (Path): The path to write to\n    Raises:\n        Exception: If another process has an active request file\n    \"\"\"\n    try:",
        "detail": "apps.vscode.command_client.command_client",
        "documentation": {}
    },
    {
        "label": "handle_existing_request_file",
        "kind": 2,
        "importPath": "apps.vscode.command_client.command_client",
        "description": "apps.vscode.command_client.command_client",
        "peekOfCode": "def handle_existing_request_file(path):\n    stats = path.stat()\n    modified_time_ms = stats.st_mtime_ns / 1e6\n    current_time_ms = time.time() * 1e3\n    time_difference_ms = abs(modified_time_ms - current_time_ms)\n    if time_difference_ms < STALE_TIMEOUT_MS:\n        raise Exception(\n            \"Found recent request file; another Talon process is probably running\"\n        )\n    else:",
        "detail": "apps.vscode.command_client.command_client",
        "documentation": {}
    },
    {
        "label": "run_command",
        "kind": 2,
        "importPath": "apps.vscode.command_client.command_client",
        "description": "apps.vscode.command_client.command_client",
        "peekOfCode": "def run_command(\n    command_id: str,\n    *args,\n    wait_for_finish: bool = False,\n    return_command_output: bool = False,\n):\n    \"\"\"Runs a command, using command server if available\n    Args:\n        command_id (str): The ID of the command to run.\n        args: The arguments to the command.",
        "detail": "apps.vscode.command_client.command_client",
        "documentation": {}
    },
    {
        "label": "get_communication_dir_path",
        "kind": 2,
        "importPath": "apps.vscode.command_client.command_client",
        "description": "apps.vscode.command_client.command_client",
        "peekOfCode": "def get_communication_dir_path():\n    \"\"\"Returns directory that is used by command-server for communication\n    Returns:\n        Path: The path to the communication dir\n    \"\"\"\n    suffix = \"\"\n    # NB: We don't suffix on Windows, because the temp dir is user-specific\n    # anyways\n    if hasattr(os, \"getuid\"):\n        suffix = f\"-{os.getuid()}\"",
        "detail": "apps.vscode.command_client.command_client",
        "documentation": {}
    },
    {
        "label": "robust_unlink",
        "kind": 2,
        "importPath": "apps.vscode.command_client.command_client",
        "description": "apps.vscode.command_client.command_client",
        "peekOfCode": "def robust_unlink(path: Path):\n    \"\"\"Unlink the given file if it exists, and if we're on windows and it is\n    currently in use, just rename it\n    Args:\n        path (Path): The path to unlink\n    \"\"\"\n    try:\n        path.unlink(missing_ok=True)\n    except OSError as e:\n        if hasattr(e, \"winerror\") and e.winerror == 32:",
        "detail": "apps.vscode.command_client.command_client",
        "documentation": {}
    },
    {
        "label": "read_json_with_timeout",
        "kind": 2,
        "importPath": "apps.vscode.command_client.command_client",
        "description": "apps.vscode.command_client.command_client",
        "peekOfCode": "def read_json_with_timeout(path: str) -> Any:\n    \"\"\"Repeatedly tries to read a json object from the given path, waiting\n    until there is a trailing new line indicating that the write is complete\n    Args:\n        path (str): The path to read from\n    Raises:\n        Exception: If we timeout waiting for a response\n    Returns:\n        Any: The json-decoded contents of the file\n    \"\"\"",
        "detail": "apps.vscode.command_client.command_client",
        "documentation": {}
    },
    {
        "label": "get_signal_path",
        "kind": 2,
        "importPath": "apps.vscode.command_client.command_client",
        "description": "apps.vscode.command_client.command_client",
        "peekOfCode": "def get_signal_path(name: str) -> Path:\n    \"\"\"\n    Get the path to a signal in the signal subdirectory.\n    Args:\n        name (str): The name of the signal\n    Returns:\n        Path: The signal path\n    \"\"\"\n    communication_dir_path = get_communication_dir_path()\n    if not communication_dir_path.exists():",
        "detail": "apps.vscode.command_client.command_client",
        "documentation": {}
    },
    {
        "label": "pre_phrase",
        "kind": 2,
        "importPath": "apps.vscode.command_client.command_client",
        "description": "apps.vscode.command_client.command_client",
        "peekOfCode": "def pre_phrase(_: Any):\n    try:\n        global did_emit_pre_phrase_signal\n        did_emit_pre_phrase_signal = actions.user.emit_pre_phrase_signal()\n    except MissingCommunicationDir:\n        pass\ndef post_phrase(_: Any):\n    global did_emit_pre_phrase_signal\n    did_emit_pre_phrase_signal = False\nspeech_system.register(\"pre:phrase\", pre_phrase)",
        "detail": "apps.vscode.command_client.command_client",
        "documentation": {}
    },
    {
        "label": "post_phrase",
        "kind": 2,
        "importPath": "apps.vscode.command_client.command_client",
        "description": "apps.vscode.command_client.command_client",
        "peekOfCode": "def post_phrase(_: Any):\n    global did_emit_pre_phrase_signal\n    did_emit_pre_phrase_signal = False\nspeech_system.register(\"pre:phrase\", pre_phrase)\nspeech_system.register(\"post:phrase\", post_phrase)",
        "detail": "apps.vscode.command_client.command_client",
        "documentation": {}
    },
    {
        "label": "STALE_TIMEOUT_MS",
        "kind": 5,
        "importPath": "apps.vscode.command_client.command_client",
        "description": "apps.vscode.command_client.command_client",
        "peekOfCode": "STALE_TIMEOUT_MS = 60_000\n# The amount of time to wait for application to perform a command, in seconds\nRPC_COMMAND_TIMEOUT_SECONDS = 3.0\n# When doing exponential back off waiting for application to perform a command, how\n# long to sleep the first time\nMINIMUM_SLEEP_TIME_SECONDS = 0.0005\n# Indicates whether a pre-phrase signal was emitted during the course of the\n# current phrase\ndid_emit_pre_phrase_signal = False\nmod = Module()",
        "detail": "apps.vscode.command_client.command_client",
        "documentation": {}
    },
    {
        "label": "RPC_COMMAND_TIMEOUT_SECONDS",
        "kind": 5,
        "importPath": "apps.vscode.command_client.command_client",
        "description": "apps.vscode.command_client.command_client",
        "peekOfCode": "RPC_COMMAND_TIMEOUT_SECONDS = 3.0\n# When doing exponential back off waiting for application to perform a command, how\n# long to sleep the first time\nMINIMUM_SLEEP_TIME_SECONDS = 0.0005\n# Indicates whether a pre-phrase signal was emitted during the course of the\n# current phrase\ndid_emit_pre_phrase_signal = False\nmod = Module()\nctx = Context()\nmac_ctx = Context()",
        "detail": "apps.vscode.command_client.command_client",
        "documentation": {}
    },
    {
        "label": "MINIMUM_SLEEP_TIME_SECONDS",
        "kind": 5,
        "importPath": "apps.vscode.command_client.command_client",
        "description": "apps.vscode.command_client.command_client",
        "peekOfCode": "MINIMUM_SLEEP_TIME_SECONDS = 0.0005\n# Indicates whether a pre-phrase signal was emitted during the course of the\n# current phrase\ndid_emit_pre_phrase_signal = False\nmod = Module()\nctx = Context()\nmac_ctx = Context()\nlinux_ctx = Context()\nctx.matches = r\"\"\"\ntag: user.command_client",
        "detail": "apps.vscode.command_client.command_client",
        "documentation": {}
    },
    {
        "label": "did_emit_pre_phrase_signal",
        "kind": 5,
        "importPath": "apps.vscode.command_client.command_client",
        "description": "apps.vscode.command_client.command_client",
        "peekOfCode": "did_emit_pre_phrase_signal = False\nmod = Module()\nctx = Context()\nmac_ctx = Context()\nlinux_ctx = Context()\nctx.matches = r\"\"\"\ntag: user.command_client\n\"\"\"\nmac_ctx.matches = r\"\"\"\nos: mac",
        "detail": "apps.vscode.command_client.command_client",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "apps.vscode.command_client.command_client",
        "description": "apps.vscode.command_client.command_client",
        "peekOfCode": "mod = Module()\nctx = Context()\nmac_ctx = Context()\nlinux_ctx = Context()\nctx.matches = r\"\"\"\ntag: user.command_client\n\"\"\"\nmac_ctx.matches = r\"\"\"\nos: mac\napp: vscode",
        "detail": "apps.vscode.command_client.command_client",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.vscode.command_client.command_client",
        "description": "apps.vscode.command_client.command_client",
        "peekOfCode": "ctx = Context()\nmac_ctx = Context()\nlinux_ctx = Context()\nctx.matches = r\"\"\"\ntag: user.command_client\n\"\"\"\nmac_ctx.matches = r\"\"\"\nos: mac\napp: vscode\n\"\"\"",
        "detail": "apps.vscode.command_client.command_client",
        "documentation": {}
    },
    {
        "label": "mac_ctx",
        "kind": 5,
        "importPath": "apps.vscode.command_client.command_client",
        "description": "apps.vscode.command_client.command_client",
        "peekOfCode": "mac_ctx = Context()\nlinux_ctx = Context()\nctx.matches = r\"\"\"\ntag: user.command_client\n\"\"\"\nmac_ctx.matches = r\"\"\"\nos: mac\napp: vscode\n\"\"\"\nlinux_ctx.matches = r\"\"\"",
        "detail": "apps.vscode.command_client.command_client",
        "documentation": {}
    },
    {
        "label": "linux_ctx",
        "kind": 5,
        "importPath": "apps.vscode.command_client.command_client",
        "description": "apps.vscode.command_client.command_client",
        "peekOfCode": "linux_ctx = Context()\nctx.matches = r\"\"\"\ntag: user.command_client\n\"\"\"\nmac_ctx.matches = r\"\"\"\nos: mac\napp: vscode\n\"\"\"\nlinux_ctx.matches = r\"\"\"\nos: linux",
        "detail": "apps.vscode.command_client.command_client",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "apps.vscode.command_client.command_client",
        "description": "apps.vscode.command_client.command_client",
        "peekOfCode": "ctx.matches = r\"\"\"\ntag: user.command_client\n\"\"\"\nmac_ctx.matches = r\"\"\"\nos: mac\napp: vscode\n\"\"\"\nlinux_ctx.matches = r\"\"\"\nos: linux\napp: vscode",
        "detail": "apps.vscode.command_client.command_client",
        "documentation": {}
    },
    {
        "label": "mac_ctx.matches",
        "kind": 5,
        "importPath": "apps.vscode.command_client.command_client",
        "description": "apps.vscode.command_client.command_client",
        "peekOfCode": "mac_ctx.matches = r\"\"\"\nos: mac\napp: vscode\n\"\"\"\nlinux_ctx.matches = r\"\"\"\nos: linux\napp: vscode\n\"\"\"\nclass NotSet:\n    def __repr__(self):",
        "detail": "apps.vscode.command_client.command_client",
        "documentation": {}
    },
    {
        "label": "linux_ctx.matches",
        "kind": 5,
        "importPath": "apps.vscode.command_client.command_client",
        "description": "apps.vscode.command_client.command_client",
        "peekOfCode": "linux_ctx.matches = r\"\"\"\nos: linux\napp: vscode\n\"\"\"\nclass NotSet:\n    def __repr__(self):\n        return \"<argument not set>\"\nclass NoFileServerException(Exception):\n    pass\ndef write_json_exclusive(path: Path, body: Any):",
        "detail": "apps.vscode.command_client.command_client",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "apps.vscode.command_client.command_client_tag",
        "description": "apps.vscode.command_client.command_client_tag",
        "peekOfCode": "class Actions:\n    def command_server_directory() -> str:\n        \"\"\"\n        The dirctory which contains the files required for communication between\n        the application and Talon. This is the only function which absolutely\n        must be implemented for any application using the command-client.  Each\n        application that supports file-based RPC should use its own directory\n        name.  Note that this action should only return a name; the parent\n        directory is determined by the core command client code.\n        \"\"\"",
        "detail": "apps.vscode.command_client.command_client_tag",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "apps.vscode.command_client.command_client_tag",
        "description": "apps.vscode.command_client.command_client_tag",
        "peekOfCode": "mod = Module()\nmod.tag(\n    \"command_client\", desc=\"For applications which implement file-based RPC with Talon\"\n)\n@mod.action_class\nclass Actions:\n    def command_server_directory() -> str:\n        \"\"\"\n        The dirctory which contains the files required for communication between\n        the application and Talon. This is the only function which absolutely",
        "detail": "apps.vscode.command_client.command_client_tag",
        "documentation": {}
    },
    {
        "label": "VisualStudioActions",
        "kind": 6,
        "importPath": "apps.vscode.command_client.visual_studio",
        "description": "apps.vscode.command_client.visual_studio",
        "peekOfCode": "class VisualStudioActions:\n    def command_server_directory() -> str:\n        return \"visual-studio-command-server\"",
        "detail": "apps.vscode.command_client.visual_studio",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.vscode.command_client.visual_studio",
        "description": "apps.vscode.command_client.visual_studio",
        "peekOfCode": "ctx = Context()\nctx.matches = r\"\"\"\napp: visual_studio\n\"\"\"\nctx.tags = [\"user.command_client\"]\n@ctx.action_class(\"user\")\nclass VisualStudioActions:\n    def command_server_directory() -> str:\n        return \"visual-studio-command-server\"",
        "detail": "apps.vscode.command_client.visual_studio",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "apps.vscode.command_client.visual_studio",
        "description": "apps.vscode.command_client.visual_studio",
        "peekOfCode": "ctx.matches = r\"\"\"\napp: visual_studio\n\"\"\"\nctx.tags = [\"user.command_client\"]\n@ctx.action_class(\"user\")\nclass VisualStudioActions:\n    def command_server_directory() -> str:\n        return \"visual-studio-command-server\"",
        "detail": "apps.vscode.command_client.visual_studio",
        "documentation": {}
    },
    {
        "label": "ctx.tags",
        "kind": 5,
        "importPath": "apps.vscode.command_client.visual_studio",
        "description": "apps.vscode.command_client.visual_studio",
        "peekOfCode": "ctx.tags = [\"user.command_client\"]\n@ctx.action_class(\"user\")\nclass VisualStudioActions:\n    def command_server_directory() -> str:\n        return \"visual-studio-command-server\"",
        "detail": "apps.vscode.command_client.visual_studio",
        "documentation": {}
    },
    {
        "label": "VsCodeAction",
        "kind": 6,
        "importPath": "apps.vscode.command_client.vscode",
        "description": "apps.vscode.command_client.vscode",
        "peekOfCode": "class VsCodeAction:\n    def command_server_directory() -> str:\n        return \"vscode-command-server\"\n@mod.action_class\nclass Actions:\n    def vscode(command_id: str):\n        \"\"\"Execute command via vscode command server, if available, or fallback\n        to command palette.\"\"\"\n        command_server_or_client_fallback(command_id, False)\n    def vscode_and_wait(command_id: str):",
        "detail": "apps.vscode.command_client.vscode",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "apps.vscode.command_client.vscode",
        "description": "apps.vscode.command_client.vscode",
        "peekOfCode": "class Actions:\n    def vscode(command_id: str):\n        \"\"\"Execute command via vscode command server, if available, or fallback\n        to command palette.\"\"\"\n        command_server_or_client_fallback(command_id, False)\n    def vscode_and_wait(command_id: str):\n        \"\"\"Execute command via vscode command server, if available, and wait\n        for command to finish.  If command server not available, uses command\n        palette and doesn't guarantee that it will wait for command to\n        finish.\"\"\"",
        "detail": "apps.vscode.command_client.vscode",
        "documentation": {}
    },
    {
        "label": "command_server_or_client_fallback",
        "kind": 2,
        "importPath": "apps.vscode.command_client.vscode",
        "description": "apps.vscode.command_client.vscode",
        "peekOfCode": "def command_server_or_client_fallback(command_id: str, wait: bool):\n    \"\"\"Execute command via command server, falling back to command palette if directory not present.\"\"\"\n    try:\n        run_command(command_id, wait_for_finish=wait)\n    except NoFileServerException:\n        actions.user.command_palette()\n        actions.user.paste(command_id)\n        actions.key(\"enter\")\n        print(\n            \"Command server directory not found; falling back to command palette.  For better performance, install the VSCode extension for Talon: https://marketplace.visualstudio.com/items?itemName=pokey.talon\"",
        "detail": "apps.vscode.command_client.vscode",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.vscode.command_client.vscode",
        "description": "apps.vscode.command_client.vscode",
        "peekOfCode": "ctx = Context()\nctx.matches = r\"\"\"\napp: vscode\n\"\"\"\nctx.tags = [\"user.command_client\"]\nmod = Module()\ndef command_server_or_client_fallback(command_id: str, wait: bool):\n    \"\"\"Execute command via command server, falling back to command palette if directory not present.\"\"\"\n    try:\n        run_command(command_id, wait_for_finish=wait)",
        "detail": "apps.vscode.command_client.vscode",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "apps.vscode.command_client.vscode",
        "description": "apps.vscode.command_client.vscode",
        "peekOfCode": "ctx.matches = r\"\"\"\napp: vscode\n\"\"\"\nctx.tags = [\"user.command_client\"]\nmod = Module()\ndef command_server_or_client_fallback(command_id: str, wait: bool):\n    \"\"\"Execute command via command server, falling back to command palette if directory not present.\"\"\"\n    try:\n        run_command(command_id, wait_for_finish=wait)\n    except NoFileServerException:",
        "detail": "apps.vscode.command_client.vscode",
        "documentation": {}
    },
    {
        "label": "ctx.tags",
        "kind": 5,
        "importPath": "apps.vscode.command_client.vscode",
        "description": "apps.vscode.command_client.vscode",
        "peekOfCode": "ctx.tags = [\"user.command_client\"]\nmod = Module()\ndef command_server_or_client_fallback(command_id: str, wait: bool):\n    \"\"\"Execute command via command server, falling back to command palette if directory not present.\"\"\"\n    try:\n        run_command(command_id, wait_for_finish=wait)\n    except NoFileServerException:\n        actions.user.command_palette()\n        actions.user.paste(command_id)\n        actions.key(\"enter\")",
        "detail": "apps.vscode.command_client.vscode",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "apps.vscode.command_client.vscode",
        "description": "apps.vscode.command_client.vscode",
        "peekOfCode": "mod = Module()\ndef command_server_or_client_fallback(command_id: str, wait: bool):\n    \"\"\"Execute command via command server, falling back to command palette if directory not present.\"\"\"\n    try:\n        run_command(command_id, wait_for_finish=wait)\n    except NoFileServerException:\n        actions.user.command_palette()\n        actions.user.paste(command_id)\n        actions.key(\"enter\")\n        print(",
        "detail": "apps.vscode.command_client.vscode",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.vscode.snippets.csharp_snippets",
        "description": "apps.vscode.snippets.csharp_snippets",
        "peekOfCode": "ctx = Context()\nctx.matches = r\"\"\"\napp: vscode\ntag: user.csharp\n\"\"\"\n# short name -> ide clip name\nctx.lists[\"user.snippets\"] = {\n    \"class\": \"class\",\n    \"else\": \"else\",\n    \"for each\": \"foreach\",",
        "detail": "apps.vscode.snippets.csharp_snippets",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "apps.vscode.snippets.csharp_snippets",
        "description": "apps.vscode.snippets.csharp_snippets",
        "peekOfCode": "ctx.matches = r\"\"\"\napp: vscode\ntag: user.csharp\n\"\"\"\n# short name -> ide clip name\nctx.lists[\"user.snippets\"] = {\n    \"class\": \"class\",\n    \"else\": \"else\",\n    \"for each\": \"foreach\",\n    \"if\": \"if\",",
        "detail": "apps.vscode.snippets.csharp_snippets",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"user.snippets\"]",
        "kind": 5,
        "importPath": "apps.vscode.snippets.csharp_snippets",
        "description": "apps.vscode.snippets.csharp_snippets",
        "peekOfCode": "ctx.lists[\"user.snippets\"] = {\n    \"class\": \"class\",\n    \"else\": \"else\",\n    \"for each\": \"foreach\",\n    \"if\": \"if\",\n    \"try except\": \"try\",\n    \"try finally\": \"tryf\",\n    \"while\": \"while\",\n    # \"class funky\": \"def(class method)\",\n    # \"class static funky\": \"def(class static method)\",",
        "detail": "apps.vscode.snippets.csharp_snippets",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.vscode.snippets.python_snippets",
        "description": "apps.vscode.snippets.python_snippets",
        "peekOfCode": "ctx = Context()\nctx.matches = r\"\"\"\napp: vscode\ntag: user.python\n\"\"\"\n# short name -> ide clip name\nctx.lists[\"user.snippets\"] = {\n    \"class funky\": \"def(class method)\",\n    \"class static funky\": \"def(class static method)\",\n    \"class\": \"class\",",
        "detail": "apps.vscode.snippets.python_snippets",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "apps.vscode.snippets.python_snippets",
        "description": "apps.vscode.snippets.python_snippets",
        "peekOfCode": "ctx.matches = r\"\"\"\napp: vscode\ntag: user.python\n\"\"\"\n# short name -> ide clip name\nctx.lists[\"user.snippets\"] = {\n    \"class funky\": \"def(class method)\",\n    \"class static funky\": \"def(class static method)\",\n    \"class\": \"class\",\n    \"else if\": \"elif\",",
        "detail": "apps.vscode.snippets.python_snippets",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"user.snippets\"]",
        "kind": 5,
        "importPath": "apps.vscode.snippets.python_snippets",
        "description": "apps.vscode.snippets.python_snippets",
        "peekOfCode": "ctx.lists[\"user.snippets\"] = {\n    \"class funky\": \"def(class method)\",\n    \"class static funky\": \"def(class static method)\",\n    \"class\": \"class\",\n    \"else if\": \"elif\",\n    \"for\": \"for\",\n    \"funky\": \"def\",\n    \"if else\": \"if/else\",\n    \"if\": \"if\",\n    \"lambda\": \"lambda\",",
        "detail": "apps.vscode.snippets.python_snippets",
        "documentation": {}
    },
    {
        "label": "AppActions",
        "kind": 6,
        "importPath": "apps.vscode.vscode",
        "description": "apps.vscode.vscode",
        "peekOfCode": "class AppActions:\n    # talon app actions\n    def tab_open():\n        actions.user.vscode(\"workbench.action.files.newUntitledFile\")\n    def tab_close():\n        actions.user.vscode(\"workbench.action.closeActiveEditor\")\n    def tab_next():\n        actions.user.vscode(\"workbench.action.nextEditorInGroup\")\n    def tab_previous():\n        actions.user.vscode(\"workbench.action.previousEditorInGroup\")",
        "detail": "apps.vscode.vscode",
        "documentation": {}
    },
    {
        "label": "CodeActions",
        "kind": 6,
        "importPath": "apps.vscode.vscode",
        "description": "apps.vscode.vscode",
        "peekOfCode": "class CodeActions:\n    # talon code actions\n    def toggle_comment():\n        actions.user.vscode(\"editor.action.commentLine\")\n@ctx.action_class(\"edit\")\nclass EditActions:\n    # talon edit actions\n    def indent_more():\n        actions.user.vscode(\"editor.action.indentLines\")\n    def indent_less():",
        "detail": "apps.vscode.vscode",
        "documentation": {}
    },
    {
        "label": "EditActions",
        "kind": 6,
        "importPath": "apps.vscode.vscode",
        "description": "apps.vscode.vscode",
        "peekOfCode": "class EditActions:\n    # talon edit actions\n    def indent_more():\n        actions.user.vscode(\"editor.action.indentLines\")\n    def indent_less():\n        actions.user.vscode(\"editor.action.outdentLines\")\n    def save_all():\n        actions.user.vscode(\"workbench.action.files.saveAll\")\n    def find(text=None):\n        if is_mac:",
        "detail": "apps.vscode.vscode",
        "documentation": {}
    },
    {
        "label": "WinActions",
        "kind": 6,
        "importPath": "apps.vscode.vscode",
        "description": "apps.vscode.vscode",
        "peekOfCode": "class WinActions:\n    def filename():\n        title = actions.win.title()\n        # this doesn't seem to be necessary on VSCode for Mac\n        # if title == \"\":\n        #    title = ui.active_window().doc\n        if is_mac:\n            result = title.split(\" — \")[0]\n        else:\n            result = title.split(\" - \")[0]",
        "detail": "apps.vscode.vscode",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "apps.vscode.vscode",
        "description": "apps.vscode.vscode",
        "peekOfCode": "class Actions:\n    def vscode_terminal(number: int):\n        \"\"\"Activate a terminal by number\"\"\"\n        actions.user.vscode(f\"workbench.action.terminal.focusAtIndex{number}\")\n    def command_palette():\n        \"\"\"Show command palette\"\"\"\n        actions.key(\"ctrl-shift-p\")\n@mac_ctx.action_class(\"user\")\nclass MacUserActions:\n    def command_palette():",
        "detail": "apps.vscode.vscode",
        "documentation": {}
    },
    {
        "label": "MacUserActions",
        "kind": 6,
        "importPath": "apps.vscode.vscode",
        "description": "apps.vscode.vscode",
        "peekOfCode": "class MacUserActions:\n    def command_palette():\n        actions.key(\"cmd-shift-p\")\n@ctx.action_class(\"user\")\nclass UserActions:\n    # splits.py support begin\n    def split_clear_all():\n        actions.user.vscode(\"workbench.action.editorLayoutSingle\")\n    def split_clear():\n        actions.user.vscode(\"workbench.action.joinTwoGroups\")",
        "detail": "apps.vscode.vscode",
        "documentation": {}
    },
    {
        "label": "UserActions",
        "kind": 6,
        "importPath": "apps.vscode.vscode",
        "description": "apps.vscode.vscode",
        "peekOfCode": "class UserActions:\n    # splits.py support begin\n    def split_clear_all():\n        actions.user.vscode(\"workbench.action.editorLayoutSingle\")\n    def split_clear():\n        actions.user.vscode(\"workbench.action.joinTwoGroups\")\n    def split_flip():\n        actions.user.vscode(\"workbench.action.toggleEditorGroupLayout\")\n    def split_maximize():\n        actions.user.vscode(\"workbench.action.maximizeEditor\")",
        "detail": "apps.vscode.vscode",
        "documentation": {}
    },
    {
        "label": "is_mac",
        "kind": 5,
        "importPath": "apps.vscode.vscode",
        "description": "apps.vscode.vscode",
        "peekOfCode": "is_mac = app.platform == \"mac\"\nctx = Context()\nmac_ctx = Context()\nmod = Module()\nmod.apps.vscode = \"\"\"\nos: mac\nand app.bundle: com.microsoft.VSCode\nos: mac\nand app.bundle: com.microsoft.VSCodeInsiders\nos: mac",
        "detail": "apps.vscode.vscode",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.vscode.vscode",
        "description": "apps.vscode.vscode",
        "peekOfCode": "ctx = Context()\nmac_ctx = Context()\nmod = Module()\nmod.apps.vscode = \"\"\"\nos: mac\nand app.bundle: com.microsoft.VSCode\nos: mac\nand app.bundle: com.microsoft.VSCodeInsiders\nos: mac\nand app.bundle: com.visualstudio.code.oss",
        "detail": "apps.vscode.vscode",
        "documentation": {}
    },
    {
        "label": "mac_ctx",
        "kind": 5,
        "importPath": "apps.vscode.vscode",
        "description": "apps.vscode.vscode",
        "peekOfCode": "mac_ctx = Context()\nmod = Module()\nmod.apps.vscode = \"\"\"\nos: mac\nand app.bundle: com.microsoft.VSCode\nos: mac\nand app.bundle: com.microsoft.VSCodeInsiders\nos: mac\nand app.bundle: com.visualstudio.code.oss\n\"\"\"",
        "detail": "apps.vscode.vscode",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "apps.vscode.vscode",
        "description": "apps.vscode.vscode",
        "peekOfCode": "mod = Module()\nmod.apps.vscode = \"\"\"\nos: mac\nand app.bundle: com.microsoft.VSCode\nos: mac\nand app.bundle: com.microsoft.VSCodeInsiders\nos: mac\nand app.bundle: com.visualstudio.code.oss\n\"\"\"\nmod.apps.vscode = \"\"\"",
        "detail": "apps.vscode.vscode",
        "documentation": {}
    },
    {
        "label": "mod.apps.vscode",
        "kind": 5,
        "importPath": "apps.vscode.vscode",
        "description": "apps.vscode.vscode",
        "peekOfCode": "mod.apps.vscode = \"\"\"\nos: mac\nand app.bundle: com.microsoft.VSCode\nos: mac\nand app.bundle: com.microsoft.VSCodeInsiders\nos: mac\nand app.bundle: com.visualstudio.code.oss\n\"\"\"\nmod.apps.vscode = \"\"\"\nos: linux",
        "detail": "apps.vscode.vscode",
        "documentation": {}
    },
    {
        "label": "mod.apps.vscode",
        "kind": 5,
        "importPath": "apps.vscode.vscode",
        "description": "apps.vscode.vscode",
        "peekOfCode": "mod.apps.vscode = \"\"\"\nos: linux\nand app.name: Code\nos: linux\nand app.name: code-oss\nos: linux\nand app.name: code-insiders\nos: linux\nand app.name: VSCodium\nos: linux",
        "detail": "apps.vscode.vscode",
        "documentation": {}
    },
    {
        "label": "mod.apps.vscode",
        "kind": 5,
        "importPath": "apps.vscode.vscode",
        "description": "apps.vscode.vscode",
        "peekOfCode": "mod.apps.vscode = \"\"\"\nos: windows\nand app.name: Visual Studio Code\nos: windows\nand app.name: Visual Studio Code Insiders\nos: windows\nand app.name: Visual Studio Code - Insiders\nos: windows\nand app.exe: Code.exe\nos: windows",
        "detail": "apps.vscode.vscode",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "apps.vscode.vscode",
        "description": "apps.vscode.vscode",
        "peekOfCode": "ctx.matches = r\"\"\"\napp: vscode\n\"\"\"\nmac_ctx.matches = r\"\"\"\nos: mac\napp: vscode\n\"\"\"\n@ctx.action_class(\"app\")\nclass AppActions:\n    # talon app actions",
        "detail": "apps.vscode.vscode",
        "documentation": {}
    },
    {
        "label": "mac_ctx.matches",
        "kind": 5,
        "importPath": "apps.vscode.vscode",
        "description": "apps.vscode.vscode",
        "peekOfCode": "mac_ctx.matches = r\"\"\"\nos: mac\napp: vscode\n\"\"\"\n@ctx.action_class(\"app\")\nclass AppActions:\n    # talon app actions\n    def tab_open():\n        actions.user.vscode(\"workbench.action.files.newUntitledFile\")\n    def tab_close():",
        "detail": "apps.vscode.vscode",
        "documentation": {}
    },
    {
        "label": "UserActions",
        "kind": 6,
        "importPath": "apps.windbg.windbg",
        "description": "apps.windbg.windbg",
        "peekOfCode": "class UserActions:\n    ##\n    # Generic debugger actions\n    ##\n    # Code execution\n    def debugger_step_into():\n        actions.key(\"f8\")\n    def debugger_step_over():\n        actions.key(\"f10\")\n        # XXX -",
        "detail": "apps.windbg.windbg",
        "documentation": {}
    },
    {
        "label": "windows_dlls",
        "kind": 2,
        "importPath": "apps.windbg.windbg",
        "description": "apps.windbg.windbg",
        "peekOfCode": "def windows_dlls(m) -> str:\n    \"Return an register\"\n    return m.windows_dlls\n# XXX - trigger alt-1 to hit command window for necessary commands?\n# ex: user.windbg_insert_in_cmd()\n#    edit.left()\n@ctx.action_class(\"user\")\nclass UserActions:\n    ##\n    # Generic debugger actions",
        "detail": "apps.windbg.windbg",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "apps.windbg.windbg",
        "description": "apps.windbg.windbg",
        "peekOfCode": "mod = Module()\nctx = Context()\nctx.matches = r\"\"\"\nmode: user.windbg\n\"\"\"\nctx.lists[\"self.windows_dlls\"] = {\n    \"core\": \"ntdll\",\n    \"en tea\": \"ntdll\",\n    \"user\": \"user32\",\n}",
        "detail": "apps.windbg.windbg",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.windbg.windbg",
        "description": "apps.windbg.windbg",
        "peekOfCode": "ctx = Context()\nctx.matches = r\"\"\"\nmode: user.windbg\n\"\"\"\nctx.lists[\"self.windows_dlls\"] = {\n    \"core\": \"ntdll\",\n    \"en tea\": \"ntdll\",\n    \"user\": \"user32\",\n}\n@mod.capture(rule=\"{self.windows_dlls}\")",
        "detail": "apps.windbg.windbg",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "apps.windbg.windbg",
        "description": "apps.windbg.windbg",
        "peekOfCode": "ctx.matches = r\"\"\"\nmode: user.windbg\n\"\"\"\nctx.lists[\"self.windows_dlls\"] = {\n    \"core\": \"ntdll\",\n    \"en tea\": \"ntdll\",\n    \"user\": \"user32\",\n}\n@mod.capture(rule=\"{self.windows_dlls}\")\ndef windows_dlls(m) -> str:",
        "detail": "apps.windbg.windbg",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"self.windows_dlls\"]",
        "kind": 5,
        "importPath": "apps.windbg.windbg",
        "description": "apps.windbg.windbg",
        "peekOfCode": "ctx.lists[\"self.windows_dlls\"] = {\n    \"core\": \"ntdll\",\n    \"en tea\": \"ntdll\",\n    \"user\": \"user32\",\n}\n@mod.capture(rule=\"{self.windows_dlls}\")\ndef windows_dlls(m) -> str:\n    \"Return an register\"\n    return m.windows_dlls\n# XXX - trigger alt-1 to hit command window for necessary commands?",
        "detail": "apps.windbg.windbg",
        "documentation": {}
    },
    {
        "label": "UserActions",
        "kind": 6,
        "importPath": "apps.windows_command_processor.command_processor_actions_win",
        "description": "apps.windows_command_processor.command_processor_actions_win",
        "peekOfCode": "class UserActions:\n    def file_manager_refresh_title():\n        actions.insert(\"title Command Prompt: %CD%\")\n        actions.key(\"enter\")\n        # action(user.file_manager_go_back):\n        #    key(\"alt-left\")\n        # action(user.file_manager_go_forward):\n        #    key(\"alt-right\")\n    def file_manager_open_parent():\n        actions.insert(\"cd ..\")",
        "detail": "apps.windows_command_processor.command_processor_actions_win",
        "documentation": {}
    },
    {
        "label": "EditActions",
        "kind": 6,
        "importPath": "apps.windows_command_processor.command_processor_actions_win",
        "description": "apps.windows_command_processor.command_processor_actions_win",
        "peekOfCode": "class EditActions:\n    def delete_line():\n        actions.key(\"esc\")",
        "detail": "apps.windows_command_processor.command_processor_actions_win",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.windows_command_processor.command_processor_actions_win",
        "description": "apps.windows_command_processor.command_processor_actions_win",
        "peekOfCode": "ctx = Context()\nctx.matches = r\"\"\"\napp: windows_command_processor\napp: windows_terminal\nand win.title: /Command Prompt/\n\"\"\"\nctx.tags = [\"user.file_manager\", \"user.git\", \"user.kubectl\", \"terminal\"]\n@ctx.action_class(\"user\")\nclass UserActions:\n    def file_manager_refresh_title():",
        "detail": "apps.windows_command_processor.command_processor_actions_win",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "apps.windows_command_processor.command_processor_actions_win",
        "description": "apps.windows_command_processor.command_processor_actions_win",
        "peekOfCode": "ctx.matches = r\"\"\"\napp: windows_command_processor\napp: windows_terminal\nand win.title: /Command Prompt/\n\"\"\"\nctx.tags = [\"user.file_manager\", \"user.git\", \"user.kubectl\", \"terminal\"]\n@ctx.action_class(\"user\")\nclass UserActions:\n    def file_manager_refresh_title():\n        actions.insert(\"title Command Prompt: %CD%\")",
        "detail": "apps.windows_command_processor.command_processor_actions_win",
        "documentation": {}
    },
    {
        "label": "ctx.tags",
        "kind": 5,
        "importPath": "apps.windows_command_processor.command_processor_actions_win",
        "description": "apps.windows_command_processor.command_processor_actions_win",
        "peekOfCode": "ctx.tags = [\"user.file_manager\", \"user.git\", \"user.kubectl\", \"terminal\"]\n@ctx.action_class(\"user\")\nclass UserActions:\n    def file_manager_refresh_title():\n        actions.insert(\"title Command Prompt: %CD%\")\n        actions.key(\"enter\")\n        # action(user.file_manager_go_back):\n        #    key(\"alt-left\")\n        # action(user.file_manager_go_forward):\n        #    key(\"alt-right\")",
        "detail": "apps.windows_command_processor.command_processor_actions_win",
        "documentation": {}
    },
    {
        "label": "EditActions",
        "kind": 6,
        "importPath": "apps.windows_command_processor.command_processor_win",
        "description": "apps.windows_command_processor.command_processor_win",
        "peekOfCode": "class EditActions:\n    def delete_line():\n        actions.key(\"esc\")\n@ctx.action_class(\"user\")\nclass UserActions:\n    def file_manager_refresh_title():\n        actions.insert(\"title Command Prompt: %CD%\")\n        actions.key(\"enter\")\n        # action(user.file_manager_go_back):\n        #    key(\"alt-left\")",
        "detail": "apps.windows_command_processor.command_processor_win",
        "documentation": {}
    },
    {
        "label": "UserActions",
        "kind": 6,
        "importPath": "apps.windows_command_processor.command_processor_win",
        "description": "apps.windows_command_processor.command_processor_win",
        "peekOfCode": "class UserActions:\n    def file_manager_refresh_title():\n        actions.insert(\"title Command Prompt: %CD%\")\n        actions.key(\"enter\")\n        # action(user.file_manager_go_back):\n        #    key(\"alt-left\")\n        # action(user.file_manager_go_forward):\n        #    key(\"alt-right\")\n    def file_manager_open_parent():\n        actions.insert(\"cd ..\")",
        "detail": "apps.windows_command_processor.command_processor_win",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.windows_command_processor.command_processor_win",
        "description": "apps.windows_command_processor.command_processor_win",
        "peekOfCode": "ctx = Context()\nctx.matches = r\"\"\"\napp: windows_command_processor\napp: windows_terminal\nand win.title: /Command Prompt/\n\"\"\"\nuser_path = os.path.expanduser(\"~\")\ndirectories_to_remap = {}\ndirectories_to_exclude = {}\nctx.tags = [\"user.file_manager\", \"user.git\", \"user.kubectl\", \"terminal\"]",
        "detail": "apps.windows_command_processor.command_processor_win",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "apps.windows_command_processor.command_processor_win",
        "description": "apps.windows_command_processor.command_processor_win",
        "peekOfCode": "ctx.matches = r\"\"\"\napp: windows_command_processor\napp: windows_terminal\nand win.title: /Command Prompt/\n\"\"\"\nuser_path = os.path.expanduser(\"~\")\ndirectories_to_remap = {}\ndirectories_to_exclude = {}\nctx.tags = [\"user.file_manager\", \"user.git\", \"user.kubectl\", \"terminal\"]\n@ctx.action_class(\"edit\")",
        "detail": "apps.windows_command_processor.command_processor_win",
        "documentation": {}
    },
    {
        "label": "user_path",
        "kind": 5,
        "importPath": "apps.windows_command_processor.command_processor_win",
        "description": "apps.windows_command_processor.command_processor_win",
        "peekOfCode": "user_path = os.path.expanduser(\"~\")\ndirectories_to_remap = {}\ndirectories_to_exclude = {}\nctx.tags = [\"user.file_manager\", \"user.git\", \"user.kubectl\", \"terminal\"]\n@ctx.action_class(\"edit\")\nclass EditActions:\n    def delete_line():\n        actions.key(\"esc\")\n@ctx.action_class(\"user\")\nclass UserActions:",
        "detail": "apps.windows_command_processor.command_processor_win",
        "documentation": {}
    },
    {
        "label": "directories_to_remap",
        "kind": 5,
        "importPath": "apps.windows_command_processor.command_processor_win",
        "description": "apps.windows_command_processor.command_processor_win",
        "peekOfCode": "directories_to_remap = {}\ndirectories_to_exclude = {}\nctx.tags = [\"user.file_manager\", \"user.git\", \"user.kubectl\", \"terminal\"]\n@ctx.action_class(\"edit\")\nclass EditActions:\n    def delete_line():\n        actions.key(\"esc\")\n@ctx.action_class(\"user\")\nclass UserActions:\n    def file_manager_refresh_title():",
        "detail": "apps.windows_command_processor.command_processor_win",
        "documentation": {}
    },
    {
        "label": "directories_to_exclude",
        "kind": 5,
        "importPath": "apps.windows_command_processor.command_processor_win",
        "description": "apps.windows_command_processor.command_processor_win",
        "peekOfCode": "directories_to_exclude = {}\nctx.tags = [\"user.file_manager\", \"user.git\", \"user.kubectl\", \"terminal\"]\n@ctx.action_class(\"edit\")\nclass EditActions:\n    def delete_line():\n        actions.key(\"esc\")\n@ctx.action_class(\"user\")\nclass UserActions:\n    def file_manager_refresh_title():\n        actions.insert(\"title Command Prompt: %CD%\")",
        "detail": "apps.windows_command_processor.command_processor_win",
        "documentation": {}
    },
    {
        "label": "ctx.tags",
        "kind": 5,
        "importPath": "apps.windows_command_processor.command_processor_win",
        "description": "apps.windows_command_processor.command_processor_win",
        "peekOfCode": "ctx.tags = [\"user.file_manager\", \"user.git\", \"user.kubectl\", \"terminal\"]\n@ctx.action_class(\"edit\")\nclass EditActions:\n    def delete_line():\n        actions.key(\"esc\")\n@ctx.action_class(\"user\")\nclass UserActions:\n    def file_manager_refresh_title():\n        actions.insert(\"title Command Prompt: %CD%\")\n        actions.key(\"enter\")",
        "detail": "apps.windows_command_processor.command_processor_win",
        "documentation": {}
    },
    {
        "label": "UserActions",
        "kind": 6,
        "importPath": "apps.windows_explorer.windows_explorer",
        "description": "apps.windows_explorer.windows_explorer",
        "peekOfCode": "class UserActions:\n    def file_manager_go_back():\n        actions.key(\"alt-left\")\n    def file_manager_go_forward():\n        actions.key(\"alt-right\")\n    def file_manager_open_parent():\n        actions.key(\"alt-up\")\n    def file_manager_current_path():\n        path = ui.active_window().title\n        if path in directories_to_remap:",
        "detail": "apps.windows_explorer.windows_explorer",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "apps.windows_explorer.windows_explorer",
        "description": "apps.windows_explorer.windows_explorer",
        "peekOfCode": "mod = Module()\napps = mod.apps\napps.windows_explorer = \"\"\"\nos: windows\nand app.name: Windows Explorer\nos: windows\nand app.name: Windows-Explorer\nos: windows\nand app.exe: explorer.exe\n\"\"\"",
        "detail": "apps.windows_explorer.windows_explorer",
        "documentation": {}
    },
    {
        "label": "apps",
        "kind": 5,
        "importPath": "apps.windows_explorer.windows_explorer",
        "description": "apps.windows_explorer.windows_explorer",
        "peekOfCode": "apps = mod.apps\napps.windows_explorer = \"\"\"\nos: windows\nand app.name: Windows Explorer\nos: windows\nand app.name: Windows-Explorer\nos: windows\nand app.exe: explorer.exe\n\"\"\"\n# many commands should work in most save/open dialog.",
        "detail": "apps.windows_explorer.windows_explorer",
        "documentation": {}
    },
    {
        "label": "apps.windows_explorer",
        "kind": 5,
        "importPath": "apps.windows_explorer.windows_explorer",
        "description": "apps.windows_explorer.windows_explorer",
        "peekOfCode": "apps.windows_explorer = \"\"\"\nos: windows\nand app.name: Windows Explorer\nos: windows\nand app.name: Windows-Explorer\nos: windows\nand app.exe: explorer.exe\n\"\"\"\n# many commands should work in most save/open dialog.\n# note the \"show options\" stuff won't work unless work",
        "detail": "apps.windows_explorer.windows_explorer",
        "documentation": {}
    },
    {
        "label": "apps.windows_file_browser",
        "kind": 5,
        "importPath": "apps.windows_explorer.windows_explorer",
        "description": "apps.windows_explorer.windows_explorer",
        "peekOfCode": "apps.windows_file_browser = \"\"\"\nos: windows\nand app.name: /.*/\nand title: /(Save|Open|Browse|Select)/\n\"\"\"\nctx = Context()\nctx.matches = r\"\"\"\napp: windows_explorer\napp: windows_file_browser\n\"\"\"",
        "detail": "apps.windows_explorer.windows_explorer",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.windows_explorer.windows_explorer",
        "description": "apps.windows_explorer.windows_explorer",
        "peekOfCode": "ctx = Context()\nctx.matches = r\"\"\"\napp: windows_explorer\napp: windows_file_browser\n\"\"\"\nuser_path = os.path.expanduser(\"~\")\ndirectories_to_remap = {}\ndirectories_to_exclude = {}\nif app.platform == \"windows\":\n    is_windows = True",
        "detail": "apps.windows_explorer.windows_explorer",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "apps.windows_explorer.windows_explorer",
        "description": "apps.windows_explorer.windows_explorer",
        "peekOfCode": "ctx.matches = r\"\"\"\napp: windows_explorer\napp: windows_file_browser\n\"\"\"\nuser_path = os.path.expanduser(\"~\")\ndirectories_to_remap = {}\ndirectories_to_exclude = {}\nif app.platform == \"windows\":\n    is_windows = True\n    import ctypes",
        "detail": "apps.windows_explorer.windows_explorer",
        "documentation": {}
    },
    {
        "label": "user_path",
        "kind": 5,
        "importPath": "apps.windows_explorer.windows_explorer",
        "description": "apps.windows_explorer.windows_explorer",
        "peekOfCode": "user_path = os.path.expanduser(\"~\")\ndirectories_to_remap = {}\ndirectories_to_exclude = {}\nif app.platform == \"windows\":\n    is_windows = True\n    import ctypes\n    GetUserNameEx = ctypes.windll.secur32.GetUserNameExW\n    NameDisplay = 3\n    size = ctypes.pointer(ctypes.c_ulong(0))\n    GetUserNameEx(NameDisplay, None, size)",
        "detail": "apps.windows_explorer.windows_explorer",
        "documentation": {}
    },
    {
        "label": "directories_to_remap",
        "kind": 5,
        "importPath": "apps.windows_explorer.windows_explorer",
        "description": "apps.windows_explorer.windows_explorer",
        "peekOfCode": "directories_to_remap = {}\ndirectories_to_exclude = {}\nif app.platform == \"windows\":\n    is_windows = True\n    import ctypes\n    GetUserNameEx = ctypes.windll.secur32.GetUserNameExW\n    NameDisplay = 3\n    size = ctypes.pointer(ctypes.c_ulong(0))\n    GetUserNameEx(NameDisplay, None, size)\n    nameBuffer = ctypes.create_unicode_buffer(size.contents.value)",
        "detail": "apps.windows_explorer.windows_explorer",
        "documentation": {}
    },
    {
        "label": "directories_to_exclude",
        "kind": 5,
        "importPath": "apps.windows_explorer.windows_explorer",
        "description": "apps.windows_explorer.windows_explorer",
        "peekOfCode": "directories_to_exclude = {}\nif app.platform == \"windows\":\n    is_windows = True\n    import ctypes\n    GetUserNameEx = ctypes.windll.secur32.GetUserNameExW\n    NameDisplay = 3\n    size = ctypes.pointer(ctypes.c_ulong(0))\n    GetUserNameEx(NameDisplay, None, size)\n    nameBuffer = ctypes.create_unicode_buffer(size.contents.value)\n    GetUserNameEx(NameDisplay, nameBuffer, size)",
        "detail": "apps.windows_explorer.windows_explorer",
        "documentation": {}
    },
    {
        "label": "AppActions",
        "kind": 6,
        "importPath": "apps.windows_terminal.windows_terminal",
        "description": "apps.windows_terminal.windows_terminal",
        "peekOfCode": "class AppActions:\n    def tab_close():\n        actions.key(\"ctrl-shift-w\")\n    def tab_open():\n        actions.key(\"ctrl-shift-t\")\n@ctx.action_class(\"edit\")\nclass EditActions:\n    def paste():\n        actions.key(\"ctrl-shift-v\")\n    def copy():",
        "detail": "apps.windows_terminal.windows_terminal",
        "documentation": {}
    },
    {
        "label": "EditActions",
        "kind": 6,
        "importPath": "apps.windows_terminal.windows_terminal",
        "description": "apps.windows_terminal.windows_terminal",
        "peekOfCode": "class EditActions:\n    def paste():\n        actions.key(\"ctrl-shift-v\")\n    def copy():\n        actions.key(\"ctrl-shift-c\")\n    def find(text: str = None):\n        actions.key(\"ctrl-shift-f\")\n        if text:\n            actions.insert(text)\n@ctx.action_class(\"user\")",
        "detail": "apps.windows_terminal.windows_terminal",
        "documentation": {}
    },
    {
        "label": "UserActions",
        "kind": 6,
        "importPath": "apps.windows_terminal.windows_terminal",
        "description": "apps.windows_terminal.windows_terminal",
        "peekOfCode": "class UserActions:\n    def file_manager_current_path():\n        path = ui.active_window().title\n        path = (\n            path.replace(\"Administrator:  \", \"\")\n            .replace(\"Windows PowerShell: \", \"\")\n            .replace(\"Command Prompt: \", \"\")\n        )\n        if path in directories_to_remap:\n            path = directories_to_remap[path]",
        "detail": "apps.windows_terminal.windows_terminal",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.windows_terminal.windows_terminal",
        "description": "apps.windows_terminal.windows_terminal",
        "peekOfCode": "ctx = Context()\nmod = Module()\nctx.matches = r\"\"\"\napp: windows_terminal\n\"\"\"\nuser_path = os.path.expanduser(\"~\")\ndirectories_to_remap = {}\ndirectories_to_exclude = {}\n@ctx.action_class(\"app\")\nclass AppActions:",
        "detail": "apps.windows_terminal.windows_terminal",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "apps.windows_terminal.windows_terminal",
        "description": "apps.windows_terminal.windows_terminal",
        "peekOfCode": "mod = Module()\nctx.matches = r\"\"\"\napp: windows_terminal\n\"\"\"\nuser_path = os.path.expanduser(\"~\")\ndirectories_to_remap = {}\ndirectories_to_exclude = {}\n@ctx.action_class(\"app\")\nclass AppActions:\n    def tab_close():",
        "detail": "apps.windows_terminal.windows_terminal",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "apps.windows_terminal.windows_terminal",
        "description": "apps.windows_terminal.windows_terminal",
        "peekOfCode": "ctx.matches = r\"\"\"\napp: windows_terminal\n\"\"\"\nuser_path = os.path.expanduser(\"~\")\ndirectories_to_remap = {}\ndirectories_to_exclude = {}\n@ctx.action_class(\"app\")\nclass AppActions:\n    def tab_close():\n        actions.key(\"ctrl-shift-w\")",
        "detail": "apps.windows_terminal.windows_terminal",
        "documentation": {}
    },
    {
        "label": "user_path",
        "kind": 5,
        "importPath": "apps.windows_terminal.windows_terminal",
        "description": "apps.windows_terminal.windows_terminal",
        "peekOfCode": "user_path = os.path.expanduser(\"~\")\ndirectories_to_remap = {}\ndirectories_to_exclude = {}\n@ctx.action_class(\"app\")\nclass AppActions:\n    def tab_close():\n        actions.key(\"ctrl-shift-w\")\n    def tab_open():\n        actions.key(\"ctrl-shift-t\")\n@ctx.action_class(\"edit\")",
        "detail": "apps.windows_terminal.windows_terminal",
        "documentation": {}
    },
    {
        "label": "directories_to_remap",
        "kind": 5,
        "importPath": "apps.windows_terminal.windows_terminal",
        "description": "apps.windows_terminal.windows_terminal",
        "peekOfCode": "directories_to_remap = {}\ndirectories_to_exclude = {}\n@ctx.action_class(\"app\")\nclass AppActions:\n    def tab_close():\n        actions.key(\"ctrl-shift-w\")\n    def tab_open():\n        actions.key(\"ctrl-shift-t\")\n@ctx.action_class(\"edit\")\nclass EditActions:",
        "detail": "apps.windows_terminal.windows_terminal",
        "documentation": {}
    },
    {
        "label": "directories_to_exclude",
        "kind": 5,
        "importPath": "apps.windows_terminal.windows_terminal",
        "description": "apps.windows_terminal.windows_terminal",
        "peekOfCode": "directories_to_exclude = {}\n@ctx.action_class(\"app\")\nclass AppActions:\n    def tab_close():\n        actions.key(\"ctrl-shift-w\")\n    def tab_open():\n        actions.key(\"ctrl-shift-t\")\n@ctx.action_class(\"edit\")\nclass EditActions:\n    def paste():",
        "detail": "apps.windows_terminal.windows_terminal",
        "documentation": {}
    },
    {
        "label": "UserActions",
        "kind": 6,
        "importPath": "apps.wsl.wsl",
        "description": "apps.wsl.wsl",
        "peekOfCode": "class UserActions:\n    def file_manager_refresh_title():\n        actions.skip()\n    def file_manager_open_parent():\n        actions.insert(\"cd ..\")\n        actions.key(\"enter\")\n    def file_manager_current_path():\n        global path_detection_disabled\n        if path_detection_disabled:\n            logging.warning(",
        "detail": "apps.wsl.wsl",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "apps.wsl.wsl",
        "description": "apps.wsl.wsl",
        "peekOfCode": "class Actions:\n    def wsl_reset_path_detection():\n        \"\"\"reset wsl path detection\"\"\"\n        global path_detection_disabled\n        path_detection_disabled = False\n    def wsl_speak():\n        \"\"\"ask each distro to say hello (in the log)\"\"\"\n        results = []\n        _update_wsl_distros()\n        for in_distro in wsl_distros:",
        "detail": "apps.wsl.wsl",
        "documentation": {}
    },
    {
        "label": "get_win_path",
        "kind": 2,
        "importPath": "apps.wsl.wsl",
        "description": "apps.wsl.wsl",
        "peekOfCode": "def get_win_path(wsl_path, distro=None):\n    # for testing\n    # wsl_path = 'Ubuntu-20.04'\n    # wsl_path = '/mnt/qube/woobee/woobee/woobit'\n    # print(f\"WINPATH: {wsl_path}\")\n    return run_wslpath([\"-w\"], wsl_path, distro)\ndef get_usr_path(distro=None):\n    # print(f'USRPATH: {\"~\"}')\n    return run_wslpath([\"-a\"], \"~\", distro)\ndef get_wsl_path(win_path, distro=None):",
        "detail": "apps.wsl.wsl",
        "documentation": {}
    },
    {
        "label": "get_usr_path",
        "kind": 2,
        "importPath": "apps.wsl.wsl",
        "description": "apps.wsl.wsl",
        "peekOfCode": "def get_usr_path(distro=None):\n    # print(f'USRPATH: {\"~\"}')\n    return run_wslpath([\"-a\"], \"~\", distro)\ndef get_wsl_path(win_path, distro=None):\n    # print(f\"WSLPATH: {win_path}\")\n    return run_wslpath([\"-u\"], f\"'{win_path}'\", distro)\ndef _disable_path_detection(notify=True):\n    global path_detection_disabled\n    path_detection_disabled = True\n    if notify:",
        "detail": "apps.wsl.wsl",
        "documentation": {}
    },
    {
        "label": "get_wsl_path",
        "kind": 2,
        "importPath": "apps.wsl.wsl",
        "description": "apps.wsl.wsl",
        "peekOfCode": "def get_wsl_path(win_path, distro=None):\n    # print(f\"WSLPATH: {win_path}\")\n    return run_wslpath([\"-u\"], f\"'{win_path}'\", distro)\ndef _disable_path_detection(notify=True):\n    global path_detection_disabled\n    path_detection_disabled = True\n    if notify:\n        app.notify(\n            title=path_detection_disable_title, body=path_detection_disable_notice\n        )",
        "detail": "apps.wsl.wsl",
        "documentation": {}
    },
    {
        "label": "run_wslpath",
        "kind": 2,
        "importPath": "apps.wsl.wsl",
        "description": "apps.wsl.wsl",
        "peekOfCode": "def run_wslpath(args, in_path, in_distro=None):\n    global path_detection_disabled\n    path = \"\"\n    if not path_detection_disabled:\n        loop_num = 0\n        while loop_num < MAX_ATTEMPTS:\n            # print(f\"_run_wslpath(): {path_detection_disabled=}.\")\n            (distro, path, error) = run_wsl([\"wslpath\", *args, in_path], in_distro)\n            if error:\n                if in_path == distro and error.endswith(\"No such file or directory\"):",
        "detail": "apps.wsl.wsl",
        "documentation": {}
    },
    {
        "label": "run_wsl",
        "kind": 2,
        "importPath": "apps.wsl.wsl",
        "description": "apps.wsl.wsl",
        "peekOfCode": "def run_wsl(args, distro=None):\n    # for testing\n    if False:\n        wsl_cmd_str = \"nosuchcommand\"\n    else:\n        wsl_cmd_str = \"wsl\"\n    # for testing\n    # distro = \"Debian\"\n    # distro = 'Ubuntu-20.04-ms-0'\n    if not distro:",
        "detail": "apps.wsl.wsl",
        "documentation": {}
    },
    {
        "label": "get_distro",
        "kind": 2,
        "importPath": "apps.wsl.wsl",
        "description": "apps.wsl.wsl",
        "peekOfCode": "def get_distro():\n    return run_wsl([\"\\n\"])[0]\n@ctx.action_class(\"user\")\nclass UserActions:\n    def file_manager_refresh_title():\n        actions.skip()\n    def file_manager_open_parent():\n        actions.insert(\"cd ..\")\n        actions.key(\"enter\")\n    def file_manager_current_path():",
        "detail": "apps.wsl.wsl",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "apps.wsl.wsl",
        "description": "apps.wsl.wsl",
        "peekOfCode": "mod = Module()\nctx = Context()\n# note: this context match is intentionally made more complex so that it is more specific\n# than the context defined in apps/win/windows_terminal/windows_terminal.py (and thereby\n# takes precedence).\nctx.matches = rf\"\"\"\napp: windows_terminal\nand tag: user.wsl\ntag: user.wsl\n\"\"\"",
        "detail": "apps.wsl.wsl",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "apps.wsl.wsl",
        "description": "apps.wsl.wsl",
        "peekOfCode": "ctx = Context()\n# note: this context match is intentionally made more complex so that it is more specific\n# than the context defined in apps/win/windows_terminal/windows_terminal.py (and thereby\n# takes precedence).\nctx.matches = rf\"\"\"\napp: windows_terminal\nand tag: user.wsl\ntag: user.wsl\n\"\"\"\nif app.platform == \"windows\":",
        "detail": "apps.wsl.wsl",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "apps.wsl.wsl",
        "description": "apps.wsl.wsl",
        "peekOfCode": "ctx.matches = rf\"\"\"\napp: windows_terminal\nand tag: user.wsl\ntag: user.wsl\n\"\"\"\nif app.platform == \"windows\":\n    import atexit\n    import platform\n    import win32api\n    import win32con",
        "detail": "apps.wsl.wsl",
        "documentation": {}
    },
    {
        "label": "directories_to_remap",
        "kind": 5,
        "importPath": "apps.wsl.wsl",
        "description": "apps.wsl.wsl",
        "peekOfCode": "directories_to_remap = {}\ndirectories_to_exclude = {}\n# some definitions used for error handling\ntermination_error = \"The Windows Subsystem for Linux instance has terminated.\"\nrestart_message = 'wsl path detection is offline, you need to restart your wsl session, e.g. \"wsl --terminate <distro>; wsl\"'\npath_detection_disable_title = \"Talon - WSL path detection disabled\"\npath_detection_disable_notice = \"WSL path detection has been disabled because new WSL sessions cannot be started. See the log for more detail.\"\npath_detection_disabled = False\nuser_path = os.path.expanduser(\"~\")\nif app.platform == \"windows\":",
        "detail": "apps.wsl.wsl",
        "documentation": {}
    },
    {
        "label": "directories_to_exclude",
        "kind": 5,
        "importPath": "apps.wsl.wsl",
        "description": "apps.wsl.wsl",
        "peekOfCode": "directories_to_exclude = {}\n# some definitions used for error handling\ntermination_error = \"The Windows Subsystem for Linux instance has terminated.\"\nrestart_message = 'wsl path detection is offline, you need to restart your wsl session, e.g. \"wsl --terminate <distro>; wsl\"'\npath_detection_disable_title = \"Talon - WSL path detection disabled\"\npath_detection_disable_notice = \"WSL path detection has been disabled because new WSL sessions cannot be started. See the log for more detail.\"\npath_detection_disabled = False\nuser_path = os.path.expanduser(\"~\")\nif app.platform == \"windows\":\n    is_windows = True",
        "detail": "apps.wsl.wsl",
        "documentation": {}
    },
    {
        "label": "termination_error",
        "kind": 5,
        "importPath": "apps.wsl.wsl",
        "description": "apps.wsl.wsl",
        "peekOfCode": "termination_error = \"The Windows Subsystem for Linux instance has terminated.\"\nrestart_message = 'wsl path detection is offline, you need to restart your wsl session, e.g. \"wsl --terminate <distro>; wsl\"'\npath_detection_disable_title = \"Talon - WSL path detection disabled\"\npath_detection_disable_notice = \"WSL path detection has been disabled because new WSL sessions cannot be started. See the log for more detail.\"\npath_detection_disabled = False\nuser_path = os.path.expanduser(\"~\")\nif app.platform == \"windows\":\n    is_windows = True\n    one_drive_path = os.path.expanduser(os.path.join(\"~\", \"OneDrive\"))\n    # this is probably not the correct way to check for onedrive, quick and dirty",
        "detail": "apps.wsl.wsl",
        "documentation": {}
    },
    {
        "label": "restart_message",
        "kind": 5,
        "importPath": "apps.wsl.wsl",
        "description": "apps.wsl.wsl",
        "peekOfCode": "restart_message = 'wsl path detection is offline, you need to restart your wsl session, e.g. \"wsl --terminate <distro>; wsl\"'\npath_detection_disable_title = \"Talon - WSL path detection disabled\"\npath_detection_disable_notice = \"WSL path detection has been disabled because new WSL sessions cannot be started. See the log for more detail.\"\npath_detection_disabled = False\nuser_path = os.path.expanduser(\"~\")\nif app.platform == \"windows\":\n    is_windows = True\n    one_drive_path = os.path.expanduser(os.path.join(\"~\", \"OneDrive\"))\n    # this is probably not the correct way to check for onedrive, quick and dirty\n    if os.path.isdir(os.path.expanduser(os.path.join(\"~\", r\"OneDrive\\Desktop\"))):",
        "detail": "apps.wsl.wsl",
        "documentation": {}
    },
    {
        "label": "path_detection_disable_title",
        "kind": 5,
        "importPath": "apps.wsl.wsl",
        "description": "apps.wsl.wsl",
        "peekOfCode": "path_detection_disable_title = \"Talon - WSL path detection disabled\"\npath_detection_disable_notice = \"WSL path detection has been disabled because new WSL sessions cannot be started. See the log for more detail.\"\npath_detection_disabled = False\nuser_path = os.path.expanduser(\"~\")\nif app.platform == \"windows\":\n    is_windows = True\n    one_drive_path = os.path.expanduser(os.path.join(\"~\", \"OneDrive\"))\n    # this is probably not the correct way to check for onedrive, quick and dirty\n    if os.path.isdir(os.path.expanduser(os.path.join(\"~\", r\"OneDrive\\Desktop\"))):\n        directories_to_remap = {",
        "detail": "apps.wsl.wsl",
        "documentation": {}
    },
    {
        "label": "path_detection_disable_notice",
        "kind": 5,
        "importPath": "apps.wsl.wsl",
        "description": "apps.wsl.wsl",
        "peekOfCode": "path_detection_disable_notice = \"WSL path detection has been disabled because new WSL sessions cannot be started. See the log for more detail.\"\npath_detection_disabled = False\nuser_path = os.path.expanduser(\"~\")\nif app.platform == \"windows\":\n    is_windows = True\n    one_drive_path = os.path.expanduser(os.path.join(\"~\", \"OneDrive\"))\n    # this is probably not the correct way to check for onedrive, quick and dirty\n    if os.path.isdir(os.path.expanduser(os.path.join(\"~\", r\"OneDrive\\Desktop\"))):\n        directories_to_remap = {\n            \"Desktop\": os.path.join(one_drive_path, \"Desktop\"),",
        "detail": "apps.wsl.wsl",
        "documentation": {}
    },
    {
        "label": "path_detection_disabled",
        "kind": 5,
        "importPath": "apps.wsl.wsl",
        "description": "apps.wsl.wsl",
        "peekOfCode": "path_detection_disabled = False\nuser_path = os.path.expanduser(\"~\")\nif app.platform == \"windows\":\n    is_windows = True\n    one_drive_path = os.path.expanduser(os.path.join(\"~\", \"OneDrive\"))\n    # this is probably not the correct way to check for onedrive, quick and dirty\n    if os.path.isdir(os.path.expanduser(os.path.join(\"~\", r\"OneDrive\\Desktop\"))):\n        directories_to_remap = {\n            \"Desktop\": os.path.join(one_drive_path, \"Desktop\"),\n            \"Documents\": os.path.join(one_drive_path, \"Documents\"),",
        "detail": "apps.wsl.wsl",
        "documentation": {}
    },
    {
        "label": "user_path",
        "kind": 5,
        "importPath": "apps.wsl.wsl",
        "description": "apps.wsl.wsl",
        "peekOfCode": "user_path = os.path.expanduser(\"~\")\nif app.platform == \"windows\":\n    is_windows = True\n    one_drive_path = os.path.expanduser(os.path.join(\"~\", \"OneDrive\"))\n    # this is probably not the correct way to check for onedrive, quick and dirty\n    if os.path.isdir(os.path.expanduser(os.path.join(\"~\", r\"OneDrive\\Desktop\"))):\n        directories_to_remap = {\n            \"Desktop\": os.path.join(one_drive_path, \"Desktop\"),\n            \"Documents\": os.path.join(one_drive_path, \"Documents\"),\n            \"Downloads\": os.path.join(user_path, \"Downloads\"),",
        "detail": "apps.wsl.wsl",
        "documentation": {}
    },
    {
        "label": "MAX_ATTEMPTS",
        "kind": 5,
        "importPath": "apps.wsl.wsl",
        "description": "apps.wsl.wsl",
        "peekOfCode": "MAX_ATTEMPTS = 2\ndef run_wslpath(args, in_path, in_distro=None):\n    global path_detection_disabled\n    path = \"\"\n    if not path_detection_disabled:\n        loop_num = 0\n        while loop_num < MAX_ATTEMPTS:\n            # print(f\"_run_wslpath(): {path_detection_disabled=}.\")\n            (distro, path, error) = run_wsl([\"wslpath\", *args, in_path], in_distro)\n            if error:",
        "detail": "apps.wsl.wsl",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "core.abbreviate.abbreviate",
        "description": "core.abbreviate.abbreviate",
        "peekOfCode": "mod = Module()\nmod.list(\"abbreviation\", desc=\"Common abbreviation\")\n# TODO: Make this a csv file. Not necessarily a settings/ csv file, it might be\n# better to be like homophones.csv.\nabbreviations = {\n    \"address\": \"addr\",\n    \"administrator\": \"admin\",\n    \"administrators\": \"admins\",\n    \"advance\": \"adv\",\n    \"advanced\": \"adv\",",
        "detail": "core.abbreviate.abbreviate",
        "documentation": {}
    },
    {
        "label": "abbreviations",
        "kind": 5,
        "importPath": "core.abbreviate.abbreviate",
        "description": "core.abbreviate.abbreviate",
        "peekOfCode": "abbreviations = {\n    \"address\": \"addr\",\n    \"administrator\": \"admin\",\n    \"administrators\": \"admins\",\n    \"advance\": \"adv\",\n    \"advanced\": \"adv\",\n    \"alberta\": \"ab\",\n    \"alternative\": \"alt\",\n    \"application\": \"app\",\n    \"applications\": \"apps\",",
        "detail": "core.abbreviate.abbreviate",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "core.abbreviate.abbreviate",
        "description": "core.abbreviate.abbreviate",
        "peekOfCode": "ctx = Context()\nctx.lists[\"user.abbreviation\"] = abbreviations",
        "detail": "core.abbreviate.abbreviate",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"user.abbreviation\"]",
        "kind": 5,
        "importPath": "core.abbreviate.abbreviate",
        "description": "core.abbreviate.abbreviate",
        "peekOfCode": "ctx.lists[\"user.abbreviation\"] = abbreviations",
        "detail": "core.abbreviate.abbreviate",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "core.app_switcher.app_switcher",
        "description": "core.app_switcher.app_switcher",
        "peekOfCode": "class Actions:\n    def get_running_app(name: str) -> ui.App:\n        \"\"\"Get the first available running app with `name`.\"\"\"\n        # We should use the capture result directly if it's already in the list\n        # of running applications. Otherwise, name is from <user.text> and we\n        # can be a bit fuzzier\n        if name not in running_application_dict:\n            if len(name) < 3:\n                raise RuntimeError(\n                    f'Skipped getting app: \"{name}\" has less than 3 chars.'",
        "detail": "core.app_switcher.app_switcher",
        "documentation": {}
    },
    {
        "label": "running_applications",
        "kind": 2,
        "importPath": "core.app_switcher.app_switcher",
        "description": "core.app_switcher.app_switcher",
        "peekOfCode": "def running_applications(m) -> str:\n    \"Returns a single application name\"\n    try:\n        return m.running\n    except AttributeError:\n        return m.text\n@mod.capture(rule=\"{self.launch}\")\ndef launch_applications(m) -> str:\n    \"Returns a single application name\"\n    return m.launch",
        "detail": "core.app_switcher.app_switcher",
        "documentation": {}
    },
    {
        "label": "launch_applications",
        "kind": 2,
        "importPath": "core.app_switcher.app_switcher",
        "description": "core.app_switcher.app_switcher",
        "peekOfCode": "def launch_applications(m) -> str:\n    \"Returns a single application name\"\n    return m.launch\ndef update_running_list():\n    global running_application_dict\n    running_application_dict = {}\n    running = {}\n    for cur_app in ui.apps(background=False):\n        running_application_dict[cur_app.name] = True\n        if app.platform == \"windows\":",
        "detail": "core.app_switcher.app_switcher",
        "documentation": {}
    },
    {
        "label": "update_running_list",
        "kind": 2,
        "importPath": "core.app_switcher.app_switcher",
        "description": "core.app_switcher.app_switcher",
        "peekOfCode": "def update_running_list():\n    global running_application_dict\n    running_application_dict = {}\n    running = {}\n    for cur_app in ui.apps(background=False):\n        running_application_dict[cur_app.name] = True\n        if app.platform == \"windows\":\n            # print(\"hit....\")\n            # print(cur_app.exe)\n            running_application_dict[cur_app.exe.split(os.path.sep)[-1]] = True",
        "detail": "core.app_switcher.app_switcher",
        "documentation": {}
    },
    {
        "label": "update_overrides",
        "kind": 2,
        "importPath": "core.app_switcher.app_switcher",
        "description": "core.app_switcher.app_switcher",
        "peekOfCode": "def update_overrides(name, flags):\n    \"\"\"Updates the overrides list\"\"\"\n    global overrides\n    overrides = {}\n    if name is None or name == override_file_path:\n        # print(\"update_overrides\")\n        with open(override_file_path) as f:\n            for line in f:\n                line = line.rstrip()\n                line = line.split(\",\")",
        "detail": "core.app_switcher.app_switcher",
        "documentation": {}
    },
    {
        "label": "gui_running",
        "kind": 2,
        "importPath": "core.app_switcher.app_switcher",
        "description": "core.app_switcher.app_switcher",
        "peekOfCode": "def gui_running(gui: imgui.GUI):\n    gui.text(\"Names of running applications\")\n    gui.line()\n    for line in ctx.lists[\"self.running\"]:\n        gui.text(line)\n    gui.spacer()\n    if gui.button(\"Running close\"):\n        actions.user.switcher_hide_running()\ndef update_launch_list():\n    launch = {}",
        "detail": "core.app_switcher.app_switcher",
        "documentation": {}
    },
    {
        "label": "update_launch_list",
        "kind": 2,
        "importPath": "core.app_switcher.app_switcher",
        "description": "core.app_switcher.app_switcher",
        "peekOfCode": "def update_launch_list():\n    launch = {}\n    if app.platform == \"mac\":\n        for base in mac_application_directories:\n            if os.path.isdir(base):\n                for name in os.listdir(base):\n                    path = os.path.join(base, name)\n                    name = name.rsplit(\".\", 1)[0].lower()\n                    launch[name] = path\n    elif app.platform == \"windows\":",
        "detail": "core.app_switcher.app_switcher",
        "documentation": {}
    },
    {
        "label": "ui_event",
        "kind": 2,
        "importPath": "core.app_switcher.app_switcher",
        "description": "core.app_switcher.app_switcher",
        "peekOfCode": "def ui_event(event, arg):\n    if event in (\"app_launch\", \"app_close\"):\n        update_running_list()\n# Talon starts faster if you don't use the `talon.ui` module during launch\ndef on_ready():\n    update_overrides(None, None)\n    fs.watch(overrides_directory, update_overrides)\n    update_launch_list()\n    update_running_list()\n    ui.register(\"\", ui_event)",
        "detail": "core.app_switcher.app_switcher",
        "documentation": {}
    },
    {
        "label": "on_ready",
        "kind": 2,
        "importPath": "core.app_switcher.app_switcher",
        "description": "core.app_switcher.app_switcher",
        "peekOfCode": "def on_ready():\n    update_overrides(None, None)\n    fs.watch(overrides_directory, update_overrides)\n    update_launch_list()\n    update_running_list()\n    ui.register(\"\", ui_event)\napp.register(\"ready\", on_ready)",
        "detail": "core.app_switcher.app_switcher",
        "documentation": {}
    },
    {
        "label": "overrides_directory",
        "kind": 5,
        "importPath": "core.app_switcher.app_switcher",
        "description": "core.app_switcher.app_switcher",
        "peekOfCode": "overrides_directory = os.path.dirname(os.path.realpath(__file__))\noverride_file_name = f\"app_name_overrides.{talon.app.platform}.csv\"\noverride_file_path = os.path.join(overrides_directory, override_file_name)\nmod = Module()\nmod.list(\"running\", desc=\"all running applications\")\nmod.list(\"launch\", desc=\"all launchable applications\")\nctx = Context()\n# a list of the current overrides\noverrides = {}\n# a list of the currently running application names",
        "detail": "core.app_switcher.app_switcher",
        "documentation": {}
    },
    {
        "label": "override_file_name",
        "kind": 5,
        "importPath": "core.app_switcher.app_switcher",
        "description": "core.app_switcher.app_switcher",
        "peekOfCode": "override_file_name = f\"app_name_overrides.{talon.app.platform}.csv\"\noverride_file_path = os.path.join(overrides_directory, override_file_name)\nmod = Module()\nmod.list(\"running\", desc=\"all running applications\")\nmod.list(\"launch\", desc=\"all launchable applications\")\nctx = Context()\n# a list of the current overrides\noverrides = {}\n# a list of the currently running application names\nrunning_application_dict = {}",
        "detail": "core.app_switcher.app_switcher",
        "documentation": {}
    },
    {
        "label": "override_file_path",
        "kind": 5,
        "importPath": "core.app_switcher.app_switcher",
        "description": "core.app_switcher.app_switcher",
        "peekOfCode": "override_file_path = os.path.join(overrides_directory, override_file_name)\nmod = Module()\nmod.list(\"running\", desc=\"all running applications\")\nmod.list(\"launch\", desc=\"all launchable applications\")\nctx = Context()\n# a list of the current overrides\noverrides = {}\n# a list of the currently running application names\nrunning_application_dict = {}\nmac_application_directories = [",
        "detail": "core.app_switcher.app_switcher",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "core.app_switcher.app_switcher",
        "description": "core.app_switcher.app_switcher",
        "peekOfCode": "mod = Module()\nmod.list(\"running\", desc=\"all running applications\")\nmod.list(\"launch\", desc=\"all launchable applications\")\nctx = Context()\n# a list of the current overrides\noverrides = {}\n# a list of the currently running application names\nrunning_application_dict = {}\nmac_application_directories = [\n    \"/Applications\",",
        "detail": "core.app_switcher.app_switcher",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "core.app_switcher.app_switcher",
        "description": "core.app_switcher.app_switcher",
        "peekOfCode": "ctx = Context()\n# a list of the current overrides\noverrides = {}\n# a list of the currently running application names\nrunning_application_dict = {}\nmac_application_directories = [\n    \"/Applications\",\n    \"/Applications/Utilities\",\n    \"/System/Applications\",\n    \"/System/Applications/Utilities\",",
        "detail": "core.app_switcher.app_switcher",
        "documentation": {}
    },
    {
        "label": "overrides",
        "kind": 5,
        "importPath": "core.app_switcher.app_switcher",
        "description": "core.app_switcher.app_switcher",
        "peekOfCode": "overrides = {}\n# a list of the currently running application names\nrunning_application_dict = {}\nmac_application_directories = [\n    \"/Applications\",\n    \"/Applications/Utilities\",\n    \"/System/Applications\",\n    \"/System/Applications/Utilities\",\n]\nwords_to_exclude = [",
        "detail": "core.app_switcher.app_switcher",
        "documentation": {}
    },
    {
        "label": "running_application_dict",
        "kind": 5,
        "importPath": "core.app_switcher.app_switcher",
        "description": "core.app_switcher.app_switcher",
        "peekOfCode": "running_application_dict = {}\nmac_application_directories = [\n    \"/Applications\",\n    \"/Applications/Utilities\",\n    \"/System/Applications\",\n    \"/System/Applications/Utilities\",\n]\nwords_to_exclude = [\n    \"zero\",\n    \"one\",",
        "detail": "core.app_switcher.app_switcher",
        "documentation": {}
    },
    {
        "label": "mac_application_directories",
        "kind": 5,
        "importPath": "core.app_switcher.app_switcher",
        "description": "core.app_switcher.app_switcher",
        "peekOfCode": "mac_application_directories = [\n    \"/Applications\",\n    \"/Applications/Utilities\",\n    \"/System/Applications\",\n    \"/System/Applications/Utilities\",\n]\nwords_to_exclude = [\n    \"zero\",\n    \"one\",\n    \"two\",",
        "detail": "core.app_switcher.app_switcher",
        "documentation": {}
    },
    {
        "label": "words_to_exclude",
        "kind": 5,
        "importPath": "core.app_switcher.app_switcher",
        "description": "core.app_switcher.app_switcher",
        "peekOfCode": "words_to_exclude = [\n    \"zero\",\n    \"one\",\n    \"two\",\n    \"three\",\n    \"for\",\n    \"four\",\n    \"five\",\n    \"six\",\n    \"seven\",",
        "detail": "core.app_switcher.app_switcher",
        "documentation": {}
    },
    {
        "label": "EditActions",
        "kind": 6,
        "importPath": "core.edit.edit",
        "description": "core.edit.edit",
        "peekOfCode": "class EditActions:\n    def selected_text() -> str:\n        with clip.capture() as s:\n            actions.edit.copy()\n        try:\n            return s.text()\n        except clip.NoChange:\n            return \"\"\n    def line_insert_down():\n        actions.edit.line_end()",
        "detail": "core.edit.edit",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "core.edit.edit",
        "description": "core.edit.edit",
        "peekOfCode": "class Actions:\n    def paste(text: str):\n        \"\"\"Pastes text and preserves clipboard\"\"\"\n        with clip.revert():\n            clip.set_text(text)\n            actions.edit.paste()\n            # sleep here so that clip.revert doesn't revert the clipboard too soon\n            actions.sleep(\"150ms\")\n    def words_left(n: int):\n        \"\"\"Moves left by n words.\"\"\"",
        "detail": "core.edit.edit",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "core.edit.edit",
        "description": "core.edit.edit",
        "peekOfCode": "ctx = Context()\nmod = Module()\n@ctx.action_class(\"edit\")\nclass EditActions:\n    def selected_text() -> str:\n        with clip.capture() as s:\n            actions.edit.copy()\n        try:\n            return s.text()\n        except clip.NoChange:",
        "detail": "core.edit.edit",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "core.edit.edit",
        "description": "core.edit.edit",
        "peekOfCode": "mod = Module()\n@ctx.action_class(\"edit\")\nclass EditActions:\n    def selected_text() -> str:\n        with clip.capture() as s:\n            actions.edit.copy()\n        try:\n            return s.text()\n        except clip.NoChange:\n            return \"\"",
        "detail": "core.edit.edit",
        "documentation": {}
    },
    {
        "label": "EditActions",
        "kind": 6,
        "importPath": "core.edit.edit_linux",
        "description": "core.edit.edit_linux",
        "peekOfCode": "class EditActions:\n    def copy():\n        actions.key(\"ctrl-c\")\n    def cut():\n        actions.key(\"ctrl-x\")\n    def delete():\n        actions.key(\"backspace\")\n    def delete_line():\n        actions.edit.select_line()\n        actions.edit.delete()",
        "detail": "core.edit.edit_linux",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "core.edit.edit_linux",
        "description": "core.edit.edit_linux",
        "peekOfCode": "ctx = Context()\nctx.matches = r\"\"\"\nos: linux\n\"\"\"\n@ctx.action_class(\"edit\")\nclass EditActions:\n    def copy():\n        actions.key(\"ctrl-c\")\n    def cut():\n        actions.key(\"ctrl-x\")",
        "detail": "core.edit.edit_linux",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "core.edit.edit_linux",
        "description": "core.edit.edit_linux",
        "peekOfCode": "ctx.matches = r\"\"\"\nos: linux\n\"\"\"\n@ctx.action_class(\"edit\")\nclass EditActions:\n    def copy():\n        actions.key(\"ctrl-c\")\n    def cut():\n        actions.key(\"ctrl-x\")\n    def delete():",
        "detail": "core.edit.edit_linux",
        "documentation": {}
    },
    {
        "label": "EditActions",
        "kind": 6,
        "importPath": "core.edit.edit_mac",
        "description": "core.edit.edit_mac",
        "peekOfCode": "class EditActions:\n    def copy():\n        actions.key(\"cmd-c\")\n    def cut():\n        actions.key(\"cmd-x\")\n    def delete():\n        actions.key(\"backspace\")\n    def delete_line():\n        actions.edit.select_line()\n        actions.edit.delete()",
        "detail": "core.edit.edit_mac",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "core.edit.edit_mac",
        "description": "core.edit.edit_mac",
        "peekOfCode": "ctx = Context()\nctx.matches = r\"\"\"\nos: mac\n\"\"\"\n@ctx.action_class(\"edit\")\nclass EditActions:\n    def copy():\n        actions.key(\"cmd-c\")\n    def cut():\n        actions.key(\"cmd-x\")",
        "detail": "core.edit.edit_mac",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "core.edit.edit_mac",
        "description": "core.edit.edit_mac",
        "peekOfCode": "ctx.matches = r\"\"\"\nos: mac\n\"\"\"\n@ctx.action_class(\"edit\")\nclass EditActions:\n    def copy():\n        actions.key(\"cmd-c\")\n    def cut():\n        actions.key(\"cmd-x\")\n    def delete():",
        "detail": "core.edit.edit_mac",
        "documentation": {}
    },
    {
        "label": "EditActions",
        "kind": 6,
        "importPath": "core.edit.edit_win",
        "description": "core.edit.edit_win",
        "peekOfCode": "class EditActions:\n    def copy():\n        actions.key(\"ctrl-c\")\n    def cut():\n        actions.key(\"ctrl-x\")\n    def delete():\n        actions.key(\"backspace\")\n    def delete_line():\n        actions.edit.select_line()\n        actions.edit.delete()",
        "detail": "core.edit.edit_win",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "core.edit.edit_win",
        "description": "core.edit.edit_win",
        "peekOfCode": "ctx = Context()\nctx.matches = r\"\"\"\nos: windows\n\"\"\"\n@ctx.action_class(\"edit\")\nclass EditActions:\n    def copy():\n        actions.key(\"ctrl-c\")\n    def cut():\n        actions.key(\"ctrl-x\")",
        "detail": "core.edit.edit_win",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "core.edit.edit_win",
        "description": "core.edit.edit_win",
        "peekOfCode": "ctx.matches = r\"\"\"\nos: windows\n\"\"\"\n@ctx.action_class(\"edit\")\nclass EditActions:\n    def copy():\n        actions.key(\"ctrl-c\")\n    def cut():\n        actions.key(\"ctrl-x\")\n    def delete():",
        "detail": "core.edit.edit_win",
        "documentation": {}
    },
    {
        "label": "module_actions",
        "kind": 6,
        "importPath": "core.edit.insert_between",
        "description": "core.edit.insert_between",
        "peekOfCode": "class module_actions:\n    def insert_between(before: str, after: str):\n        \"\"\"Insert `before + after`, leaving cursor between `before` and `after`. Not entirely reliable if `after` contains newlines.\"\"\"\n        actions.insert(before + after)\n        for _ in after:\n            actions.edit.left()\n    # This is deprecated, please use insert_between instead.\n    def insert_cursor(text: str):\n        \"\"\"Insert a string. Leave the cursor wherever [|] is in the text\"\"\"\n        if \"[|]\" in text:",
        "detail": "core.edit.insert_between",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "core.edit.insert_between",
        "description": "core.edit.insert_between",
        "peekOfCode": "mod = Module()\n@mod.action_class\nclass module_actions:\n    def insert_between(before: str, after: str):\n        \"\"\"Insert `before + after`, leaving cursor between `before` and `after`. Not entirely reliable if `after` contains newlines.\"\"\"\n        actions.insert(before + after)\n        for _ in after:\n            actions.edit.left()\n    # This is deprecated, please use insert_between instead.\n    def insert_cursor(text: str):",
        "detail": "core.edit.insert_between",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "core.file_extension.file_extension",
        "description": "core.file_extension.file_extension",
        "peekOfCode": "mod = Module()\nmod.list(\"file_extension\", desc=\"A file extension, such as .py\")\n_file_extensions_defaults = {\n    \"dot pie\": \".py\",\n    \"dot talon\": \".talon\",\n    \"dot mark down\": \".md\",\n    \"dot shell\": \".sh\",\n    \"dot vim\": \".vim\",\n    \"dot see\": \".c\",\n    \"dot see sharp\": \".cs\",",
        "detail": "core.file_extension.file_extension",
        "documentation": {}
    },
    {
        "label": "_file_extensions_defaults",
        "kind": 5,
        "importPath": "core.file_extension.file_extension",
        "description": "core.file_extension.file_extension",
        "peekOfCode": "_file_extensions_defaults = {\n    \"dot pie\": \".py\",\n    \"dot talon\": \".talon\",\n    \"dot mark down\": \".md\",\n    \"dot shell\": \".sh\",\n    \"dot vim\": \".vim\",\n    \"dot see\": \".c\",\n    \"dot see sharp\": \".cs\",\n    \"dot com\": \".com\",\n    \"dot net\": \".net\",",
        "detail": "core.file_extension.file_extension",
        "documentation": {}
    },
    {
        "label": "file_extensions",
        "kind": 5,
        "importPath": "core.file_extension.file_extension",
        "description": "core.file_extension.file_extension",
        "peekOfCode": "file_extensions = get_list_from_csv(\n    \"file_extensions.csv\",\n    headers=(\"File extension\", \"Name\"),\n    default=_file_extensions_defaults,\n)\nctx = Context()\nctx.lists[\"self.file_extension\"] = file_extensions",
        "detail": "core.file_extension.file_extension",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "core.file_extension.file_extension",
        "description": "core.file_extension.file_extension",
        "peekOfCode": "ctx = Context()\nctx.lists[\"self.file_extension\"] = file_extensions",
        "detail": "core.file_extension.file_extension",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"self.file_extension\"]",
        "kind": 5,
        "importPath": "core.file_extension.file_extension",
        "description": "core.file_extension.file_extension",
        "peekOfCode": "ctx.lists[\"self.file_extension\"] = file_extensions",
        "detail": "core.file_extension.file_extension",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "core.help.help",
        "description": "core.help.help",
        "peekOfCode": "class Actions:\n    def help_list(ab: str):\n        \"\"\"Provides the symbol dictionary\"\"\"\n        # what you say is stored as a trigger\n        global selected_list\n        reset()\n        selected_list = ab\n        gui_list_help.show()\n        register_events(True)\n        actions.mode.enable(\"user.help\")",
        "detail": "core.help.help",
        "documentation": {}
    },
    {
        "label": "update_title",
        "kind": 2,
        "importPath": "core.help.help",
        "description": "core.help.help",
        "peekOfCode": "def update_title():\n    global live_update\n    global show_enabled_contexts_only\n    if live_update:\n        if gui_context_help.showing:\n            if selected_context is None:\n                refresh_context_command_map(show_enabled_contexts_only)\n            else:\n                update_active_contexts_cache(registry.active_contexts())\n@imgui.open(y=0)",
        "detail": "core.help.help",
        "documentation": {}
    },
    {
        "label": "gui_formatters",
        "kind": 2,
        "importPath": "core.help.help",
        "description": "core.help.help",
        "peekOfCode": "def gui_formatters(gui: imgui.GUI):\n    global formatters_words\n    gui.text(\"formatters help\")\n    gui.line()\n    for key, val in formatters_words.items():\n        gui.text(f\"{val}: {key}\")\n    gui.spacer()\n    if gui.button(\"Help close\"):\n        gui_formatters.hide()\ndef format_context_title(context_name: str) -> str:",
        "detail": "core.help.help",
        "documentation": {}
    },
    {
        "label": "format_context_title",
        "kind": 2,
        "importPath": "core.help.help",
        "description": "core.help.help",
        "peekOfCode": "def format_context_title(context_name: str) -> str:\n    global cached_active_contexts_list\n    return \"{} [{}]\".format(\n        context_name,\n        \"ACTIVE\"\n        if context_map.get(context_name, None) in cached_active_contexts_list\n        else \"INACTIVE\",\n    )\ndef format_context_button(index: int, context_label: str, context_name: str) -> str:\n    global cached_active_contexts_list",
        "detail": "core.help.help",
        "documentation": {}
    },
    {
        "label": "format_context_button",
        "kind": 2,
        "importPath": "core.help.help",
        "description": "core.help.help",
        "peekOfCode": "def format_context_button(index: int, context_label: str, context_name: str) -> str:\n    global cached_active_contexts_list\n    global show_enabled_contexts_only\n    if not show_enabled_contexts_only:\n        return \"{}. {}{}\".format(\n            index,\n            context_label,\n            \"*\"\n            if context_map.get(context_name, None) in cached_active_contexts_list\n            else \"\",",
        "detail": "core.help.help",
        "documentation": {}
    },
    {
        "label": "get_context_page",
        "kind": 2,
        "importPath": "core.help.help",
        "description": "core.help.help",
        "peekOfCode": "def get_context_page(index: int) -> int:\n    return math.ceil(index / setting_help_max_contexts_per_page.get())\ndef get_total_context_pages() -> int:\n    return math.ceil(\n        len(sorted_display_list) / setting_help_max_contexts_per_page.get()\n    )\ndef get_current_context_page_length() -> int:\n    start_index = (current_context_page - 1) * setting_help_max_contexts_per_page.get()\n    return len(\n        sorted_display_list[",
        "detail": "core.help.help",
        "documentation": {}
    },
    {
        "label": "get_total_context_pages",
        "kind": 2,
        "importPath": "core.help.help",
        "description": "core.help.help",
        "peekOfCode": "def get_total_context_pages() -> int:\n    return math.ceil(\n        len(sorted_display_list) / setting_help_max_contexts_per_page.get()\n    )\ndef get_current_context_page_length() -> int:\n    start_index = (current_context_page - 1) * setting_help_max_contexts_per_page.get()\n    return len(\n        sorted_display_list[\n            start_index : start_index + setting_help_max_contexts_per_page.get()\n        ]",
        "detail": "core.help.help",
        "documentation": {}
    },
    {
        "label": "get_current_context_page_length",
        "kind": 2,
        "importPath": "core.help.help",
        "description": "core.help.help",
        "peekOfCode": "def get_current_context_page_length() -> int:\n    start_index = (current_context_page - 1) * setting_help_max_contexts_per_page.get()\n    return len(\n        sorted_display_list[\n            start_index : start_index + setting_help_max_contexts_per_page.get()\n        ]\n    )\ndef get_command_line_count(command: tuple[str, str]) -> int:\n    \"\"\"This should be kept in sync with draw_commands\"\"\"\n    _, body = command",
        "detail": "core.help.help",
        "documentation": {}
    },
    {
        "label": "get_command_line_count",
        "kind": 2,
        "importPath": "core.help.help",
        "description": "core.help.help",
        "peekOfCode": "def get_command_line_count(command: tuple[str, str]) -> int:\n    \"\"\"This should be kept in sync with draw_commands\"\"\"\n    _, body = command\n    lines = len(body.split(\"\\n\"))\n    if lines == 1:\n        return 1\n    else:\n        return lines + 1\ndef get_pages(item_line_counts: list[int]) -> list[int]:\n    \"\"\"Given some set of indivisible items with given line counts,",
        "detail": "core.help.help",
        "documentation": {}
    },
    {
        "label": "get_pages",
        "kind": 2,
        "importPath": "core.help.help",
        "description": "core.help.help",
        "peekOfCode": "def get_pages(item_line_counts: list[int]) -> list[int]:\n    \"\"\"Given some set of indivisible items with given line counts,\n    return the page number each item should appear on.\n    If an item will cross a page boundary, it is moved to the next page,\n    so that pages may be shorter than the maximum lenth, but not longer. The only\n    exception is when an item is longer than the maximum page length, in which\n    case that item will be placed on a longer page.\n    \"\"\"\n    current_page_line_count = 0\n    current_page = 1",
        "detail": "core.help.help",
        "documentation": {}
    },
    {
        "label": "gui_context_help",
        "kind": 2,
        "importPath": "core.help.help",
        "description": "core.help.help",
        "peekOfCode": "def gui_context_help(gui: imgui.GUI):\n    global context_command_map\n    global current_context_page\n    global selected_context\n    global selected_context_page\n    global sorted_display_list\n    global show_enabled_contexts_only\n    global cached_active_contexts_list\n    global total_page_count\n    global search_phrase",
        "detail": "core.help.help",
        "documentation": {}
    },
    {
        "label": "draw_context_commands",
        "kind": 2,
        "importPath": "core.help.help",
        "description": "core.help.help",
        "peekOfCode": "def draw_context_commands(gui: imgui.GUI):\n    global selected_context\n    global total_page_count\n    global selected_context_page\n    context_title = format_context_title(selected_context)\n    title = f\"Context: {context_title}\"\n    commands = context_command_map[selected_context].items()\n    item_line_counts = [get_command_line_count(command) for command in commands]\n    pages = get_pages(item_line_counts)\n    total_page_count = max(pages, default=1)",
        "detail": "core.help.help",
        "documentation": {}
    },
    {
        "label": "draw_search_commands",
        "kind": 2,
        "importPath": "core.help.help",
        "description": "core.help.help",
        "peekOfCode": "def draw_search_commands(gui: imgui.GUI):\n    global search_phrase\n    global total_page_count\n    global cached_active_contexts_list\n    global selected_context_page\n    title = f\"Search: {search_phrase}\"\n    commands_grouped = get_search_commands(search_phrase)\n    commands_flat = list(itertools.chain.from_iterable(commands_grouped.values()))\n    sorted_commands_grouped = sorted(\n        commands_grouped.items(),",
        "detail": "core.help.help",
        "documentation": {}
    },
    {
        "label": "get_search_commands",
        "kind": 2,
        "importPath": "core.help.help",
        "description": "core.help.help",
        "peekOfCode": "def get_search_commands(phrase: str) -> dict[str, tuple[str, str]]:\n    global rule_word_map\n    tokens = search_phrase.split(\" \")\n    viable_commands = rule_word_map[tokens[0]]\n    for token in tokens[1:]:\n        viable_commands &= rule_word_map[token]\n    commands_grouped = defaultdict(list)\n    for context, rule in viable_commands:\n        command = context_command_map[context][rule]\n        commands_grouped[context].append((rule, command))",
        "detail": "core.help.help",
        "documentation": {}
    },
    {
        "label": "draw_commands_title",
        "kind": 2,
        "importPath": "core.help.help",
        "description": "core.help.help",
        "peekOfCode": "def draw_commands_title(gui: imgui.GUI, title: str):\n    global selected_context_page\n    global total_page_count\n    gui.text(f\"{title} ({selected_context_page}/{total_page_count})\")\n    gui.line()\ndef draw_commands(gui: imgui.GUI, commands: Iterable[tuple[str, str]]):\n    for key, val in commands:\n        val = val.split(\"\\n\")\n        if len(val) > 1:\n            gui.text(f\"{key}:\")",
        "detail": "core.help.help",
        "documentation": {}
    },
    {
        "label": "draw_commands",
        "kind": 2,
        "importPath": "core.help.help",
        "description": "core.help.help",
        "peekOfCode": "def draw_commands(gui: imgui.GUI, commands: Iterable[tuple[str, str]]):\n    for key, val in commands:\n        val = val.split(\"\\n\")\n        if len(val) > 1:\n            gui.text(f\"{key}:\")\n            for line in val:\n                gui.text(f\"    {line}\")\n        else:\n            gui.text(f\"{key}: {val[0]}\")\ndef reset():",
        "detail": "core.help.help",
        "documentation": {}
    },
    {
        "label": "reset",
        "kind": 2,
        "importPath": "core.help.help",
        "description": "core.help.help",
        "peekOfCode": "def reset():\n    global current_context_page\n    global sorted_display_list\n    global selected_context\n    global search_phrase\n    global selected_context_page\n    global show_enabled_contexts_only\n    global display_name_to_context_name_map\n    global selected_list\n    global current_list_page",
        "detail": "core.help.help",
        "documentation": {}
    },
    {
        "label": "update_active_contexts_cache",
        "kind": 2,
        "importPath": "core.help.help",
        "description": "core.help.help",
        "peekOfCode": "def update_active_contexts_cache(active_contexts):\n    # print(\"update_active_contexts_cache\")\n    global cached_active_contexts_list\n    cached_active_contexts_list = active_contexts\n# example usage todo: make a list definable in .talon\n# overrides = {\"generic browser\": \"broswer\"}\noverrides = {}\ndef refresh_context_command_map(enabled_only=False):\n    active_contexts = registry.active_contexts()\n    local_context_map = {}",
        "detail": "core.help.help",
        "documentation": {}
    },
    {
        "label": "refresh_context_command_map",
        "kind": 2,
        "importPath": "core.help.help",
        "description": "core.help.help",
        "peekOfCode": "def refresh_context_command_map(enabled_only=False):\n    active_contexts = registry.active_contexts()\n    local_context_map = {}\n    local_display_name_to_context_name_map = {}\n    local_context_command_map = {}\n    cached_short_context_names = {}\n    for context_name, context in registry.contexts.items():\n        splits = context_name.split(\".\")\n        if \"talon\" == splits[-1]:\n            display_name = splits[-2].replace(\"_\", \" \")",
        "detail": "core.help.help",
        "documentation": {}
    },
    {
        "label": "refresh_rule_word_map",
        "kind": 2,
        "importPath": "core.help.help",
        "description": "core.help.help",
        "peekOfCode": "def refresh_rule_word_map(context_command_map):\n    rule_word_map = defaultdict(set)\n    for context_name, commands in context_command_map.items():\n        for rule in commands:\n            tokens = {token for token in re.split(r\"\\W+\", rule) if token.isalpha()}\n            for token in tokens:\n                rule_word_map[token].add((context_name, rule))\n    return rule_word_map\nevents_registered = False\ndef register_events(register: bool):",
        "detail": "core.help.help",
        "documentation": {}
    },
    {
        "label": "register_events",
        "kind": 2,
        "importPath": "core.help.help",
        "description": "core.help.help",
        "peekOfCode": "def register_events(register: bool):\n    global events_registered\n    if register:\n        if not events_registered and live_update:\n            events_registered = True\n            # registry.register('post:update_contexts', contexts_updated)\n            registry.register(\"update_commands\", commands_updated)\n    else:\n        events_registered = False\n        # registry.unregister('post:update_contexts', contexts_updated)",
        "detail": "core.help.help",
        "documentation": {}
    },
    {
        "label": "hide_all_help_guis",
        "kind": 2,
        "importPath": "core.help.help",
        "description": "core.help.help",
        "peekOfCode": "def hide_all_help_guis():\n    gui_context_help.hide()\n    gui_formatters.hide()\n    gui_list_help.hide()\ndef paginate_list(data, SIZE=None):\n    chunk_size = SIZE or setting_help_max_command_lines_per_page.get()\n    it = iter(data)\n    for i in range(0, len(data), chunk_size):\n        yield {k: data[k] for k in islice(it, chunk_size)}\ndef draw_list_commands(gui: imgui.GUI):",
        "detail": "core.help.help",
        "documentation": {}
    },
    {
        "label": "paginate_list",
        "kind": 2,
        "importPath": "core.help.help",
        "description": "core.help.help",
        "peekOfCode": "def paginate_list(data, SIZE=None):\n    chunk_size = SIZE or setting_help_max_command_lines_per_page.get()\n    it = iter(data)\n    for i in range(0, len(data), chunk_size):\n        yield {k: data[k] for k in islice(it, chunk_size)}\ndef draw_list_commands(gui: imgui.GUI):\n    global selected_list\n    global total_page_count\n    global selected_context_page\n    talon_list = registry.lists[selected_list][0]",
        "detail": "core.help.help",
        "documentation": {}
    },
    {
        "label": "draw_list_commands",
        "kind": 2,
        "importPath": "core.help.help",
        "description": "core.help.help",
        "peekOfCode": "def draw_list_commands(gui: imgui.GUI):\n    global selected_list\n    global total_page_count\n    global selected_context_page\n    talon_list = registry.lists[selected_list][0]\n    # numpages = math.ceil(len(talon_list) / SIZE)\n    pages_list = []\n    for item in paginate_list(talon_list):\n        pages_list.append(item)\n    # print(pages_list)",
        "detail": "core.help.help",
        "documentation": {}
    },
    {
        "label": "gui_list_help",
        "kind": 2,
        "importPath": "core.help.help",
        "description": "core.help.help",
        "peekOfCode": "def gui_list_help(gui: imgui.GUI):\n    global total_page_count\n    global current_list_page\n    global selected_list\n    pages_list = draw_list_commands(gui)\n    total_page_count = len(pages_list)\n    # print(pages_list[current_page])\n    gui.text(f\"{selected_list} {current_list_page}/{total_page_count}\")\n    gui.line()\n    for key, value in pages_list[current_list_page - 1].items():",
        "detail": "core.help.help",
        "documentation": {}
    },
    {
        "label": "commands_updated",
        "kind": 2,
        "importPath": "core.help.help",
        "description": "core.help.help",
        "peekOfCode": "def commands_updated(_):\n    update_title()",
        "detail": "core.help.help",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "core.help.help",
        "description": "core.help.help",
        "peekOfCode": "mod = Module()\nmod.list(\"help_contexts\", desc=\"list of available contexts\")\nmod.mode(\"help\", \"mode for commands that are available only when help is visible\")\nsetting_help_max_contexts_per_page = mod.setting(\n    \"help_max_contexts_per_page\",\n    type=int,\n    default=20,\n    desc=\"Max contexts to display per page in help\",\n)\nsetting_help_max_command_lines_per_page = mod.setting(",
        "detail": "core.help.help",
        "documentation": {}
    },
    {
        "label": "setting_help_max_contexts_per_page",
        "kind": 5,
        "importPath": "core.help.help",
        "description": "core.help.help",
        "peekOfCode": "setting_help_max_contexts_per_page = mod.setting(\n    \"help_max_contexts_per_page\",\n    type=int,\n    default=20,\n    desc=\"Max contexts to display per page in help\",\n)\nsetting_help_max_command_lines_per_page = mod.setting(\n    \"help_max_command_lines_per_page\",\n    type=int,\n    default=50,",
        "detail": "core.help.help",
        "documentation": {}
    },
    {
        "label": "setting_help_max_command_lines_per_page",
        "kind": 5,
        "importPath": "core.help.help",
        "description": "core.help.help",
        "peekOfCode": "setting_help_max_command_lines_per_page = mod.setting(\n    \"help_max_command_lines_per_page\",\n    type=int,\n    default=50,\n    desc=\"Max lines of command to display per page in help\",\n)\nctx = Context()\n# context name -> commands\ncontext_command_map = {}\n# rule word -> Set[(context name, rule)]",
        "detail": "core.help.help",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "core.help.help",
        "description": "core.help.help",
        "peekOfCode": "ctx = Context()\n# context name -> commands\ncontext_command_map = {}\n# rule word -> Set[(context name, rule)]\nrule_word_map: dict[str, set[tuple[str, str]]] = defaultdict(set)\nsearch_phrase = None\n# context name -> actual context\ncontext_map = {}\ncurrent_context_page = 1\n# sorted list of diplay names",
        "detail": "core.help.help",
        "documentation": {}
    },
    {
        "label": "context_command_map",
        "kind": 5,
        "importPath": "core.help.help",
        "description": "core.help.help",
        "peekOfCode": "context_command_map = {}\n# rule word -> Set[(context name, rule)]\nrule_word_map: dict[str, set[tuple[str, str]]] = defaultdict(set)\nsearch_phrase = None\n# context name -> actual context\ncontext_map = {}\ncurrent_context_page = 1\n# sorted list of diplay names\nsorted_display_list = []\n# display names -> context name",
        "detail": "core.help.help",
        "documentation": {}
    },
    {
        "label": "search_phrase",
        "kind": 5,
        "importPath": "core.help.help",
        "description": "core.help.help",
        "peekOfCode": "search_phrase = None\n# context name -> actual context\ncontext_map = {}\ncurrent_context_page = 1\n# sorted list of diplay names\nsorted_display_list = []\n# display names -> context name\ndisplay_name_to_context_name_map = {}\nselected_context = None\nselected_context_page = 1",
        "detail": "core.help.help",
        "documentation": {}
    },
    {
        "label": "context_map",
        "kind": 5,
        "importPath": "core.help.help",
        "description": "core.help.help",
        "peekOfCode": "context_map = {}\ncurrent_context_page = 1\n# sorted list of diplay names\nsorted_display_list = []\n# display names -> context name\ndisplay_name_to_context_name_map = {}\nselected_context = None\nselected_context_page = 1\ntotal_page_count = 1\ncached_active_contexts_list = []",
        "detail": "core.help.help",
        "documentation": {}
    },
    {
        "label": "current_context_page",
        "kind": 5,
        "importPath": "core.help.help",
        "description": "core.help.help",
        "peekOfCode": "current_context_page = 1\n# sorted list of diplay names\nsorted_display_list = []\n# display names -> context name\ndisplay_name_to_context_name_map = {}\nselected_context = None\nselected_context_page = 1\ntotal_page_count = 1\ncached_active_contexts_list = []\nlive_update = True",
        "detail": "core.help.help",
        "documentation": {}
    },
    {
        "label": "sorted_display_list",
        "kind": 5,
        "importPath": "core.help.help",
        "description": "core.help.help",
        "peekOfCode": "sorted_display_list = []\n# display names -> context name\ndisplay_name_to_context_name_map = {}\nselected_context = None\nselected_context_page = 1\ntotal_page_count = 1\ncached_active_contexts_list = []\nlive_update = True\nshow_enabled_contexts_only = False\nselected_list = None",
        "detail": "core.help.help",
        "documentation": {}
    },
    {
        "label": "display_name_to_context_name_map",
        "kind": 5,
        "importPath": "core.help.help",
        "description": "core.help.help",
        "peekOfCode": "display_name_to_context_name_map = {}\nselected_context = None\nselected_context_page = 1\ntotal_page_count = 1\ncached_active_contexts_list = []\nlive_update = True\nshow_enabled_contexts_only = False\nselected_list = None\ncurrent_list_page = 1\ndef update_title():",
        "detail": "core.help.help",
        "documentation": {}
    },
    {
        "label": "selected_context",
        "kind": 5,
        "importPath": "core.help.help",
        "description": "core.help.help",
        "peekOfCode": "selected_context = None\nselected_context_page = 1\ntotal_page_count = 1\ncached_active_contexts_list = []\nlive_update = True\nshow_enabled_contexts_only = False\nselected_list = None\ncurrent_list_page = 1\ndef update_title():\n    global live_update",
        "detail": "core.help.help",
        "documentation": {}
    },
    {
        "label": "selected_context_page",
        "kind": 5,
        "importPath": "core.help.help",
        "description": "core.help.help",
        "peekOfCode": "selected_context_page = 1\ntotal_page_count = 1\ncached_active_contexts_list = []\nlive_update = True\nshow_enabled_contexts_only = False\nselected_list = None\ncurrent_list_page = 1\ndef update_title():\n    global live_update\n    global show_enabled_contexts_only",
        "detail": "core.help.help",
        "documentation": {}
    },
    {
        "label": "total_page_count",
        "kind": 5,
        "importPath": "core.help.help",
        "description": "core.help.help",
        "peekOfCode": "total_page_count = 1\ncached_active_contexts_list = []\nlive_update = True\nshow_enabled_contexts_only = False\nselected_list = None\ncurrent_list_page = 1\ndef update_title():\n    global live_update\n    global show_enabled_contexts_only\n    if live_update:",
        "detail": "core.help.help",
        "documentation": {}
    },
    {
        "label": "cached_active_contexts_list",
        "kind": 5,
        "importPath": "core.help.help",
        "description": "core.help.help",
        "peekOfCode": "cached_active_contexts_list = []\nlive_update = True\nshow_enabled_contexts_only = False\nselected_list = None\ncurrent_list_page = 1\ndef update_title():\n    global live_update\n    global show_enabled_contexts_only\n    if live_update:\n        if gui_context_help.showing:",
        "detail": "core.help.help",
        "documentation": {}
    },
    {
        "label": "live_update",
        "kind": 5,
        "importPath": "core.help.help",
        "description": "core.help.help",
        "peekOfCode": "live_update = True\nshow_enabled_contexts_only = False\nselected_list = None\ncurrent_list_page = 1\ndef update_title():\n    global live_update\n    global show_enabled_contexts_only\n    if live_update:\n        if gui_context_help.showing:\n            if selected_context is None:",
        "detail": "core.help.help",
        "documentation": {}
    },
    {
        "label": "show_enabled_contexts_only",
        "kind": 5,
        "importPath": "core.help.help",
        "description": "core.help.help",
        "peekOfCode": "show_enabled_contexts_only = False\nselected_list = None\ncurrent_list_page = 1\ndef update_title():\n    global live_update\n    global show_enabled_contexts_only\n    if live_update:\n        if gui_context_help.showing:\n            if selected_context is None:\n                refresh_context_command_map(show_enabled_contexts_only)",
        "detail": "core.help.help",
        "documentation": {}
    },
    {
        "label": "selected_list",
        "kind": 5,
        "importPath": "core.help.help",
        "description": "core.help.help",
        "peekOfCode": "selected_list = None\ncurrent_list_page = 1\ndef update_title():\n    global live_update\n    global show_enabled_contexts_only\n    if live_update:\n        if gui_context_help.showing:\n            if selected_context is None:\n                refresh_context_command_map(show_enabled_contexts_only)\n            else:",
        "detail": "core.help.help",
        "documentation": {}
    },
    {
        "label": "current_list_page",
        "kind": 5,
        "importPath": "core.help.help",
        "description": "core.help.help",
        "peekOfCode": "current_list_page = 1\ndef update_title():\n    global live_update\n    global show_enabled_contexts_only\n    if live_update:\n        if gui_context_help.showing:\n            if selected_context is None:\n                refresh_context_command_map(show_enabled_contexts_only)\n            else:\n                update_active_contexts_cache(registry.active_contexts())",
        "detail": "core.help.help",
        "documentation": {}
    },
    {
        "label": "overrides",
        "kind": 5,
        "importPath": "core.help.help",
        "description": "core.help.help",
        "peekOfCode": "overrides = {}\ndef refresh_context_command_map(enabled_only=False):\n    active_contexts = registry.active_contexts()\n    local_context_map = {}\n    local_display_name_to_context_name_map = {}\n    local_context_command_map = {}\n    cached_short_context_names = {}\n    for context_name, context in registry.contexts.items():\n        splits = context_name.split(\".\")\n        if \"talon\" == splits[-1]:",
        "detail": "core.help.help",
        "documentation": {}
    },
    {
        "label": "events_registered",
        "kind": 5,
        "importPath": "core.help.help",
        "description": "core.help.help",
        "peekOfCode": "events_registered = False\ndef register_events(register: bool):\n    global events_registered\n    if register:\n        if not events_registered and live_update:\n            events_registered = True\n            # registry.register('post:update_contexts', contexts_updated)\n            registry.register(\"update_commands\", commands_updated)\n    else:\n        events_registered = False",
        "detail": "core.help.help",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "core.help.help_scope",
        "description": "core.help.help_scope",
        "peekOfCode": "class Actions:\n    def help_scope_toggle():\n        \"\"\"Toggle help scope gui\"\"\"\n        if gui.showing:\n            actions.mode.disable(\"user.help_scope\")\n            gui.hide()\n        else:\n            actions.mode.enable(\"user.help_scope\")\n            gui.show()",
        "detail": "core.help.help_scope",
        "documentation": {}
    },
    {
        "label": "gui",
        "kind": 2,
        "importPath": "core.help.help_scope",
        "description": "core.help.help_scope",
        "peekOfCode": "def gui(gui: imgui.GUI):\n    gui.text(\"Scope\")\n    gui.line()\n    gui.spacer()\n    gui.text(\"Modes\")\n    gui.line()\n    for mode in sorted(scope.get(\"mode\")):\n        gui.text(mode)\n    gui.spacer()\n    gui.text(\"Tags\")",
        "detail": "core.help.help_scope",
        "documentation": {}
    },
    {
        "label": "print_value",
        "kind": 2,
        "importPath": "core.help.help_scope",
        "description": "core.help.help_scope",
        "peekOfCode": "def print_value(gui: imgui.GUI, path: str, value, ignore: set[str] = {}):\n    if isinstance(value, dict):\n        for key in value:\n            if key not in ignore:\n                p = f\"{path}.{key}\" if path else key\n                print_value(gui, p, value[key])\n    elif value:\n        gui.text(f\"{path}: {format_value(value)}\")\ndef format_value(value):\n    if isinstance(value, (list, set)):",
        "detail": "core.help.help_scope",
        "documentation": {}
    },
    {
        "label": "format_value",
        "kind": 2,
        "importPath": "core.help.help_scope",
        "description": "core.help.help_scope",
        "peekOfCode": "def format_value(value):\n    if isinstance(value, (list, set)):\n        value = \", \".join(sorted(value))\n    if isinstance(value, str) and len(value) > setting_max_length.get() + 4:\n        return f\"{value[:setting_max_length.get()]} ...\"\n    return value\n@mod.action_class\nclass Actions:\n    def help_scope_toggle():\n        \"\"\"Toggle help scope gui\"\"\"",
        "detail": "core.help.help_scope",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "core.help.help_scope",
        "description": "core.help.help_scope",
        "peekOfCode": "mod = Module()\nmod.mode(\"help_scope\", \"Mode for showing the scope help gui\")\nsetting_max_length = mod.setting(\n    \"help_scope_max_length\",\n    type=int,\n    default=50,\n)\n@imgui.open(x=ui.main_screen().x)\ndef gui(gui: imgui.GUI):\n    gui.text(\"Scope\")",
        "detail": "core.help.help_scope",
        "documentation": {}
    },
    {
        "label": "setting_max_length",
        "kind": 5,
        "importPath": "core.help.help_scope",
        "description": "core.help.help_scope",
        "peekOfCode": "setting_max_length = mod.setting(\n    \"help_scope_max_length\",\n    type=int,\n    default=50,\n)\n@imgui.open(x=ui.main_screen().x)\ndef gui(gui: imgui.GUI):\n    gui.text(\"Scope\")\n    gui.line()\n    gui.spacer()",
        "detail": "core.help.help_scope",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "core.homophones.homophones",
        "description": "core.homophones.homophones",
        "peekOfCode": "class Actions:\n    def homophones_hide():\n        \"\"\"Hides the homophones display\"\"\"\n        close_homophones()\n    def homophones_show(m: str):\n        \"\"\"Show the homophones display\"\"\"\n        raise_homophones(m, False, False)\n    def homophones_show_auto():\n        \"\"\"Show homophones for selection, or current word if selection is empty.\"\"\"\n        text = actions.edit.selected_text()",
        "detail": "core.homophones.homophones",
        "documentation": {}
    },
    {
        "label": "update_homophones",
        "kind": 2,
        "importPath": "core.homophones.homophones",
        "description": "core.homophones.homophones",
        "peekOfCode": "def update_homophones(name, flags):\n    if name != homophones_file:\n        return\n    phones = {}\n    canonical_list = []\n    with open(homophones_file) as f:\n        for line in f:\n            words = line.rstrip().split(\",\")\n            canonical_list.append(words[0])\n            merged_words = set(words)",
        "detail": "core.homophones.homophones",
        "documentation": {}
    },
    {
        "label": "close_homophones",
        "kind": 2,
        "importPath": "core.homophones.homophones",
        "description": "core.homophones.homophones",
        "peekOfCode": "def close_homophones():\n    gui.hide()\n    actions.mode.disable(\"user.homophones\")\nPHONES_FORMATTERS = [\n    lambda word: word.capitalize(),\n    lambda word: word.upper(),\n]\ndef find_matching_format_function(word_with_formatting, format_functions):\n    \"\"\"Finds the formatter function from a list of formatter functions which transforms a word into itself.\n    Returns an identity function if none exists\"\"\"",
        "detail": "core.homophones.homophones",
        "documentation": {}
    },
    {
        "label": "find_matching_format_function",
        "kind": 2,
        "importPath": "core.homophones.homophones",
        "description": "core.homophones.homophones",
        "peekOfCode": "def find_matching_format_function(word_with_formatting, format_functions):\n    \"\"\"Finds the formatter function from a list of formatter functions which transforms a word into itself.\n    Returns an identity function if none exists\"\"\"\n    for formatter in format_functions:\n        formatted_word = formatter(word_with_formatting)\n        if word_with_formatting == formatted_word:\n            return formatter\n    return lambda word: word\ndef raise_homophones(word_to_find_homophones_for, forced=False, selection=False):\n    global quick_replace",
        "detail": "core.homophones.homophones",
        "documentation": {}
    },
    {
        "label": "raise_homophones",
        "kind": 2,
        "importPath": "core.homophones.homophones",
        "description": "core.homophones.homophones",
        "peekOfCode": "def raise_homophones(word_to_find_homophones_for, forced=False, selection=False):\n    global quick_replace\n    global active_word_list\n    global show_help\n    global force_raise\n    global is_selection\n    force_raise = forced\n    is_selection = selection\n    if is_selection:\n        word_to_find_homophones_for = word_to_find_homophones_for.strip()",
        "detail": "core.homophones.homophones",
        "documentation": {}
    },
    {
        "label": "gui",
        "kind": 2,
        "importPath": "core.homophones.homophones",
        "description": "core.homophones.homophones",
        "peekOfCode": "def gui(gui: imgui.GUI):\n    global active_word_list\n    if show_help:\n        gui.text(\"Homephone help - todo\")\n    else:\n        gui.text(\"Select a homophone\")\n        gui.line()\n        index = 1\n        for word in active_word_list:\n            if gui.button(f\"Choose {index}: {word}\"):",
        "detail": "core.homophones.homophones",
        "documentation": {}
    },
    {
        "label": "show_help_gui",
        "kind": 2,
        "importPath": "core.homophones.homophones",
        "description": "core.homophones.homophones",
        "peekOfCode": "def show_help_gui():\n    global show_help\n    show_help = True\n    gui.show()\n@mod.capture(rule=\"{self.homophones_canonicals}\")\ndef homophones_canonical(m) -> str:\n    \"Returns a single string\"\n    return m.homophones_canonicals\n@mod.action_class\nclass Actions:",
        "detail": "core.homophones.homophones",
        "documentation": {}
    },
    {
        "label": "homophones_canonical",
        "kind": 2,
        "importPath": "core.homophones.homophones",
        "description": "core.homophones.homophones",
        "peekOfCode": "def homophones_canonical(m) -> str:\n    \"Returns a single string\"\n    return m.homophones_canonicals\n@mod.action_class\nclass Actions:\n    def homophones_hide():\n        \"\"\"Hides the homophones display\"\"\"\n        close_homophones()\n    def homophones_show(m: str):\n        \"\"\"Show the homophones display\"\"\"",
        "detail": "core.homophones.homophones",
        "documentation": {}
    },
    {
        "label": "cwd",
        "kind": 5,
        "importPath": "core.homophones.homophones",
        "description": "core.homophones.homophones",
        "peekOfCode": "cwd = os.path.dirname(os.path.realpath(__file__))\nhomophones_file = os.path.join(cwd, \"homophones.csv\")\n# if quick_replace, then when a word is selected and only one homophone exists,\n# replace it without bringing up the options\nquick_replace = True\nshow_help = False\n########################################################################\nctx = Context()\nmod = Module()\nmod.mode(\"homophones\")",
        "detail": "core.homophones.homophones",
        "documentation": {}
    },
    {
        "label": "homophones_file",
        "kind": 5,
        "importPath": "core.homophones.homophones",
        "description": "core.homophones.homophones",
        "peekOfCode": "homophones_file = os.path.join(cwd, \"homophones.csv\")\n# if quick_replace, then when a word is selected and only one homophone exists,\n# replace it without bringing up the options\nquick_replace = True\nshow_help = False\n########################################################################\nctx = Context()\nmod = Module()\nmod.mode(\"homophones\")\nmod.list(\"homophones_canonicals\", desc=\"list of words \")",
        "detail": "core.homophones.homophones",
        "documentation": {}
    },
    {
        "label": "quick_replace",
        "kind": 5,
        "importPath": "core.homophones.homophones",
        "description": "core.homophones.homophones",
        "peekOfCode": "quick_replace = True\nshow_help = False\n########################################################################\nctx = Context()\nmod = Module()\nmod.mode(\"homophones\")\nmod.list(\"homophones_canonicals\", desc=\"list of words \")\nmain_screen = ui.main_screen()\ndef update_homophones(name, flags):\n    if name != homophones_file:",
        "detail": "core.homophones.homophones",
        "documentation": {}
    },
    {
        "label": "show_help",
        "kind": 5,
        "importPath": "core.homophones.homophones",
        "description": "core.homophones.homophones",
        "peekOfCode": "show_help = False\n########################################################################\nctx = Context()\nmod = Module()\nmod.mode(\"homophones\")\nmod.list(\"homophones_canonicals\", desc=\"list of words \")\nmain_screen = ui.main_screen()\ndef update_homophones(name, flags):\n    if name != homophones_file:\n        return",
        "detail": "core.homophones.homophones",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "core.homophones.homophones",
        "description": "core.homophones.homophones",
        "peekOfCode": "ctx = Context()\nmod = Module()\nmod.mode(\"homophones\")\nmod.list(\"homophones_canonicals\", desc=\"list of words \")\nmain_screen = ui.main_screen()\ndef update_homophones(name, flags):\n    if name != homophones_file:\n        return\n    phones = {}\n    canonical_list = []",
        "detail": "core.homophones.homophones",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "core.homophones.homophones",
        "description": "core.homophones.homophones",
        "peekOfCode": "mod = Module()\nmod.mode(\"homophones\")\nmod.list(\"homophones_canonicals\", desc=\"list of words \")\nmain_screen = ui.main_screen()\ndef update_homophones(name, flags):\n    if name != homophones_file:\n        return\n    phones = {}\n    canonical_list = []\n    with open(homophones_file) as f:",
        "detail": "core.homophones.homophones",
        "documentation": {}
    },
    {
        "label": "main_screen",
        "kind": 5,
        "importPath": "core.homophones.homophones",
        "description": "core.homophones.homophones",
        "peekOfCode": "main_screen = ui.main_screen()\ndef update_homophones(name, flags):\n    if name != homophones_file:\n        return\n    phones = {}\n    canonical_list = []\n    with open(homophones_file) as f:\n        for line in f:\n            words = line.rstrip().split(\",\")\n            canonical_list.append(words[0])",
        "detail": "core.homophones.homophones",
        "documentation": {}
    },
    {
        "label": "active_word_list",
        "kind": 5,
        "importPath": "core.homophones.homophones",
        "description": "core.homophones.homophones",
        "peekOfCode": "active_word_list = None\nis_selection = False\ndef close_homophones():\n    gui.hide()\n    actions.mode.disable(\"user.homophones\")\nPHONES_FORMATTERS = [\n    lambda word: word.capitalize(),\n    lambda word: word.upper(),\n]\ndef find_matching_format_function(word_with_formatting, format_functions):",
        "detail": "core.homophones.homophones",
        "documentation": {}
    },
    {
        "label": "is_selection",
        "kind": 5,
        "importPath": "core.homophones.homophones",
        "description": "core.homophones.homophones",
        "peekOfCode": "is_selection = False\ndef close_homophones():\n    gui.hide()\n    actions.mode.disable(\"user.homophones\")\nPHONES_FORMATTERS = [\n    lambda word: word.capitalize(),\n    lambda word: word.upper(),\n]\ndef find_matching_format_function(word_with_formatting, format_functions):\n    \"\"\"Finds the formatter function from a list of formatter functions which transforms a word into itself.",
        "detail": "core.homophones.homophones",
        "documentation": {}
    },
    {
        "label": "PHONES_FORMATTERS",
        "kind": 5,
        "importPath": "core.homophones.homophones",
        "description": "core.homophones.homophones",
        "peekOfCode": "PHONES_FORMATTERS = [\n    lambda word: word.capitalize(),\n    lambda word: word.upper(),\n]\ndef find_matching_format_function(word_with_formatting, format_functions):\n    \"\"\"Finds the formatter function from a list of formatter functions which transforms a word into itself.\n    Returns an identity function if none exists\"\"\"\n    for formatter in format_functions:\n        formatted_word = formatter(word_with_formatting)\n        if word_with_formatting == formatted_word:",
        "detail": "core.homophones.homophones",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "core.keys.keys",
        "description": "core.keys.keys",
        "peekOfCode": "class Actions:\n    def move_cursor(s: str):\n        \"\"\"Given a sequence of directions, eg. 'left left up', moves the cursor accordingly using edit.{left,right,up,down}.\"\"\"\n        for d in s.split():\n            if d in (\"left\", \"right\", \"up\", \"down\"):\n                getattr(actions.edit, d)()\n            else:\n                raise RuntimeError(f\"invalid arrow key: {d}\")",
        "detail": "core.keys.keys",
        "documentation": {}
    },
    {
        "label": "modifiers",
        "kind": 2,
        "importPath": "core.keys.keys",
        "description": "core.keys.keys",
        "peekOfCode": "def modifiers(m) -> str:\n    \"One or more modifier keys\"\n    return \"-\".join(m.modifier_key_list)\n@mod.capture(rule=\"{self.arrow_key}\")\ndef arrow_key(m) -> str:\n    \"One directional arrow key\"\n    return m.arrow_key\n@mod.capture(rule=\"<self.arrow_key>+\")\ndef arrow_keys(m) -> str:\n    \"One or more arrow keys separated by a space\"",
        "detail": "core.keys.keys",
        "documentation": {}
    },
    {
        "label": "arrow_key",
        "kind": 2,
        "importPath": "core.keys.keys",
        "description": "core.keys.keys",
        "peekOfCode": "def arrow_key(m) -> str:\n    \"One directional arrow key\"\n    return m.arrow_key\n@mod.capture(rule=\"<self.arrow_key>+\")\ndef arrow_keys(m) -> str:\n    \"One or more arrow keys separated by a space\"\n    return str(m)\n@mod.capture(rule=\"{self.number_key}\")\ndef number_key(m) -> str:\n    \"One number key\"",
        "detail": "core.keys.keys",
        "documentation": {}
    },
    {
        "label": "arrow_keys",
        "kind": 2,
        "importPath": "core.keys.keys",
        "description": "core.keys.keys",
        "peekOfCode": "def arrow_keys(m) -> str:\n    \"One or more arrow keys separated by a space\"\n    return str(m)\n@mod.capture(rule=\"{self.number_key}\")\ndef number_key(m) -> str:\n    \"One number key\"\n    return m.number_key\n@mod.capture(rule=\"{self.letter}\")\ndef letter(m) -> str:\n    \"One letter key\"",
        "detail": "core.keys.keys",
        "documentation": {}
    },
    {
        "label": "number_key",
        "kind": 2,
        "importPath": "core.keys.keys",
        "description": "core.keys.keys",
        "peekOfCode": "def number_key(m) -> str:\n    \"One number key\"\n    return m.number_key\n@mod.capture(rule=\"{self.letter}\")\ndef letter(m) -> str:\n    \"One letter key\"\n    return m.letter\n@mod.capture(rule=\"{self.special_key}\")\ndef special_key(m) -> str:\n    \"One special key\"",
        "detail": "core.keys.keys",
        "documentation": {}
    },
    {
        "label": "letter",
        "kind": 2,
        "importPath": "core.keys.keys",
        "description": "core.keys.keys",
        "peekOfCode": "def letter(m) -> str:\n    \"One letter key\"\n    return m.letter\n@mod.capture(rule=\"{self.special_key}\")\ndef special_key(m) -> str:\n    \"One special key\"\n    return m.special_key\n@mod.capture(rule=\"{self.symbol_key}\")\ndef symbol_key(m) -> str:\n    \"One symbol key\"",
        "detail": "core.keys.keys",
        "documentation": {}
    },
    {
        "label": "special_key",
        "kind": 2,
        "importPath": "core.keys.keys",
        "description": "core.keys.keys",
        "peekOfCode": "def special_key(m) -> str:\n    \"One special key\"\n    return m.special_key\n@mod.capture(rule=\"{self.symbol_key}\")\ndef symbol_key(m) -> str:\n    \"One symbol key\"\n    return m.symbol_key\n@mod.capture(rule=\"{self.function_key}\")\ndef function_key(m) -> str:\n    \"One function key\"",
        "detail": "core.keys.keys",
        "documentation": {}
    },
    {
        "label": "symbol_key",
        "kind": 2,
        "importPath": "core.keys.keys",
        "description": "core.keys.keys",
        "peekOfCode": "def symbol_key(m) -> str:\n    \"One symbol key\"\n    return m.symbol_key\n@mod.capture(rule=\"{self.function_key}\")\ndef function_key(m) -> str:\n    \"One function key\"\n    return m.function_key\n@mod.capture(rule=\"( <self.letter> | <self.number_key> | <self.symbol_key> )\")\ndef any_alphanumeric_key(m) -> str:\n    \"any alphanumeric key\"",
        "detail": "core.keys.keys",
        "documentation": {}
    },
    {
        "label": "function_key",
        "kind": 2,
        "importPath": "core.keys.keys",
        "description": "core.keys.keys",
        "peekOfCode": "def function_key(m) -> str:\n    \"One function key\"\n    return m.function_key\n@mod.capture(rule=\"( <self.letter> | <self.number_key> | <self.symbol_key> )\")\ndef any_alphanumeric_key(m) -> str:\n    \"any alphanumeric key\"\n    return str(m)\n@mod.capture(\n    rule=\"( <self.letter> | <self.number_key> | <self.symbol_key> \"\n    \"| <self.arrow_key> | <self.function_key> | <self.special_key> )\"",
        "detail": "core.keys.keys",
        "documentation": {}
    },
    {
        "label": "any_alphanumeric_key",
        "kind": 2,
        "importPath": "core.keys.keys",
        "description": "core.keys.keys",
        "peekOfCode": "def any_alphanumeric_key(m) -> str:\n    \"any alphanumeric key\"\n    return str(m)\n@mod.capture(\n    rule=\"( <self.letter> | <self.number_key> | <self.symbol_key> \"\n    \"| <self.arrow_key> | <self.function_key> | <self.special_key> )\"\n)\ndef unmodified_key(m) -> str:\n    \"A single key with no modifiers\"\n    return str(m)",
        "detail": "core.keys.keys",
        "documentation": {}
    },
    {
        "label": "unmodified_key",
        "kind": 2,
        "importPath": "core.keys.keys",
        "description": "core.keys.keys",
        "peekOfCode": "def unmodified_key(m) -> str:\n    \"A single key with no modifiers\"\n    return str(m)\n@mod.capture(rule=\"{self.modifier_key}* <self.unmodified_key>\")\ndef key(m) -> str:\n    \"A single key with optional modifiers\"\n    try:\n        mods = m.modifier_key_list\n    except AttributeError:\n        mods = []",
        "detail": "core.keys.keys",
        "documentation": {}
    },
    {
        "label": "key",
        "kind": 2,
        "importPath": "core.keys.keys",
        "description": "core.keys.keys",
        "peekOfCode": "def key(m) -> str:\n    \"A single key with optional modifiers\"\n    try:\n        mods = m.modifier_key_list\n    except AttributeError:\n        mods = []\n    return \"-\".join(mods + [m.unmodified_key])\n@mod.capture(rule=\"<self.key>+\")\ndef keys(m) -> str:\n    \"A sequence of one or more keys with optional modifiers\"",
        "detail": "core.keys.keys",
        "documentation": {}
    },
    {
        "label": "keys",
        "kind": 2,
        "importPath": "core.keys.keys",
        "description": "core.keys.keys",
        "peekOfCode": "def keys(m) -> str:\n    \"A sequence of one or more keys with optional modifiers\"\n    return \" \".join(m.key_list)\n@mod.capture(rule=\"{self.letter}+\")\ndef letters(m) -> str:\n    \"Multiple letter keys\"\n    return \"\".join(m.letter_list)\nctx = Context()\nmodifier_keys = {\n    # If you find 'alt' is often misrecognized, try using 'alter'.",
        "detail": "core.keys.keys",
        "documentation": {}
    },
    {
        "label": "letters",
        "kind": 2,
        "importPath": "core.keys.keys",
        "description": "core.keys.keys",
        "peekOfCode": "def letters(m) -> str:\n    \"Multiple letter keys\"\n    return \"\".join(m.letter_list)\nctx = Context()\nmodifier_keys = {\n    # If you find 'alt' is often misrecognized, try using 'alter'.\n    \"alt\": \"alt\",  #'alter': 'alt',\n    \"control\": \"ctrl\",  #'troll':   'ctrl',\n    \"shift\": \"shift\",  #'sky':     'shift',\n    \"super\": \"super\",",
        "detail": "core.keys.keys",
        "documentation": {}
    },
    {
        "label": "#alphabets",
        "kind": 5,
        "importPath": "core.keys.keys",
        "description": "core.keys.keys",
        "peekOfCode": "#alphabets = \"air bat cap drum each fine gust harp sit jury crunch look made near odd pit quench red sun trap urge vest whale plex yank zip\"\n# NATO.\n#alphabets = \"alpha bravo charlie delta echo foxtrot golf hotel india juliet kilo lima mama nancy oscar papa quench romeo sierra tango uniform victory whisky plex yank zip\"\n# Mixed.\nalphabets = \"alpha bravo charlie delta echo fox golf harp india juliet kilo lima mama nancy oscar papa quick romeo sun tango uni vice whisky plex yank zip\"\ndefault_alphabet = alphabets.split(\" \")\nletters_string = \"abcdefghijklmnopqrstuvwxyz\"\ndefault_digits = \"zero one two three four five six seven eight nine\".split(\" \")\nnumbers = [str(i) for i in range(10)]\ndefault_f_digits = (",
        "detail": "core.keys.keys",
        "documentation": {}
    },
    {
        "label": "#alphabets",
        "kind": 5,
        "importPath": "core.keys.keys",
        "description": "core.keys.keys",
        "peekOfCode": "#alphabets = \"alpha bravo charlie delta echo foxtrot golf hotel india juliet kilo lima mama nancy oscar papa quench romeo sierra tango uniform victory whisky plex yank zip\"\n# Mixed.\nalphabets = \"alpha bravo charlie delta echo fox golf harp india juliet kilo lima mama nancy oscar papa quick romeo sun tango uni vice whisky plex yank zip\"\ndefault_alphabet = alphabets.split(\" \")\nletters_string = \"abcdefghijklmnopqrstuvwxyz\"\ndefault_digits = \"zero one two three four five six seven eight nine\".split(\" \")\nnumbers = [str(i) for i in range(10)]\ndefault_f_digits = (\n    \"one two three four five six seven eight nine ten eleven twelve\".split(\" \")\n)",
        "detail": "core.keys.keys",
        "documentation": {}
    },
    {
        "label": "alphabets",
        "kind": 5,
        "importPath": "core.keys.keys",
        "description": "core.keys.keys",
        "peekOfCode": "alphabets = \"alpha bravo charlie delta echo fox golf harp india juliet kilo lima mama nancy oscar papa quick romeo sun tango uni vice whisky plex yank zip\"\ndefault_alphabet = alphabets.split(\" \")\nletters_string = \"abcdefghijklmnopqrstuvwxyz\"\ndefault_digits = \"zero one two three four five six seven eight nine\".split(\" \")\nnumbers = [str(i) for i in range(10)]\ndefault_f_digits = (\n    \"one two three four five six seven eight nine ten eleven twelve\".split(\" \")\n)\nmod = Module()\nmod.list(\"letter\", desc=\"The spoken phonetic alphabet\")",
        "detail": "core.keys.keys",
        "documentation": {}
    },
    {
        "label": "default_alphabet",
        "kind": 5,
        "importPath": "core.keys.keys",
        "description": "core.keys.keys",
        "peekOfCode": "default_alphabet = alphabets.split(\" \")\nletters_string = \"abcdefghijklmnopqrstuvwxyz\"\ndefault_digits = \"zero one two three four five six seven eight nine\".split(\" \")\nnumbers = [str(i) for i in range(10)]\ndefault_f_digits = (\n    \"one two three four five six seven eight nine ten eleven twelve\".split(\" \")\n)\nmod = Module()\nmod.list(\"letter\", desc=\"The spoken phonetic alphabet\")\nmod.list(\"symbol_key\", desc=\"All symbols from the keyboard\")",
        "detail": "core.keys.keys",
        "documentation": {}
    },
    {
        "label": "letters_string",
        "kind": 5,
        "importPath": "core.keys.keys",
        "description": "core.keys.keys",
        "peekOfCode": "letters_string = \"abcdefghijklmnopqrstuvwxyz\"\ndefault_digits = \"zero one two three four five six seven eight nine\".split(\" \")\nnumbers = [str(i) for i in range(10)]\ndefault_f_digits = (\n    \"one two three four five six seven eight nine ten eleven twelve\".split(\" \")\n)\nmod = Module()\nmod.list(\"letter\", desc=\"The spoken phonetic alphabet\")\nmod.list(\"symbol_key\", desc=\"All symbols from the keyboard\")\nmod.list(\"arrow_key\", desc=\"All arrow keys\")",
        "detail": "core.keys.keys",
        "documentation": {}
    },
    {
        "label": "default_digits",
        "kind": 5,
        "importPath": "core.keys.keys",
        "description": "core.keys.keys",
        "peekOfCode": "default_digits = \"zero one two three four five six seven eight nine\".split(\" \")\nnumbers = [str(i) for i in range(10)]\ndefault_f_digits = (\n    \"one two three four five six seven eight nine ten eleven twelve\".split(\" \")\n)\nmod = Module()\nmod.list(\"letter\", desc=\"The spoken phonetic alphabet\")\nmod.list(\"symbol_key\", desc=\"All symbols from the keyboard\")\nmod.list(\"arrow_key\", desc=\"All arrow keys\")\nmod.list(\"number_key\", desc=\"All number keys\")",
        "detail": "core.keys.keys",
        "documentation": {}
    },
    {
        "label": "numbers",
        "kind": 5,
        "importPath": "core.keys.keys",
        "description": "core.keys.keys",
        "peekOfCode": "numbers = [str(i) for i in range(10)]\ndefault_f_digits = (\n    \"one two three four five six seven eight nine ten eleven twelve\".split(\" \")\n)\nmod = Module()\nmod.list(\"letter\", desc=\"The spoken phonetic alphabet\")\nmod.list(\"symbol_key\", desc=\"All symbols from the keyboard\")\nmod.list(\"arrow_key\", desc=\"All arrow keys\")\nmod.list(\"number_key\", desc=\"All number keys\")\nmod.list(\"modifier_key\", desc=\"All modifier keys\")",
        "detail": "core.keys.keys",
        "documentation": {}
    },
    {
        "label": "default_f_digits",
        "kind": 5,
        "importPath": "core.keys.keys",
        "description": "core.keys.keys",
        "peekOfCode": "default_f_digits = (\n    \"one two three four five six seven eight nine ten eleven twelve\".split(\" \")\n)\nmod = Module()\nmod.list(\"letter\", desc=\"The spoken phonetic alphabet\")\nmod.list(\"symbol_key\", desc=\"All symbols from the keyboard\")\nmod.list(\"arrow_key\", desc=\"All arrow keys\")\nmod.list(\"number_key\", desc=\"All number keys\")\nmod.list(\"modifier_key\", desc=\"All modifier keys\")\nmod.list(\"function_key\", desc=\"All function keys\")",
        "detail": "core.keys.keys",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "core.keys.keys",
        "description": "core.keys.keys",
        "peekOfCode": "mod = Module()\nmod.list(\"letter\", desc=\"The spoken phonetic alphabet\")\nmod.list(\"symbol_key\", desc=\"All symbols from the keyboard\")\nmod.list(\"arrow_key\", desc=\"All arrow keys\")\nmod.list(\"number_key\", desc=\"All number keys\")\nmod.list(\"modifier_key\", desc=\"All modifier keys\")\nmod.list(\"function_key\", desc=\"All function keys\")\nmod.list(\"special_key\", desc=\"All special keys\")\nmod.list(\"punctuation\", desc=\"words for inserting punctuation into text\")\n@mod.capture(rule=\"{self.modifier_key}+\")",
        "detail": "core.keys.keys",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "core.keys.keys",
        "description": "core.keys.keys",
        "peekOfCode": "ctx = Context()\nmodifier_keys = {\n    # If you find 'alt' is often misrecognized, try using 'alter'.\n    \"alt\": \"alt\",  #'alter': 'alt',\n    \"control\": \"ctrl\",  #'troll':   'ctrl',\n    \"shift\": \"shift\",  #'sky':     'shift',\n    \"super\": \"super\",\n}\nif app.platform == \"mac\":\n    modifier_keys[\"command\"] = \"cmd\"",
        "detail": "core.keys.keys",
        "documentation": {}
    },
    {
        "label": "modifier_keys",
        "kind": 5,
        "importPath": "core.keys.keys",
        "description": "core.keys.keys",
        "peekOfCode": "modifier_keys = {\n    # If you find 'alt' is often misrecognized, try using 'alter'.\n    \"alt\": \"alt\",  #'alter': 'alt',\n    \"control\": \"ctrl\",  #'troll':   'ctrl',\n    \"shift\": \"shift\",  #'sky':     'shift',\n    \"super\": \"super\",\n}\nif app.platform == \"mac\":\n    modifier_keys[\"command\"] = \"cmd\"\n    modifier_keys[\"option\"] = \"alt\"",
        "detail": "core.keys.keys",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"self.modifier_key\"]",
        "kind": 5,
        "importPath": "core.keys.keys",
        "description": "core.keys.keys",
        "peekOfCode": "ctx.lists[\"self.modifier_key\"] = modifier_keys\nalphabet = dict(zip(default_alphabet, letters_string))\nctx.lists[\"self.letter\"] = alphabet\n# `punctuation_words` is for words you want available BOTH in dictation and as key names in command mode.\n# `symbol_key_words` is for key names that should be available in command mode, but NOT during dictation.\npunctuation_words = {\n    # TODO: I'm not sure why we need these, I think it has something to do with\n    # Dragon. Possibly it has been fixed by later improvements to talon? -rntz\n    \"`\": \"`\",\n    \",\": \",\",  # <== these things",
        "detail": "core.keys.keys",
        "documentation": {}
    },
    {
        "label": "alphabet",
        "kind": 5,
        "importPath": "core.keys.keys",
        "description": "core.keys.keys",
        "peekOfCode": "alphabet = dict(zip(default_alphabet, letters_string))\nctx.lists[\"self.letter\"] = alphabet\n# `punctuation_words` is for words you want available BOTH in dictation and as key names in command mode.\n# `symbol_key_words` is for key names that should be available in command mode, but NOT during dictation.\npunctuation_words = {\n    # TODO: I'm not sure why we need these, I think it has something to do with\n    # Dragon. Possibly it has been fixed by later improvements to talon? -rntz\n    \"`\": \"`\",\n    \",\": \",\",  # <== these things\n    \"back tick\": \"`\",",
        "detail": "core.keys.keys",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"self.letter\"]",
        "kind": 5,
        "importPath": "core.keys.keys",
        "description": "core.keys.keys",
        "peekOfCode": "ctx.lists[\"self.letter\"] = alphabet\n# `punctuation_words` is for words you want available BOTH in dictation and as key names in command mode.\n# `symbol_key_words` is for key names that should be available in command mode, but NOT during dictation.\npunctuation_words = {\n    # TODO: I'm not sure why we need these, I think it has something to do with\n    # Dragon. Possibly it has been fixed by later improvements to talon? -rntz\n    \"`\": \"`\",\n    \",\": \",\",  # <== these things\n    \"back tick\": \"`\",\n    \"grave\": \"`\",",
        "detail": "core.keys.keys",
        "documentation": {}
    },
    {
        "label": "punctuation_words",
        "kind": 5,
        "importPath": "core.keys.keys",
        "description": "core.keys.keys",
        "peekOfCode": "punctuation_words = {\n    # TODO: I'm not sure why we need these, I think it has something to do with\n    # Dragon. Possibly it has been fixed by later improvements to talon? -rntz\n    \"`\": \"`\",\n    \",\": \",\",  # <== these things\n    \"back tick\": \"`\",\n    \"grave\": \"`\",\n    \"comma\": \",\",\n    # Workaround for issue with conformer b-series; see #946\n    \"coma\": \",\",",
        "detail": "core.keys.keys",
        "documentation": {}
    },
    {
        "label": "symbol_key_words",
        "kind": 5,
        "importPath": "core.keys.keys",
        "description": "core.keys.keys",
        "peekOfCode": "symbol_key_words = {\n    \"dot\": \".\",\n    \"point\": \".\",\n    \"quote\": \"'\",\n    \"question\": \"?\",\n    \"apostrophe\": \"'\",\n    \"L square\": \"[\",\n    \"left square\": \"[\",\n    \"square\": \"[\",\n    \"R square\": \"]\",",
        "detail": "core.keys.keys",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"self.punctuation\"]",
        "kind": 5,
        "importPath": "core.keys.keys",
        "description": "core.keys.keys",
        "peekOfCode": "ctx.lists[\"self.punctuation\"] = punctuation_words\nctx.lists[\"self.symbol_key\"] = symbol_key_words\nctx.lists[\"self.number_key\"] = dict(zip(default_digits, numbers))\nctx.lists[\"self.arrow_key\"] = {\n    \"down\": \"down\",\n    \"left\": \"left\",\n    \"right\": \"right\",\n    \"up\": \"up\",\n}\nsimple_keys = [",
        "detail": "core.keys.keys",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"self.symbol_key\"]",
        "kind": 5,
        "importPath": "core.keys.keys",
        "description": "core.keys.keys",
        "peekOfCode": "ctx.lists[\"self.symbol_key\"] = symbol_key_words\nctx.lists[\"self.number_key\"] = dict(zip(default_digits, numbers))\nctx.lists[\"self.arrow_key\"] = {\n    \"down\": \"down\",\n    \"left\": \"left\",\n    \"right\": \"right\",\n    \"up\": \"up\",\n}\nsimple_keys = [\n    \"end\",",
        "detail": "core.keys.keys",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"self.number_key\"]",
        "kind": 5,
        "importPath": "core.keys.keys",
        "description": "core.keys.keys",
        "peekOfCode": "ctx.lists[\"self.number_key\"] = dict(zip(default_digits, numbers))\nctx.lists[\"self.arrow_key\"] = {\n    \"down\": \"down\",\n    \"left\": \"left\",\n    \"right\": \"right\",\n    \"up\": \"up\",\n}\nsimple_keys = [\n    \"end\",\n    \"enter\",",
        "detail": "core.keys.keys",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"self.arrow_key\"]",
        "kind": 5,
        "importPath": "core.keys.keys",
        "description": "core.keys.keys",
        "peekOfCode": "ctx.lists[\"self.arrow_key\"] = {\n    \"down\": \"down\",\n    \"left\": \"left\",\n    \"right\": \"right\",\n    \"up\": \"up\",\n}\nsimple_keys = [\n    \"end\",\n    \"enter\",\n    \"escape\",",
        "detail": "core.keys.keys",
        "documentation": {}
    },
    {
        "label": "simple_keys",
        "kind": 5,
        "importPath": "core.keys.keys",
        "description": "core.keys.keys",
        "peekOfCode": "simple_keys = [\n    \"end\",\n    \"enter\",\n    \"escape\",\n    \"home\",\n    \"insert\",\n    \"pagedown\",\n    \"pageup\",\n    \"space\",\n    \"tab\",",
        "detail": "core.keys.keys",
        "documentation": {}
    },
    {
        "label": "alternate_keys",
        "kind": 5,
        "importPath": "core.keys.keys",
        "description": "core.keys.keys",
        "peekOfCode": "alternate_keys = {\n    \"wipe\": \"backspace\",\n    \"delete\": \"backspace\",\n    #'junk': 'backspace',\n    \"forward delete\": \"delete\",\n    \"page up\": \"pageup\",\n    \"page down\": \"pagedown\",\n}\n# mac apparently doesn't have the menu key.\nif app.platform in (\"windows\", \"linux\"):",
        "detail": "core.keys.keys",
        "documentation": {}
    },
    {
        "label": "special_keys",
        "kind": 5,
        "importPath": "core.keys.keys",
        "description": "core.keys.keys",
        "peekOfCode": "special_keys = {k: k for k in simple_keys}\nspecial_keys.update(alternate_keys)\nctx.lists[\"self.special_key\"] = special_keys\nctx.lists[\"self.function_key\"] = {\n    f\"F {default_f_digits[i]}\": f\"f{i + 1}\" for i in range(12)\n}\n@mod.action_class\nclass Actions:\n    def move_cursor(s: str):\n        \"\"\"Given a sequence of directions, eg. 'left left up', moves the cursor accordingly using edit.{left,right,up,down}.\"\"\"",
        "detail": "core.keys.keys",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"self.special_key\"]",
        "kind": 5,
        "importPath": "core.keys.keys",
        "description": "core.keys.keys",
        "peekOfCode": "ctx.lists[\"self.special_key\"] = special_keys\nctx.lists[\"self.function_key\"] = {\n    f\"F {default_f_digits[i]}\": f\"f{i + 1}\" for i in range(12)\n}\n@mod.action_class\nclass Actions:\n    def move_cursor(s: str):\n        \"\"\"Given a sequence of directions, eg. 'left left up', moves the cursor accordingly using edit.{left,right,up,down}.\"\"\"\n        for d in s.split():\n            if d in (\"left\", \"right\", \"up\", \"down\"):",
        "detail": "core.keys.keys",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"self.function_key\"]",
        "kind": 5,
        "importPath": "core.keys.keys",
        "description": "core.keys.keys",
        "peekOfCode": "ctx.lists[\"self.function_key\"] = {\n    f\"F {default_f_digits[i]}\": f\"f{i + 1}\" for i in range(12)\n}\n@mod.action_class\nclass Actions:\n    def move_cursor(s: str):\n        \"\"\"Given a sequence of directions, eg. 'left left up', moves the cursor accordingly using edit.{left,right,up,down}.\"\"\"\n        for d in s.split():\n            if d in (\"left\", \"right\", \"up\", \"down\"):\n                getattr(actions.edit, d)()",
        "detail": "core.keys.keys",
        "documentation": {}
    },
    {
        "label": "code_actions",
        "kind": 6,
        "importPath": "core.modes.language_modes",
        "description": "core.modes.language_modes",
        "peekOfCode": "class code_actions:\n    def language():\n        result = \"\"\n        file_extension = actions.win.file_ext()\n        if file_extension and file_extension in extension_lang_map:\n            result = extension_lang_map[file_extension]\n        return result\n@mod.action_class\nclass Actions:\n    def code_set_language_mode(language: str):",
        "detail": "core.modes.language_modes",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "core.modes.language_modes",
        "description": "core.modes.language_modes",
        "peekOfCode": "class Actions:\n    def code_set_language_mode(language: str):\n        \"\"\"Sets the active language mode, and disables extension matching\"\"\"\n        assert language in language_extensions\n        ctx.tags = [f\"user.{language}_forced\"]\n    def code_clear_language_mode():\n        \"\"\"Clears the active language mode, and re-enables code.language: extension matching\"\"\"\n        ctx.tags = [\"user.auto_lang\"]",
        "detail": "core.modes.language_modes",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "core.modes.language_modes",
        "description": "core.modes.language_modes",
        "peekOfCode": "ctx = Context()\nmod = Module()\n# Maps language mode names to the extensions that activate them. Only put things\n# here which have a supported language mode; that's why there are so many\n# commented out entries. TODO: make this a csv file?\nlanguage_extensions = {\n    # 'assembly': 'asm s',\n    # 'bash': 'bashbook sh',\n    \"batch\": \"bat\",\n    \"c\": \"c h\",",
        "detail": "core.modes.language_modes",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "core.modes.language_modes",
        "description": "core.modes.language_modes",
        "peekOfCode": "mod = Module()\n# Maps language mode names to the extensions that activate them. Only put things\n# here which have a supported language mode; that's why there are so many\n# commented out entries. TODO: make this a csv file?\nlanguage_extensions = {\n    # 'assembly': 'asm s',\n    # 'bash': 'bashbook sh',\n    \"batch\": \"bat\",\n    \"c\": \"c h\",\n    # 'cmake': 'cmake',",
        "detail": "core.modes.language_modes",
        "documentation": {}
    },
    {
        "label": "language_extensions",
        "kind": 5,
        "importPath": "core.modes.language_modes",
        "description": "core.modes.language_modes",
        "peekOfCode": "language_extensions = {\n    # 'assembly': 'asm s',\n    # 'bash': 'bashbook sh',\n    \"batch\": \"bat\",\n    \"c\": \"c h\",\n    # 'cmake': 'cmake',\n    # 'cplusplus': 'cpp hpp',\n    \"csharp\": \"cs\",\n    \"css\": \"css\",\n    # 'elisp': 'el',",
        "detail": "core.modes.language_modes",
        "documentation": {}
    },
    {
        "label": "language_name_overrides",
        "kind": 5,
        "importPath": "core.modes.language_modes",
        "description": "core.modes.language_modes",
        "peekOfCode": "language_name_overrides = {\n    \"cplusplus\": [\"see plus plus\"],\n    \"csharp\": [\"see sharp\"],\n    \"css\": [\"c s s\"],\n    \"gdb\": [\"g d b\"],\n    \"go\": [\"go\", \"go lang\", \"go language\"],\n    \"r\": [\"are language\"],\n}\nmod.list(\"language_mode\", desc=\"Name of a programming language mode.\")\nctx.lists[\"self.language_mode\"] = {",
        "detail": "core.modes.language_modes",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"self.language_mode\"]",
        "kind": 5,
        "importPath": "core.modes.language_modes",
        "description": "core.modes.language_modes",
        "peekOfCode": "ctx.lists[\"self.language_mode\"] = {\n    name: language\n    for language in language_extensions\n    for name in language_name_overrides.get(language, [language])\n}\n# Maps extension to languages.\nextension_lang_map = {\n    \".\" + ext: language\n    for language, extensions in language_extensions.items()\n    for ext in extensions.split()",
        "detail": "core.modes.language_modes",
        "documentation": {}
    },
    {
        "label": "extension_lang_map",
        "kind": 5,
        "importPath": "core.modes.language_modes",
        "description": "core.modes.language_modes",
        "peekOfCode": "extension_lang_map = {\n    \".\" + ext: language\n    for language, extensions in language_extensions.items()\n    for ext in extensions.split()\n}\n# Create a context for each defined language\nfor lang in language_extensions.keys():\n    mod.tag(lang)\n    mod.tag(f\"{lang}_forced\")\n    c = Context()",
        "detail": "core.modes.language_modes",
        "documentation": {}
    },
    {
        "label": "ctx.tags",
        "kind": 5,
        "importPath": "core.modes.language_modes",
        "description": "core.modes.language_modes",
        "peekOfCode": "ctx.tags = [\"user.auto_lang\"]\n@ctx.action_class(\"code\")\nclass code_actions:\n    def language():\n        result = \"\"\n        file_extension = actions.win.file_ext()\n        if file_extension and file_extension in extension_lang_map:\n            result = extension_lang_map[file_extension]\n        return result\n@mod.action_class",
        "detail": "core.modes.language_modes",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "core.modes.modes",
        "description": "core.modes.modes",
        "peekOfCode": "class Actions:\n    def talon_mode():\n        \"\"\"For windows and Mac with Dragon, enables Talon commands and Dragon's command mode.\"\"\"\n        actions.speech.enable()\n        engine = speech_system.engine.name\n        # app.notify(engine)\n        if \"dragon\" in engine:\n            if app.platform == \"mac\":\n                actions.user.engine_sleep()\n            elif app.platform == \"windows\":",
        "detail": "core.modes.modes",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "core.modes.modes",
        "description": "core.modes.modes",
        "peekOfCode": "mod = Module()\nmodes = {\n    \"admin\": \"enable extra administration commands terminal (docker, etc)\",\n    \"debug\": \"a way to force debugger commands to be loaded\",\n    \"gdb\": \"a way to force gdb commands to be loaded\",\n    \"ida\": \"a way to force ida commands to be loaded\",\n    \"presentation\": \"a more strict form of sleep where only a more strict wake up command works\",\n    \"windbg\": \"a way to force windbg commands to be loaded\",\n}\nfor key, value in modes.items():",
        "detail": "core.modes.modes",
        "documentation": {}
    },
    {
        "label": "modes",
        "kind": 5,
        "importPath": "core.modes.modes",
        "description": "core.modes.modes",
        "peekOfCode": "modes = {\n    \"admin\": \"enable extra administration commands terminal (docker, etc)\",\n    \"debug\": \"a way to force debugger commands to be loaded\",\n    \"gdb\": \"a way to force gdb commands to be loaded\",\n    \"ida\": \"a way to force ida commands to be loaded\",\n    \"presentation\": \"a more strict form of sleep where only a more strict wake up command works\",\n    \"windbg\": \"a way to force windbg commands to be loaded\",\n}\nfor key, value in modes.items():\n    mod.mode(key, value)",
        "detail": "core.modes.modes",
        "documentation": {}
    },
    {
        "label": "MouseSnapNine",
        "kind": 6,
        "importPath": "core.mouse_grid.mouse_grid",
        "description": "core.mouse_grid.mouse_grid",
        "peekOfCode": "class MouseSnapNine:\n    def __init__(self):\n        self.screen = None\n        self.rect = None\n        self.history = []\n        self.img = None\n        self.mcanvas = None\n        self.active = False\n        self.count = 0\n        self.was_control_mouse_active = False",
        "detail": "core.mouse_grid.mouse_grid",
        "documentation": {}
    },
    {
        "label": "GridActions",
        "kind": 6,
        "importPath": "core.mouse_grid.mouse_grid",
        "description": "core.mouse_grid.mouse_grid",
        "peekOfCode": "class GridActions:\n    def grid_activate():\n        \"\"\"Show mouse grid\"\"\"\n        if not mg.mcanvas:\n            mg.setup()\n        mg.show()\n        ctx.tags = [\"user.mouse_grid_showing\"]\n    def grid_place_window():\n        \"\"\"Places the grid on the currently active window\"\"\"\n        mg.setup(rect=ui.active_window().rect)",
        "detail": "core.mouse_grid.mouse_grid",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "core.mouse_grid.mouse_grid",
        "description": "core.mouse_grid.mouse_grid",
        "peekOfCode": "mod = Module()\nnarrow_expansion = mod.setting(\n    \"grid_narrow_expansion\",\n    type=int,\n    default=0,\n    desc=\"\"\"After narrowing, grow the new region by this many pixels in every direction, to make things immediately on edges easier to hit, and when the grid is at its smallest, it allows you to still nudge it around\"\"\",\n)\ngrids_put_one_bottom_left = mod.setting(\n    \"grids_put_one_bottom_left\",\n    type=bool,",
        "detail": "core.mouse_grid.mouse_grid",
        "documentation": {}
    },
    {
        "label": "narrow_expansion",
        "kind": 5,
        "importPath": "core.mouse_grid.mouse_grid",
        "description": "core.mouse_grid.mouse_grid",
        "peekOfCode": "narrow_expansion = mod.setting(\n    \"grid_narrow_expansion\",\n    type=int,\n    default=0,\n    desc=\"\"\"After narrowing, grow the new region by this many pixels in every direction, to make things immediately on edges easier to hit, and when the grid is at its smallest, it allows you to still nudge it around\"\"\",\n)\ngrids_put_one_bottom_left = mod.setting(\n    \"grids_put_one_bottom_left\",\n    type=bool,\n    default=False,",
        "detail": "core.mouse_grid.mouse_grid",
        "documentation": {}
    },
    {
        "label": "grids_put_one_bottom_left",
        "kind": 5,
        "importPath": "core.mouse_grid.mouse_grid",
        "description": "core.mouse_grid.mouse_grid",
        "peekOfCode": "grids_put_one_bottom_left = mod.setting(\n    \"grids_put_one_bottom_left\",\n    type=bool,\n    default=False,\n    desc=\"\"\"Allows you to switch mouse grid and friends between a computer numpad and a phone numpad (the number one goes on the bottom left or the top left)\"\"\",\n)\nmod.tag(\"mouse_grid_showing\", desc=\"Tag indicates whether the mouse grid is showing\")\nmod.tag(\n    \"mouse_grid_enabled\",\n    desc=\"Deprecated: do not use.  Activates legacy m grid command\",",
        "detail": "core.mouse_grid.mouse_grid",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "core.mouse_grid.mouse_grid",
        "description": "core.mouse_grid.mouse_grid",
        "peekOfCode": "ctx = Context()\nclass MouseSnapNine:\n    def __init__(self):\n        self.screen = None\n        self.rect = None\n        self.history = []\n        self.img = None\n        self.mcanvas = None\n        self.active = False\n        self.count = 0",
        "detail": "core.mouse_grid.mouse_grid",
        "documentation": {}
    },
    {
        "label": "mg",
        "kind": 5,
        "importPath": "core.mouse_grid.mouse_grid",
        "description": "core.mouse_grid.mouse_grid",
        "peekOfCode": "mg = MouseSnapNine()\n@mod.action_class\nclass GridActions:\n    def grid_activate():\n        \"\"\"Show mouse grid\"\"\"\n        if not mg.mcanvas:\n            mg.setup()\n        mg.show()\n        ctx.tags = [\"user.mouse_grid_showing\"]\n    def grid_place_window():",
        "detail": "core.mouse_grid.mouse_grid",
        "documentation": {}
    },
    {
        "label": "parse_number",
        "kind": 2,
        "importPath": "core.numbers.numbers",
        "description": "core.numbers.numbers",
        "peekOfCode": "def parse_number(l: list[str]) -> str:\n    \"\"\"Parses a list of words into a number/digit string.\"\"\"\n    l = list(scan_small_numbers(l))\n    for scale in scales:\n        l = parse_scale(scale, l)\n    return \"\".join(str(n) for n in l)\ndef scan_small_numbers(l: list[str]) -> Iterator[Union[str, int]]:\n    \"\"\"\n    Takes a list of number words, yields a generator of mixed numbers & strings.\n    Translates small number terms (<100) into corresponding numbers.",
        "detail": "core.numbers.numbers",
        "documentation": {}
    },
    {
        "label": "scan_small_numbers",
        "kind": 2,
        "importPath": "core.numbers.numbers",
        "description": "core.numbers.numbers",
        "peekOfCode": "def scan_small_numbers(l: list[str]) -> Iterator[Union[str, int]]:\n    \"\"\"\n    Takes a list of number words, yields a generator of mixed numbers & strings.\n    Translates small number terms (<100) into corresponding numbers.\n    Drops all occurrences of \"and\".\n    Smashes digits onto tens words, eg. [\"twenty\", \"one\"] -> [21].\n    But note that \"ten\" and \"zero\" are excluded, ie:\n      [\"ten\", \"three\"] -> [10, 3]\n      [\"fifty\", \"zero\"] -> [50, 0]\n    Does nothing to scale words (\"hundred\", \"thousand\", \"million\", etc).",
        "detail": "core.numbers.numbers",
        "documentation": {}
    },
    {
        "label": "parse_scale",
        "kind": 2,
        "importPath": "core.numbers.numbers",
        "description": "core.numbers.numbers",
        "peekOfCode": "def parse_scale(scale: str, l: list[Union[str, int]]) -> list[Union[str, int]]:\n    \"\"\"Parses a list of mixed numbers & strings for occurrences of the following\n    pattern:\n        <multiplier> <scale> <remainder>\n    where <scale> is a scale word like \"hundred\", \"thousand\", \"million\", etc and\n    multiplier and remainder are numbers or strings of numbers of the\n    appropriate size. For example:\n        parse_scale(\"hundred\", [1, \"hundred\", 2]) -> [102]\n        parse_scale(\"thousand\", [12, \"thousand\", 3, 45]) -> [12345]\n    We assume that all scales of lower magnitude have already been parsed; don't",
        "detail": "core.numbers.numbers",
        "documentation": {}
    },
    {
        "label": "split_list",
        "kind": 2,
        "importPath": "core.numbers.numbers",
        "description": "core.numbers.numbers",
        "peekOfCode": "def split_list(value, l: list) -> Iterator:\n    \"\"\"Splits a list by occurrences of a given value.\"\"\"\n    start = 0\n    while True:\n        try:\n            i = l.index(value, start)\n        except ValueError:\n            break\n        yield l[start:i]\n        start = i + 1",
        "detail": "core.numbers.numbers",
        "documentation": {}
    },
    {
        "label": "digit_string",
        "kind": 2,
        "importPath": "core.numbers.numbers",
        "description": "core.numbers.numbers",
        "peekOfCode": "def digit_string(m) -> str:\n    return parse_number(list(m))\n@ctx.capture(\"digits\", rule=\"<digit_string>\")\ndef digits(m) -> int:\n    \"\"\"Parses a phrase representing a digit sequence, returning it as an integer.\"\"\"\n    return int(m.digit_string)\n@mod.capture(rule=f\"{number_word_leading} ([and] {number_word})*\")\ndef number_string(m) -> str:\n    \"\"\"Parses a number phrase, returning that number as a string.\"\"\"\n    return parse_number(list(m))",
        "detail": "core.numbers.numbers",
        "documentation": {}
    },
    {
        "label": "digits",
        "kind": 2,
        "importPath": "core.numbers.numbers",
        "description": "core.numbers.numbers",
        "peekOfCode": "def digits(m) -> int:\n    \"\"\"Parses a phrase representing a digit sequence, returning it as an integer.\"\"\"\n    return int(m.digit_string)\n@mod.capture(rule=f\"{number_word_leading} ([and] {number_word})*\")\ndef number_string(m) -> str:\n    \"\"\"Parses a number phrase, returning that number as a string.\"\"\"\n    return parse_number(list(m))\n@ctx.capture(\"number\", rule=\"<user.number_string>\")\ndef number(m) -> int:\n    \"\"\"Parses a number phrase, returning it as an integer.\"\"\"",
        "detail": "core.numbers.numbers",
        "documentation": {}
    },
    {
        "label": "number_string",
        "kind": 2,
        "importPath": "core.numbers.numbers",
        "description": "core.numbers.numbers",
        "peekOfCode": "def number_string(m) -> str:\n    \"\"\"Parses a number phrase, returning that number as a string.\"\"\"\n    return parse_number(list(m))\n@ctx.capture(\"number\", rule=\"<user.number_string>\")\ndef number(m) -> int:\n    \"\"\"Parses a number phrase, returning it as an integer.\"\"\"\n    return int(m.number_string)\n@ctx.capture(\"number_signed\", rule=f\"[negative|minus] <number>\")\ndef number_signed(m):\n    number = m[-1]",
        "detail": "core.numbers.numbers",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 2,
        "importPath": "core.numbers.numbers",
        "description": "core.numbers.numbers",
        "peekOfCode": "def number(m) -> int:\n    \"\"\"Parses a number phrase, returning it as an integer.\"\"\"\n    return int(m.number_string)\n@ctx.capture(\"number_signed\", rule=f\"[negative|minus] <number>\")\ndef number_signed(m):\n    number = m[-1]\n    return -number if (m[0] in [\"negative\", \"minus\"]) else number\n@ctx.capture(\"number_small\", rule=\"{user.number_small}\")\ndef number_small(m) -> int:\n    return number_small_map[m.number_small]",
        "detail": "core.numbers.numbers",
        "documentation": {}
    },
    {
        "label": "number_signed",
        "kind": 2,
        "importPath": "core.numbers.numbers",
        "description": "core.numbers.numbers",
        "peekOfCode": "def number_signed(m):\n    number = m[-1]\n    return -number if (m[0] in [\"negative\", \"minus\"]) else number\n@ctx.capture(\"number_small\", rule=\"{user.number_small}\")\ndef number_small(m) -> int:\n    return number_small_map[m.number_small]",
        "detail": "core.numbers.numbers",
        "documentation": {}
    },
    {
        "label": "number_small",
        "kind": 2,
        "importPath": "core.numbers.numbers",
        "description": "core.numbers.numbers",
        "peekOfCode": "def number_small(m) -> int:\n    return number_small_map[m.number_small]",
        "detail": "core.numbers.numbers",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "core.numbers.numbers",
        "description": "core.numbers.numbers",
        "peekOfCode": "mod = Module()\nctx = Context()\ndigit_list = \"zero one two three four five six seven eight nine\".split()\nteens = \"ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen\".split()\ntens = \"twenty thirty forty fifty sixty seventy eighty ninety\".split()\nscales = \"hundred thousand million billion trillion quadrillion quintillion sextillion septillion octillion nonillion decillion\".split()\ndigits_map = {n: i for i, n in enumerate(digit_list)}\ndigits_map[\"oh\"] = 0\nteens_map = {n: i + 10 for i, n in enumerate(teens)}\ntens_map = {n: 10 * (i + 2) for i, n in enumerate(tens)}",
        "detail": "core.numbers.numbers",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "core.numbers.numbers",
        "description": "core.numbers.numbers",
        "peekOfCode": "ctx = Context()\ndigit_list = \"zero one two three four five six seven eight nine\".split()\nteens = \"ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen\".split()\ntens = \"twenty thirty forty fifty sixty seventy eighty ninety\".split()\nscales = \"hundred thousand million billion trillion quadrillion quintillion sextillion septillion octillion nonillion decillion\".split()\ndigits_map = {n: i for i, n in enumerate(digit_list)}\ndigits_map[\"oh\"] = 0\nteens_map = {n: i + 10 for i, n in enumerate(teens)}\ntens_map = {n: 10 * (i + 2) for i, n in enumerate(tens)}\nscales_map = {n: 10 ** (3 * (i + 1)) for i, n in enumerate(scales[1:])}",
        "detail": "core.numbers.numbers",
        "documentation": {}
    },
    {
        "label": "digit_list",
        "kind": 5,
        "importPath": "core.numbers.numbers",
        "description": "core.numbers.numbers",
        "peekOfCode": "digit_list = \"zero one two three four five six seven eight nine\".split()\nteens = \"ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen\".split()\ntens = \"twenty thirty forty fifty sixty seventy eighty ninety\".split()\nscales = \"hundred thousand million billion trillion quadrillion quintillion sextillion septillion octillion nonillion decillion\".split()\ndigits_map = {n: i for i, n in enumerate(digit_list)}\ndigits_map[\"oh\"] = 0\nteens_map = {n: i + 10 for i, n in enumerate(teens)}\ntens_map = {n: 10 * (i + 2) for i, n in enumerate(tens)}\nscales_map = {n: 10 ** (3 * (i + 1)) for i, n in enumerate(scales[1:])}\nscales_map[\"hundred\"] = 100",
        "detail": "core.numbers.numbers",
        "documentation": {}
    },
    {
        "label": "teens",
        "kind": 5,
        "importPath": "core.numbers.numbers",
        "description": "core.numbers.numbers",
        "peekOfCode": "teens = \"ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen\".split()\ntens = \"twenty thirty forty fifty sixty seventy eighty ninety\".split()\nscales = \"hundred thousand million billion trillion quadrillion quintillion sextillion septillion octillion nonillion decillion\".split()\ndigits_map = {n: i for i, n in enumerate(digit_list)}\ndigits_map[\"oh\"] = 0\nteens_map = {n: i + 10 for i, n in enumerate(teens)}\ntens_map = {n: 10 * (i + 2) for i, n in enumerate(tens)}\nscales_map = {n: 10 ** (3 * (i + 1)) for i, n in enumerate(scales[1:])}\nscales_map[\"hundred\"] = 100\nnumbers_map = digits_map.copy()",
        "detail": "core.numbers.numbers",
        "documentation": {}
    },
    {
        "label": "tens",
        "kind": 5,
        "importPath": "core.numbers.numbers",
        "description": "core.numbers.numbers",
        "peekOfCode": "tens = \"twenty thirty forty fifty sixty seventy eighty ninety\".split()\nscales = \"hundred thousand million billion trillion quadrillion quintillion sextillion septillion octillion nonillion decillion\".split()\ndigits_map = {n: i for i, n in enumerate(digit_list)}\ndigits_map[\"oh\"] = 0\nteens_map = {n: i + 10 for i, n in enumerate(teens)}\ntens_map = {n: 10 * (i + 2) for i, n in enumerate(tens)}\nscales_map = {n: 10 ** (3 * (i + 1)) for i, n in enumerate(scales[1:])}\nscales_map[\"hundred\"] = 100\nnumbers_map = digits_map.copy()\nnumbers_map.update(teens_map)",
        "detail": "core.numbers.numbers",
        "documentation": {}
    },
    {
        "label": "scales",
        "kind": 5,
        "importPath": "core.numbers.numbers",
        "description": "core.numbers.numbers",
        "peekOfCode": "scales = \"hundred thousand million billion trillion quadrillion quintillion sextillion septillion octillion nonillion decillion\".split()\ndigits_map = {n: i for i, n in enumerate(digit_list)}\ndigits_map[\"oh\"] = 0\nteens_map = {n: i + 10 for i, n in enumerate(teens)}\ntens_map = {n: 10 * (i + 2) for i, n in enumerate(tens)}\nscales_map = {n: 10 ** (3 * (i + 1)) for i, n in enumerate(scales[1:])}\nscales_map[\"hundred\"] = 100\nnumbers_map = digits_map.copy()\nnumbers_map.update(teens_map)\nnumbers_map.update(tens_map)",
        "detail": "core.numbers.numbers",
        "documentation": {}
    },
    {
        "label": "digits_map",
        "kind": 5,
        "importPath": "core.numbers.numbers",
        "description": "core.numbers.numbers",
        "peekOfCode": "digits_map = {n: i for i, n in enumerate(digit_list)}\ndigits_map[\"oh\"] = 0\nteens_map = {n: i + 10 for i, n in enumerate(teens)}\ntens_map = {n: 10 * (i + 2) for i, n in enumerate(tens)}\nscales_map = {n: 10 ** (3 * (i + 1)) for i, n in enumerate(scales[1:])}\nscales_map[\"hundred\"] = 100\nnumbers_map = digits_map.copy()\nnumbers_map.update(teens_map)\nnumbers_map.update(tens_map)\nnumbers_map.update(scales_map)",
        "detail": "core.numbers.numbers",
        "documentation": {}
    },
    {
        "label": "digits_map[\"oh\"]",
        "kind": 5,
        "importPath": "core.numbers.numbers",
        "description": "core.numbers.numbers",
        "peekOfCode": "digits_map[\"oh\"] = 0\nteens_map = {n: i + 10 for i, n in enumerate(teens)}\ntens_map = {n: 10 * (i + 2) for i, n in enumerate(tens)}\nscales_map = {n: 10 ** (3 * (i + 1)) for i, n in enumerate(scales[1:])}\nscales_map[\"hundred\"] = 100\nnumbers_map = digits_map.copy()\nnumbers_map.update(teens_map)\nnumbers_map.update(tens_map)\nnumbers_map.update(scales_map)\ndef parse_number(l: list[str]) -> str:",
        "detail": "core.numbers.numbers",
        "documentation": {}
    },
    {
        "label": "teens_map",
        "kind": 5,
        "importPath": "core.numbers.numbers",
        "description": "core.numbers.numbers",
        "peekOfCode": "teens_map = {n: i + 10 for i, n in enumerate(teens)}\ntens_map = {n: 10 * (i + 2) for i, n in enumerate(tens)}\nscales_map = {n: 10 ** (3 * (i + 1)) for i, n in enumerate(scales[1:])}\nscales_map[\"hundred\"] = 100\nnumbers_map = digits_map.copy()\nnumbers_map.update(teens_map)\nnumbers_map.update(tens_map)\nnumbers_map.update(scales_map)\ndef parse_number(l: list[str]) -> str:\n    \"\"\"Parses a list of words into a number/digit string.\"\"\"",
        "detail": "core.numbers.numbers",
        "documentation": {}
    },
    {
        "label": "tens_map",
        "kind": 5,
        "importPath": "core.numbers.numbers",
        "description": "core.numbers.numbers",
        "peekOfCode": "tens_map = {n: 10 * (i + 2) for i, n in enumerate(tens)}\nscales_map = {n: 10 ** (3 * (i + 1)) for i, n in enumerate(scales[1:])}\nscales_map[\"hundred\"] = 100\nnumbers_map = digits_map.copy()\nnumbers_map.update(teens_map)\nnumbers_map.update(tens_map)\nnumbers_map.update(scales_map)\ndef parse_number(l: list[str]) -> str:\n    \"\"\"Parses a list of words into a number/digit string.\"\"\"\n    l = list(scan_small_numbers(l))",
        "detail": "core.numbers.numbers",
        "documentation": {}
    },
    {
        "label": "scales_map",
        "kind": 5,
        "importPath": "core.numbers.numbers",
        "description": "core.numbers.numbers",
        "peekOfCode": "scales_map = {n: 10 ** (3 * (i + 1)) for i, n in enumerate(scales[1:])}\nscales_map[\"hundred\"] = 100\nnumbers_map = digits_map.copy()\nnumbers_map.update(teens_map)\nnumbers_map.update(tens_map)\nnumbers_map.update(scales_map)\ndef parse_number(l: list[str]) -> str:\n    \"\"\"Parses a list of words into a number/digit string.\"\"\"\n    l = list(scan_small_numbers(l))\n    for scale in scales:",
        "detail": "core.numbers.numbers",
        "documentation": {}
    },
    {
        "label": "scales_map[\"hundred\"]",
        "kind": 5,
        "importPath": "core.numbers.numbers",
        "description": "core.numbers.numbers",
        "peekOfCode": "scales_map[\"hundred\"] = 100\nnumbers_map = digits_map.copy()\nnumbers_map.update(teens_map)\nnumbers_map.update(tens_map)\nnumbers_map.update(scales_map)\ndef parse_number(l: list[str]) -> str:\n    \"\"\"Parses a list of words into a number/digit string.\"\"\"\n    l = list(scan_small_numbers(l))\n    for scale in scales:\n        l = parse_scale(scale, l)",
        "detail": "core.numbers.numbers",
        "documentation": {}
    },
    {
        "label": "numbers_map",
        "kind": 5,
        "importPath": "core.numbers.numbers",
        "description": "core.numbers.numbers",
        "peekOfCode": "numbers_map = digits_map.copy()\nnumbers_map.update(teens_map)\nnumbers_map.update(tens_map)\nnumbers_map.update(scales_map)\ndef parse_number(l: list[str]) -> str:\n    \"\"\"Parses a list of words into a number/digit string.\"\"\"\n    l = list(scan_small_numbers(l))\n    for scale in scales:\n        l = parse_scale(scale, l)\n    return \"\".join(str(n) for n in l)",
        "detail": "core.numbers.numbers",
        "documentation": {}
    },
    {
        "label": "alt_digits",
        "kind": 5,
        "importPath": "core.numbers.numbers",
        "description": "core.numbers.numbers",
        "peekOfCode": "alt_digits = \"(\" + \"|\".join(digits_map.keys()) + \")\"\nalt_teens = \"(\" + \"|\".join(teens_map.keys()) + \")\"\nalt_tens = \"(\" + \"|\".join(tens_map.keys()) + \")\"\nalt_scales = \"(\" + \"|\".join(scales_map.keys()) + \")\"\nnumber_word = \"(\" + \"|\".join(numbers_map.keys()) + \")\"\n# don't allow numbers to start with scale words like \"hundred\", \"thousand\", etc\nleading_words = numbers_map.keys() - scales_map.keys()\nleading_words -= {\"oh\", \"o\"}  # comment out to enable bare/initial \"oh\"\nnumber_word_leading = f\"({'|'.join(leading_words)})\"\n# Numbers used in `number_small` capture",
        "detail": "core.numbers.numbers",
        "documentation": {}
    },
    {
        "label": "alt_teens",
        "kind": 5,
        "importPath": "core.numbers.numbers",
        "description": "core.numbers.numbers",
        "peekOfCode": "alt_teens = \"(\" + \"|\".join(teens_map.keys()) + \")\"\nalt_tens = \"(\" + \"|\".join(tens_map.keys()) + \")\"\nalt_scales = \"(\" + \"|\".join(scales_map.keys()) + \")\"\nnumber_word = \"(\" + \"|\".join(numbers_map.keys()) + \")\"\n# don't allow numbers to start with scale words like \"hundred\", \"thousand\", etc\nleading_words = numbers_map.keys() - scales_map.keys()\nleading_words -= {\"oh\", \"o\"}  # comment out to enable bare/initial \"oh\"\nnumber_word_leading = f\"({'|'.join(leading_words)})\"\n# Numbers used in `number_small` capture\nnumber_small_list = [*digit_list, *teens]",
        "detail": "core.numbers.numbers",
        "documentation": {}
    },
    {
        "label": "alt_tens",
        "kind": 5,
        "importPath": "core.numbers.numbers",
        "description": "core.numbers.numbers",
        "peekOfCode": "alt_tens = \"(\" + \"|\".join(tens_map.keys()) + \")\"\nalt_scales = \"(\" + \"|\".join(scales_map.keys()) + \")\"\nnumber_word = \"(\" + \"|\".join(numbers_map.keys()) + \")\"\n# don't allow numbers to start with scale words like \"hundred\", \"thousand\", etc\nleading_words = numbers_map.keys() - scales_map.keys()\nleading_words -= {\"oh\", \"o\"}  # comment out to enable bare/initial \"oh\"\nnumber_word_leading = f\"({'|'.join(leading_words)})\"\n# Numbers used in `number_small` capture\nnumber_small_list = [*digit_list, *teens]\nfor ten in tens:",
        "detail": "core.numbers.numbers",
        "documentation": {}
    },
    {
        "label": "alt_scales",
        "kind": 5,
        "importPath": "core.numbers.numbers",
        "description": "core.numbers.numbers",
        "peekOfCode": "alt_scales = \"(\" + \"|\".join(scales_map.keys()) + \")\"\nnumber_word = \"(\" + \"|\".join(numbers_map.keys()) + \")\"\n# don't allow numbers to start with scale words like \"hundred\", \"thousand\", etc\nleading_words = numbers_map.keys() - scales_map.keys()\nleading_words -= {\"oh\", \"o\"}  # comment out to enable bare/initial \"oh\"\nnumber_word_leading = f\"({'|'.join(leading_words)})\"\n# Numbers used in `number_small` capture\nnumber_small_list = [*digit_list, *teens]\nfor ten in tens:\n    number_small_list.append(ten)",
        "detail": "core.numbers.numbers",
        "documentation": {}
    },
    {
        "label": "number_word",
        "kind": 5,
        "importPath": "core.numbers.numbers",
        "description": "core.numbers.numbers",
        "peekOfCode": "number_word = \"(\" + \"|\".join(numbers_map.keys()) + \")\"\n# don't allow numbers to start with scale words like \"hundred\", \"thousand\", etc\nleading_words = numbers_map.keys() - scales_map.keys()\nleading_words -= {\"oh\", \"o\"}  # comment out to enable bare/initial \"oh\"\nnumber_word_leading = f\"({'|'.join(leading_words)})\"\n# Numbers used in `number_small` capture\nnumber_small_list = [*digit_list, *teens]\nfor ten in tens:\n    number_small_list.append(ten)\n    number_small_list.extend(f\"{ten} {digit}\" for digit in digit_list[1:])",
        "detail": "core.numbers.numbers",
        "documentation": {}
    },
    {
        "label": "leading_words",
        "kind": 5,
        "importPath": "core.numbers.numbers",
        "description": "core.numbers.numbers",
        "peekOfCode": "leading_words = numbers_map.keys() - scales_map.keys()\nleading_words -= {\"oh\", \"o\"}  # comment out to enable bare/initial \"oh\"\nnumber_word_leading = f\"({'|'.join(leading_words)})\"\n# Numbers used in `number_small` capture\nnumber_small_list = [*digit_list, *teens]\nfor ten in tens:\n    number_small_list.append(ten)\n    number_small_list.extend(f\"{ten} {digit}\" for digit in digit_list[1:])\nnumber_small_map = {n: i for i, n in enumerate(number_small_list)}\nmod.list(\"number_small\", desc=\"List of small numbers\")",
        "detail": "core.numbers.numbers",
        "documentation": {}
    },
    {
        "label": "number_word_leading",
        "kind": 5,
        "importPath": "core.numbers.numbers",
        "description": "core.numbers.numbers",
        "peekOfCode": "number_word_leading = f\"({'|'.join(leading_words)})\"\n# Numbers used in `number_small` capture\nnumber_small_list = [*digit_list, *teens]\nfor ten in tens:\n    number_small_list.append(ten)\n    number_small_list.extend(f\"{ten} {digit}\" for digit in digit_list[1:])\nnumber_small_map = {n: i for i, n in enumerate(number_small_list)}\nmod.list(\"number_small\", desc=\"List of small numbers\")\nctx.lists[\"self.number_small\"] = number_small_map.keys()\n# TODO: allow things like \"double eight\" for 88",
        "detail": "core.numbers.numbers",
        "documentation": {}
    },
    {
        "label": "number_small_list",
        "kind": 5,
        "importPath": "core.numbers.numbers",
        "description": "core.numbers.numbers",
        "peekOfCode": "number_small_list = [*digit_list, *teens]\nfor ten in tens:\n    number_small_list.append(ten)\n    number_small_list.extend(f\"{ten} {digit}\" for digit in digit_list[1:])\nnumber_small_map = {n: i for i, n in enumerate(number_small_list)}\nmod.list(\"number_small\", desc=\"List of small numbers\")\nctx.lists[\"self.number_small\"] = number_small_map.keys()\n# TODO: allow things like \"double eight\" for 88\n@ctx.capture(\"digit_string\", rule=f\"({alt_digits} | {alt_teens} | {alt_tens})+\")\ndef digit_string(m) -> str:",
        "detail": "core.numbers.numbers",
        "documentation": {}
    },
    {
        "label": "number_small_map",
        "kind": 5,
        "importPath": "core.numbers.numbers",
        "description": "core.numbers.numbers",
        "peekOfCode": "number_small_map = {n: i for i, n in enumerate(number_small_list)}\nmod.list(\"number_small\", desc=\"List of small numbers\")\nctx.lists[\"self.number_small\"] = number_small_map.keys()\n# TODO: allow things like \"double eight\" for 88\n@ctx.capture(\"digit_string\", rule=f\"({alt_digits} | {alt_teens} | {alt_tens})+\")\ndef digit_string(m) -> str:\n    return parse_number(list(m))\n@ctx.capture(\"digits\", rule=\"<digit_string>\")\ndef digits(m) -> int:\n    \"\"\"Parses a phrase representing a digit sequence, returning it as an integer.\"\"\"",
        "detail": "core.numbers.numbers",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"self.number_small\"]",
        "kind": 5,
        "importPath": "core.numbers.numbers",
        "description": "core.numbers.numbers",
        "peekOfCode": "ctx.lists[\"self.number_small\"] = number_small_map.keys()\n# TODO: allow things like \"double eight\" for 88\n@ctx.capture(\"digit_string\", rule=f\"({alt_digits} | {alt_teens} | {alt_tens})+\")\ndef digit_string(m) -> str:\n    return parse_number(list(m))\n@ctx.capture(\"digits\", rule=\"<digit_string>\")\ndef digits(m) -> int:\n    \"\"\"Parses a phrase representing a digit sequence, returning it as an integer.\"\"\"\n    return int(m.digit_string)\n@mod.capture(rule=f\"{number_word_leading} ([and] {number_word})*\")",
        "detail": "core.numbers.numbers",
        "documentation": {}
    },
    {
        "label": "ordinal",
        "kind": 2,
        "importPath": "core.numbers.ordinals",
        "description": "core.numbers.ordinals",
        "peekOfCode": "def ordinal(n):\n    \"\"\"\n    Convert an integer into its ordinal representation::\n        ordinal(0)   => '0th'\n        ordinal(3)   => '3rd'\n        ordinal(122) => '122nd'\n        ordinal(213) => '213th'\n    \"\"\"\n    n = int(n)\n    suffix = [\"th\", \"st\", \"nd\", \"rd\", \"th\"][min(n % 10, 4)]",
        "detail": "core.numbers.ordinals",
        "documentation": {}
    },
    {
        "label": "ordinals",
        "kind": 2,
        "importPath": "core.numbers.ordinals",
        "description": "core.numbers.ordinals",
        "peekOfCode": "def ordinals(m) -> int:\n    \"\"\"Returns a single ordinal as a digit\"\"\"\n    return int(ordinal_numbers[m[0]])\n@mod.capture(rule=\"{self.ordinals_small}\")\ndef ordinals_small(m) -> int:\n    \"\"\"Returns a single ordinal as a digit\"\"\"\n    return int(ordinal_numbers[m[0]])",
        "detail": "core.numbers.ordinals",
        "documentation": {}
    },
    {
        "label": "ordinals_small",
        "kind": 2,
        "importPath": "core.numbers.ordinals",
        "description": "core.numbers.ordinals",
        "peekOfCode": "def ordinals_small(m) -> int:\n    \"\"\"Returns a single ordinal as a digit\"\"\"\n    return int(ordinal_numbers[m[0]])",
        "detail": "core.numbers.ordinals",
        "documentation": {}
    },
    {
        "label": "ordinal_words",
        "kind": 5,
        "importPath": "core.numbers.ordinals",
        "description": "core.numbers.ordinals",
        "peekOfCode": "ordinal_words = {\n    0: \"zeroth\",\n    1: \"first\",\n    2: \"second\",\n    3: \"third\",\n    4: \"fourth\",\n    5: \"fifth\",\n    6: \"sixth\",\n    7: \"seventh\",\n    8: \"eighth\",",
        "detail": "core.numbers.ordinals",
        "documentation": {}
    },
    {
        "label": "tens_words",
        "kind": 5,
        "importPath": "core.numbers.ordinals",
        "description": "core.numbers.ordinals",
        "peekOfCode": "tens_words = \"zero ten twenty thirty forty fifty sixty seventy eighty ninety\".split()\n# ordinal_numbers maps ordinal words into their corresponding numbers.\nordinal_numbers = {}\nordinal_small = {}\nfor n in range(1, 100):\n    if n in ordinal_words:\n        word = ordinal_words[n]\n    else:\n        (tens, units) = divmod(n, 10)\n        assert 1 < tens < 10, \"we have already handled all ordinals < 20\"",
        "detail": "core.numbers.ordinals",
        "documentation": {}
    },
    {
        "label": "ordinal_numbers",
        "kind": 5,
        "importPath": "core.numbers.ordinals",
        "description": "core.numbers.ordinals",
        "peekOfCode": "ordinal_numbers = {}\nordinal_small = {}\nfor n in range(1, 100):\n    if n in ordinal_words:\n        word = ordinal_words[n]\n    else:\n        (tens, units) = divmod(n, 10)\n        assert 1 < tens < 10, \"we have already handled all ordinals < 20\"\n        assert 0 < units, \"we have already handled all ordinals divisible by ten\"\n        word = f\"{tens_words[tens]} {ordinal_words[units]}\"",
        "detail": "core.numbers.ordinals",
        "documentation": {}
    },
    {
        "label": "ordinal_small",
        "kind": 5,
        "importPath": "core.numbers.ordinals",
        "description": "core.numbers.ordinals",
        "peekOfCode": "ordinal_small = {}\nfor n in range(1, 100):\n    if n in ordinal_words:\n        word = ordinal_words[n]\n    else:\n        (tens, units) = divmod(n, 10)\n        assert 1 < tens < 10, \"we have already handled all ordinals < 20\"\n        assert 0 < units, \"we have already handled all ordinals divisible by ten\"\n        word = f\"{tens_words[tens]} {ordinal_words[units]}\"\n    if n <= 20:",
        "detail": "core.numbers.ordinals",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "core.numbers.ordinals",
        "description": "core.numbers.ordinals",
        "peekOfCode": "mod = Module()\nctx = Context()\nmod.list(\"ordinals\", desc=\"list of ordinals\")\nmod.list(\"ordinals_small\", desc=\"list of ordinals small (1-20)\")\nctx.lists[\"self.ordinals\"] = ordinal_numbers.keys()\nctx.lists[\"self.ordinals_small\"] = ordinal_small.keys()\n@mod.capture(rule=\"{self.ordinals}\")\ndef ordinals(m) -> int:\n    \"\"\"Returns a single ordinal as a digit\"\"\"\n    return int(ordinal_numbers[m[0]])",
        "detail": "core.numbers.ordinals",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "core.numbers.ordinals",
        "description": "core.numbers.ordinals",
        "peekOfCode": "ctx = Context()\nmod.list(\"ordinals\", desc=\"list of ordinals\")\nmod.list(\"ordinals_small\", desc=\"list of ordinals small (1-20)\")\nctx.lists[\"self.ordinals\"] = ordinal_numbers.keys()\nctx.lists[\"self.ordinals_small\"] = ordinal_small.keys()\n@mod.capture(rule=\"{self.ordinals}\")\ndef ordinals(m) -> int:\n    \"\"\"Returns a single ordinal as a digit\"\"\"\n    return int(ordinal_numbers[m[0]])\n@mod.capture(rule=\"{self.ordinals_small}\")",
        "detail": "core.numbers.ordinals",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"self.ordinals\"]",
        "kind": 5,
        "importPath": "core.numbers.ordinals",
        "description": "core.numbers.ordinals",
        "peekOfCode": "ctx.lists[\"self.ordinals\"] = ordinal_numbers.keys()\nctx.lists[\"self.ordinals_small\"] = ordinal_small.keys()\n@mod.capture(rule=\"{self.ordinals}\")\ndef ordinals(m) -> int:\n    \"\"\"Returns a single ordinal as a digit\"\"\"\n    return int(ordinal_numbers[m[0]])\n@mod.capture(rule=\"{self.ordinals_small}\")\ndef ordinals_small(m) -> int:\n    \"\"\"Returns a single ordinal as a digit\"\"\"\n    return int(ordinal_numbers[m[0]])",
        "detail": "core.numbers.ordinals",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"self.ordinals_small\"]",
        "kind": 5,
        "importPath": "core.numbers.ordinals",
        "description": "core.numbers.ordinals",
        "peekOfCode": "ctx.lists[\"self.ordinals_small\"] = ordinal_small.keys()\n@mod.capture(rule=\"{self.ordinals}\")\ndef ordinals(m) -> int:\n    \"\"\"Returns a single ordinal as a digit\"\"\"\n    return int(ordinal_numbers[m[0]])\n@mod.capture(rule=\"{self.ordinals_small}\")\ndef ordinals_small(m) -> int:\n    \"\"\"Returns a single ordinal as a digit\"\"\"\n    return int(ordinal_numbers[m[0]])",
        "detail": "core.numbers.ordinals",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "core.screens.screens",
        "description": "core.screens.screens",
        "peekOfCode": "class Actions:\n    def screens_show_numbering():\n        \"\"\"Show screen number on each screen\"\"\"\n        screens = get_sorted_screens()\n        number = 1\n        for screen in screens:\n            show_screen_number(screen, number)\n            number += 1\n    def screens_get_by_number(screen_number: int) -> ui.Screen:\n        \"\"\"Get screen by number\"\"\"",
        "detail": "core.screens.screens",
        "documentation": {}
    },
    {
        "label": "get_screen_by_offset",
        "kind": 2,
        "importPath": "core.screens.screens",
        "description": "core.screens.screens",
        "peekOfCode": "def get_screen_by_offset(screen: ui.Screen, offset: int) -> ui.Screen:\n    screens = get_sorted_screens()\n    index = (screens.index(screen) + offset) % len(screens)\n    return screens[index]\ndef get_sorted_screens():\n    \"\"\"Return screens sorted by their topmost, then leftmost, edge.\n    Screens will be sorted leftto-right, then top-to-bottom as a tiebreak.\n    \"\"\"\n    return sorted(\n        ui.screens(),",
        "detail": "core.screens.screens",
        "documentation": {}
    },
    {
        "label": "get_sorted_screens",
        "kind": 2,
        "importPath": "core.screens.screens",
        "description": "core.screens.screens",
        "peekOfCode": "def get_sorted_screens():\n    \"\"\"Return screens sorted by their topmost, then leftmost, edge.\n    Screens will be sorted leftto-right, then top-to-bottom as a tiebreak.\n    \"\"\"\n    return sorted(\n        ui.screens(),\n        key=lambda screen: screen.visible_rect.left,\n    )\ndef show_screen_number(screen: ui.Screen, number: int):\n    def on_draw(c):",
        "detail": "core.screens.screens",
        "documentation": {}
    },
    {
        "label": "show_screen_number",
        "kind": 2,
        "importPath": "core.screens.screens",
        "description": "core.screens.screens",
        "peekOfCode": "def show_screen_number(screen: ui.Screen, number: int):\n    def on_draw(c):\n        c.paint.typeface = \"arial\"\n        # The min(width, height) is to not get gigantic size on portrait screens\n        c.paint.textsize = round(min(c.width, c.height) / 2)\n        text = f\"{number}\"\n        rect = c.paint.measure_text(text)[1]\n        x = c.x + c.width / 2 - rect.x - rect.width / 2\n        y = c.y + c.height / 2 + rect.height / 2\n        c.paint.style = c.paint.Style.FILL",
        "detail": "core.screens.screens",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "core.screens.screens",
        "description": "core.screens.screens",
        "peekOfCode": "mod = Module()\n@mod.action_class\nclass Actions:\n    def screens_show_numbering():\n        \"\"\"Show screen number on each screen\"\"\"\n        screens = get_sorted_screens()\n        number = 1\n        for screen in screens:\n            show_screen_number(screen, number)\n            number += 1",
        "detail": "core.screens.screens",
        "documentation": {}
    },
    {
        "label": "ImmuneString",
        "kind": 6,
        "importPath": "core.text.formatters",
        "description": "core.text.formatters",
        "peekOfCode": "class ImmuneString:\n    \"\"\"Wrapper that makes a string immune from formatting.\"\"\"\n    def __init__(self, string):\n        self.string = string\n@mod.capture(\n    # Add anything else into this that you want to be able to speak during a\n    # formatter.\n    rule=\"(<user.symbol_key> | numb <number>)\"\n)\ndef formatter_immune(m) -> ImmuneString:",
        "detail": "core.text.formatters",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "core.text.formatters",
        "description": "core.text.formatters",
        "peekOfCode": "class Actions:\n    def formatted_text(phrase: Union[str, Phrase], formatters: str) -> str:\n        \"\"\"Formats a phrase according to formatters. formatters is a comma-separated string of formatters (e.g. 'CAPITALIZE_ALL_WORDS,DOUBLE_QUOTED_STRING')\"\"\"\n        return format_phrase(phrase, formatters)\n    def insert_formatted(phrase: Union[str, Phrase], formatters: str):\n        \"\"\"Inserts a phrase formatted according to formatters. Formatters is a comma separated list of formatters (e.g. 'CAPITALIZE_ALL_WORDS,DOUBLE_QUOTED_STRING')\"\"\"\n        actions.insert(format_phrase(phrase, formatters))\n    def insert_with_history(text: str):\n        \"\"\"Inserts some text, remembering it in the phrase history.\"\"\"\n        actions.user.add_phrase_to_history(text)",
        "detail": "core.text.formatters",
        "documentation": {}
    },
    {
        "label": "format_phrase",
        "kind": 2,
        "importPath": "core.text.formatters",
        "description": "core.text.formatters",
        "peekOfCode": "def format_phrase(m: Union[str, Phrase], formatters: str):\n    global last_phrase, last_phrase_formatted\n    last_phrase = m\n    words = []\n    if isinstance(m, str):\n        words = m.split(\" \")\n    else:\n        # # I believe this is no longer necessary. -rntz, 2022-02-10\n        # # TODO: I've commented this out, remove if nobody has issues -rntz, 2022-06-21\n        # if m.words[-1] == \"over\":",
        "detail": "core.text.formatters",
        "documentation": {}
    },
    {
        "label": "format_phrase_without_adding_to_history",
        "kind": 2,
        "importPath": "core.text.formatters",
        "description": "core.text.formatters",
        "peekOfCode": "def format_phrase_without_adding_to_history(word_list, formatters: str):\n    # A formatter is a pair (keep_spaces, function). We drop spaces if any\n    # formatter does; we apply their functions in reverse order.\n    formatters = [all_formatters[name] for name in formatters.split(\",\")]\n    separator = \" \" if all(x[0] for x in formatters) else \"\"\n    functions = [x[1] for x in reversed(formatters)]\n    words = []\n    for i, word in enumerate(word_list):\n        for f in functions:\n            word = f(i, word, i == len(word_list) - 1)",
        "detail": "core.text.formatters",
        "documentation": {}
    },
    {
        "label": "surround",
        "kind": 2,
        "importPath": "core.text.formatters",
        "description": "core.text.formatters",
        "peekOfCode": "def surround(by):\n    return lambda i, word, last: (by if i == 0 else \"\") + word + (by if last else \"\")\ndef words_with_joiner(joiner):\n    \"\"\"Pass through words unchanged, but add a separator between them.\"\"\"\n    return (NOSEP, lambda i, word, _: (\"\" if i == 0 else joiner) + word)\ndef first_vs_rest(first_func, rest_func=lambda w: w):\n    \"\"\"Supply one or two transformer functions for the first and rest of\n    words respectively.\n    Leave second argument out if you want all but the first word to be passed\n    through unchanged.",
        "detail": "core.text.formatters",
        "documentation": {}
    },
    {
        "label": "words_with_joiner",
        "kind": 2,
        "importPath": "core.text.formatters",
        "description": "core.text.formatters",
        "peekOfCode": "def words_with_joiner(joiner):\n    \"\"\"Pass through words unchanged, but add a separator between them.\"\"\"\n    return (NOSEP, lambda i, word, _: (\"\" if i == 0 else joiner) + word)\ndef first_vs_rest(first_func, rest_func=lambda w: w):\n    \"\"\"Supply one or two transformer functions for the first and rest of\n    words respectively.\n    Leave second argument out if you want all but the first word to be passed\n    through unchanged.\n    Set first argument to None if you want the first word to be passed\n    through unchanged.",
        "detail": "core.text.formatters",
        "documentation": {}
    },
    {
        "label": "first_vs_rest",
        "kind": 2,
        "importPath": "core.text.formatters",
        "description": "core.text.formatters",
        "peekOfCode": "def first_vs_rest(first_func, rest_func=lambda w: w):\n    \"\"\"Supply one or two transformer functions for the first and rest of\n    words respectively.\n    Leave second argument out if you want all but the first word to be passed\n    through unchanged.\n    Set first argument to None if you want the first word to be passed\n    through unchanged.\n    \"\"\"\n    first_func = first_func or (lambda w: w)\n    return lambda i, word, _: first_func(word) if i == 0 else rest_func(word)",
        "detail": "core.text.formatters",
        "documentation": {}
    },
    {
        "label": "every_word",
        "kind": 2,
        "importPath": "core.text.formatters",
        "description": "core.text.formatters",
        "peekOfCode": "def every_word(word_func):\n    \"\"\"Apply one function to every word.\"\"\"\n    return lambda i, word, _: word_func(word)\nformatters_dict = {\n    \"NOOP\": (SEP, lambda i, word, _: word),\n    \"DOUBLE_UNDERSCORE\": (NOSEP, first_vs_rest(lambda w: f\"__{w}__\")),\n    \"PRIVATE_CAMEL_CASE\": (\n        NOSEP,\n        first_vs_rest(lambda w: w.lower(), lambda w: w.capitalize()),\n    ),",
        "detail": "core.text.formatters",
        "documentation": {}
    },
    {
        "label": "formatters",
        "kind": 2,
        "importPath": "core.text.formatters",
        "description": "core.text.formatters",
        "peekOfCode": "def formatters(m) -> str:\n    \"Returns a comma-separated string of formatters e.g. 'SNAKE,DUBSTRING'\"\n    return \",\".join(m.formatters_list)\n@mod.capture(\n    # Note that if the user speaks something like \"snake dot\", it will\n    # insert \"dot\" - otherwise, they wouldn't be able to insert punctuation\n    # words directly.\n    rule=\"<self.formatters> <user.text> (<user.text> | <user.formatter_immune>)*\"\n)\ndef format_text(m) -> str:",
        "detail": "core.text.formatters",
        "documentation": {}
    },
    {
        "label": "format_text",
        "kind": 2,
        "importPath": "core.text.formatters",
        "description": "core.text.formatters",
        "peekOfCode": "def format_text(m) -> str:\n    \"Formats the text and returns a string\"\n    out = \"\"\n    formatters = m[0]\n    for chunk in m[1:]:\n        if isinstance(chunk, ImmuneString):\n            out += chunk.string\n        else:\n            out += format_phrase(chunk, formatters)\n    return out",
        "detail": "core.text.formatters",
        "documentation": {}
    },
    {
        "label": "formatter_immune",
        "kind": 2,
        "importPath": "core.text.formatters",
        "description": "core.text.formatters",
        "peekOfCode": "def formatter_immune(m) -> ImmuneString:\n    \"\"\"Text that can be interspersed into a formatter, e.g. characters.\n    It will be inserted directly, without being formatted.\n    \"\"\"\n    if hasattr(m, \"number\"):\n        value = m.number\n    else:\n        value = m[0]\n    return ImmuneString(str(value))\n@mod.action_class",
        "detail": "core.text.formatters",
        "documentation": {}
    },
    {
        "label": "unformat_text",
        "kind": 2,
        "importPath": "core.text.formatters",
        "description": "core.text.formatters",
        "peekOfCode": "def unformat_text(text: str) -> str:\n    \"\"\"Remove format from text\"\"\"\n    unformatted = re.sub(r\"[\\W_]+\", \" \", text)\n    # Split on camelCase, including numbers\n    # FIXME: handle non-ASCII letters!\n    unformatted = re.sub(\n        r\"(?<=[a-z])(?=[A-Z])|(?<=[A-Z])(?=[A-Z][a-z])|(?<=[a-zA-Z])(?=[0-9])|(?<=[0-9])(?=[a-zA-Z])\",\n        \" \",\n        unformatted,\n    )",
        "detail": "core.text.formatters",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "core.text.formatters",
        "description": "core.text.formatters",
        "peekOfCode": "ctx = Context()\nkey = actions.key\nedit = actions.edit\nwords_to_keep_lowercase = (\n    \"a an the at by for in is of on to up and as but or nor\".split()\n)\n# The last phrase spoken, without & with formatting. Used for reformatting.\nlast_phrase = \"\"\nlast_phrase_formatted = \"\"\n# Internally, a formatter is a pair (sep, fn).",
        "detail": "core.text.formatters",
        "documentation": {}
    },
    {
        "label": "key",
        "kind": 5,
        "importPath": "core.text.formatters",
        "description": "core.text.formatters",
        "peekOfCode": "key = actions.key\nedit = actions.edit\nwords_to_keep_lowercase = (\n    \"a an the at by for in is of on to up and as but or nor\".split()\n)\n# The last phrase spoken, without & with formatting. Used for reformatting.\nlast_phrase = \"\"\nlast_phrase_formatted = \"\"\n# Internally, a formatter is a pair (sep, fn).\n#",
        "detail": "core.text.formatters",
        "documentation": {}
    },
    {
        "label": "edit",
        "kind": 5,
        "importPath": "core.text.formatters",
        "description": "core.text.formatters",
        "peekOfCode": "edit = actions.edit\nwords_to_keep_lowercase = (\n    \"a an the at by for in is of on to up and as but or nor\".split()\n)\n# The last phrase spoken, without & with formatting. Used for reformatting.\nlast_phrase = \"\"\nlast_phrase_formatted = \"\"\n# Internally, a formatter is a pair (sep, fn).\n#\n# - sep: a boolean, true iff the formatter should leave spaces between words.",
        "detail": "core.text.formatters",
        "documentation": {}
    },
    {
        "label": "words_to_keep_lowercase",
        "kind": 5,
        "importPath": "core.text.formatters",
        "description": "core.text.formatters",
        "peekOfCode": "words_to_keep_lowercase = (\n    \"a an the at by for in is of on to up and as but or nor\".split()\n)\n# The last phrase spoken, without & with formatting. Used for reformatting.\nlast_phrase = \"\"\nlast_phrase_formatted = \"\"\n# Internally, a formatter is a pair (sep, fn).\n#\n# - sep: a boolean, true iff the formatter should leave spaces between words.\n#   We use SEP & NOSEP for this for clarity.",
        "detail": "core.text.formatters",
        "documentation": {}
    },
    {
        "label": "last_phrase",
        "kind": 5,
        "importPath": "core.text.formatters",
        "description": "core.text.formatters",
        "peekOfCode": "last_phrase = \"\"\nlast_phrase_formatted = \"\"\n# Internally, a formatter is a pair (sep, fn).\n#\n# - sep: a boolean, true iff the formatter should leave spaces between words.\n#   We use SEP & NOSEP for this for clarity.\n#\n# - fn: a function (i, word, is_end) --> formatted_word, called on each `word`.\n#   `i` is the word's index in the list, and `is_end` is True iff it's the\n#   last word in the list.",
        "detail": "core.text.formatters",
        "documentation": {}
    },
    {
        "label": "last_phrase_formatted",
        "kind": 5,
        "importPath": "core.text.formatters",
        "description": "core.text.formatters",
        "peekOfCode": "last_phrase_formatted = \"\"\n# Internally, a formatter is a pair (sep, fn).\n#\n# - sep: a boolean, true iff the formatter should leave spaces between words.\n#   We use SEP & NOSEP for this for clarity.\n#\n# - fn: a function (i, word, is_end) --> formatted_word, called on each `word`.\n#   `i` is the word's index in the list, and `is_end` is True iff it's the\n#   last word in the list.\nSEP = True",
        "detail": "core.text.formatters",
        "documentation": {}
    },
    {
        "label": "SEP",
        "kind": 5,
        "importPath": "core.text.formatters",
        "description": "core.text.formatters",
        "peekOfCode": "SEP = True\nNOSEP = False\ndef format_phrase(m: Union[str, Phrase], formatters: str):\n    global last_phrase, last_phrase_formatted\n    last_phrase = m\n    words = []\n    if isinstance(m, str):\n        words = m.split(\" \")\n    else:\n        # # I believe this is no longer necessary. -rntz, 2022-02-10",
        "detail": "core.text.formatters",
        "documentation": {}
    },
    {
        "label": "NOSEP",
        "kind": 5,
        "importPath": "core.text.formatters",
        "description": "core.text.formatters",
        "peekOfCode": "NOSEP = False\ndef format_phrase(m: Union[str, Phrase], formatters: str):\n    global last_phrase, last_phrase_formatted\n    last_phrase = m\n    words = []\n    if isinstance(m, str):\n        words = m.split(\" \")\n    else:\n        # # I believe this is no longer necessary. -rntz, 2022-02-10\n        # # TODO: I've commented this out, remove if nobody has issues -rntz, 2022-06-21",
        "detail": "core.text.formatters",
        "documentation": {}
    },
    {
        "label": "formatters_dict",
        "kind": 5,
        "importPath": "core.text.formatters",
        "description": "core.text.formatters",
        "peekOfCode": "formatters_dict = {\n    \"NOOP\": (SEP, lambda i, word, _: word),\n    \"DOUBLE_UNDERSCORE\": (NOSEP, first_vs_rest(lambda w: f\"__{w}__\")),\n    \"PRIVATE_CAMEL_CASE\": (\n        NOSEP,\n        first_vs_rest(lambda w: w.lower(), lambda w: w.capitalize()),\n    ),\n    \"PROTECTED_CAMEL_CASE\": (\n        NOSEP,\n        first_vs_rest(lambda w: w.lower(), lambda w: w.capitalize()),",
        "detail": "core.text.formatters",
        "documentation": {}
    },
    {
        "label": "formatters_words",
        "kind": 5,
        "importPath": "core.text.formatters",
        "description": "core.text.formatters",
        "peekOfCode": "formatters_words = {\n    \"all cap\": formatters_dict[\"ALL_CAPS\"],\n    \"all down\": formatters_dict[\"ALL_LOWERCASE\"],\n    \"camel\": formatters_dict[\"PRIVATE_CAMEL_CASE\"],\n    \"dotted\": formatters_dict[\"DOT_SEPARATED\"],\n    \"dub string\": formatters_dict[\"DOUBLE_QUOTED_STRING\"],\n    \"dunder\": formatters_dict[\"DOUBLE_UNDERSCORE\"],\n    \"hammer\": formatters_dict[\"PUBLIC_CAMEL_CASE\"],\n    \"kebab\": formatters_dict[\"DASH_SEPARATED\"],\n    \"packed\": formatters_dict[\"DOUBLE_COLON_SEPARATED\"],",
        "detail": "core.text.formatters",
        "documentation": {}
    },
    {
        "label": "all_formatters",
        "kind": 5,
        "importPath": "core.text.formatters",
        "description": "core.text.formatters",
        "peekOfCode": "all_formatters = {}\nall_formatters.update(formatters_dict)\nall_formatters.update(formatters_words)\nmod = Module()\nmod.list(\"formatters\", desc=\"list of formatters\")\nmod.list(\n    \"prose_formatter\",\n    desc=\"words to start dictating prose, and the formatter they apply\",\n)\n@mod.capture(rule=\"{self.formatters}+\")",
        "detail": "core.text.formatters",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "core.text.formatters",
        "description": "core.text.formatters",
        "peekOfCode": "mod = Module()\nmod.list(\"formatters\", desc=\"list of formatters\")\nmod.list(\n    \"prose_formatter\",\n    desc=\"words to start dictating prose, and the formatter they apply\",\n)\n@mod.capture(rule=\"{self.formatters}+\")\ndef formatters(m) -> str:\n    \"Returns a comma-separated string of formatters e.g. 'SNAKE,DUBSTRING'\"\n    return \",\".join(m.formatters_list)",
        "detail": "core.text.formatters",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"self.formatters\"]",
        "kind": 5,
        "importPath": "core.text.formatters",
        "description": "core.text.formatters",
        "peekOfCode": "ctx.lists[\"self.formatters\"] = formatters_words.keys()\nctx.lists[\"self.prose_formatter\"] = {\n    \"say\": \"NOOP\",\n    \"speak\": \"NOOP\",\n    \"sentence\": \"CAPITALIZE_FIRST_WORD\",\n}",
        "detail": "core.text.formatters",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"self.prose_formatter\"]",
        "kind": 5,
        "importPath": "core.text.formatters",
        "description": "core.text.formatters",
        "peekOfCode": "ctx.lists[\"self.prose_formatter\"] = {\n    \"say\": \"NOOP\",\n    \"speak\": \"NOOP\",\n    \"sentence\": \"CAPITALIZE_FIRST_WORD\",\n}",
        "detail": "core.text.formatters",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "core.text.phrase_history",
        "description": "core.text.phrase_history",
        "peekOfCode": "class Actions:\n    def get_last_phrase() -> str:\n        \"\"\"Gets the last phrase\"\"\"\n        return phrase_history[0] if phrase_history else \"\"\n    def get_recent_phrase(number: int) -> str:\n        \"\"\"Gets the nth most recent phrase\"\"\"\n        try:\n            return phrase_history[number - 1]\n        except IndexError:\n            return \"\"",
        "detail": "core.text.phrase_history",
        "documentation": {}
    },
    {
        "label": "gui",
        "kind": 2,
        "importPath": "core.text.phrase_history",
        "description": "core.text.phrase_history",
        "peekOfCode": "def gui(gui: imgui.GUI):\n    gui.text(\"Recent phrases\")\n    gui.text(\"Say 'recent repeat <number>' retype a phrase on this list.\")\n    gui.text(\"Say 'recent copy <number>' to copy a phrase from this list.\")\n    gui.line()\n    for index, text in enumerate(phrase_history[:phrase_history_display_length], 1):\n        gui.text(f\"{index}: {text}\")\n    gui.spacer()\n    if gui.button(\"Recent close\"):\n        actions.user.phrase_history_hide()",
        "detail": "core.text.phrase_history",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "core.text.phrase_history",
        "description": "core.text.phrase_history",
        "peekOfCode": "mod = Module()\n# list of recent phrases, most recent first\nphrase_history = []\nphrase_history_length = 40\nphrase_history_display_length = 40\n@mod.action_class\nclass Actions:\n    def get_last_phrase() -> str:\n        \"\"\"Gets the last phrase\"\"\"\n        return phrase_history[0] if phrase_history else \"\"",
        "detail": "core.text.phrase_history",
        "documentation": {}
    },
    {
        "label": "phrase_history",
        "kind": 5,
        "importPath": "core.text.phrase_history",
        "description": "core.text.phrase_history",
        "peekOfCode": "phrase_history = []\nphrase_history_length = 40\nphrase_history_display_length = 40\n@mod.action_class\nclass Actions:\n    def get_last_phrase() -> str:\n        \"\"\"Gets the last phrase\"\"\"\n        return phrase_history[0] if phrase_history else \"\"\n    def get_recent_phrase(number: int) -> str:\n        \"\"\"Gets the nth most recent phrase\"\"\"",
        "detail": "core.text.phrase_history",
        "documentation": {}
    },
    {
        "label": "phrase_history_length",
        "kind": 5,
        "importPath": "core.text.phrase_history",
        "description": "core.text.phrase_history",
        "peekOfCode": "phrase_history_length = 40\nphrase_history_display_length = 40\n@mod.action_class\nclass Actions:\n    def get_last_phrase() -> str:\n        \"\"\"Gets the last phrase\"\"\"\n        return phrase_history[0] if phrase_history else \"\"\n    def get_recent_phrase(number: int) -> str:\n        \"\"\"Gets the nth most recent phrase\"\"\"\n        try:",
        "detail": "core.text.phrase_history",
        "documentation": {}
    },
    {
        "label": "phrase_history_display_length",
        "kind": 5,
        "importPath": "core.text.phrase_history",
        "description": "core.text.phrase_history",
        "peekOfCode": "phrase_history_display_length = 40\n@mod.action_class\nclass Actions:\n    def get_last_phrase() -> str:\n        \"\"\"Gets the last phrase\"\"\"\n        return phrase_history[0] if phrase_history else \"\"\n    def get_recent_phrase(number: int) -> str:\n        \"\"\"Gets the nth most recent phrase\"\"\"\n        try:\n            return phrase_history[number - 1]",
        "detail": "core.text.phrase_history",
        "documentation": {}
    },
    {
        "label": "DictationFormat",
        "kind": 6,
        "importPath": "core.text.text_and_dictation",
        "description": "core.text.text_and_dictation",
        "peekOfCode": "class DictationFormat:\n    def __init__(self):\n        self.reset()\n    def reset(self):\n        self.reset_context()\n        self.force_no_space = False\n        self.force_capitalization = None  # Can also be \"cap\" or \"no cap\".\n    def reset_context(self):\n        self.before = \"\"\n        self.state = \"sentence start\"",
        "detail": "core.text.text_and_dictation",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "core.text.text_and_dictation",
        "description": "core.text.text_and_dictation",
        "peekOfCode": "class Actions:\n    def dictation_format_reset():\n        \"\"\"Resets the dictation formatter\"\"\"\n        return dictation_formatter.reset()\n    def dictation_format_cap():\n        \"\"\"Sets the dictation formatter to capitalize\"\"\"\n        dictation_formatter.cap()\n    def dictation_format_no_cap():\n        \"\"\"Sets the dictation formatter to not capitalize\"\"\"\n        dictation_formatter.no_cap()",
        "detail": "core.text.text_and_dictation",
        "documentation": {}
    },
    {
        "label": "prose_modifier",
        "kind": 2,
        "importPath": "core.text.text_and_dictation",
        "description": "core.text.text_and_dictation",
        "peekOfCode": "def prose_modifier(m) -> Callable:\n    return getattr(DictationFormat, m.prose_modifiers)\n@mod.capture(rule=\"numeral <user.number_string>\")\ndef prose_simple_number(m) -> str:\n    return m.number_string\n@mod.capture(rule=\"numeral <user.number_string> (dot | point) <digit_string>\")\ndef prose_number_with_dot(m) -> str:\n    return m.number_string + \".\" + m.digit_string\n@mod.capture(rule=\"numeral <user.number_string> colon <user.number_string>\")\ndef prose_number_with_colon(m) -> str:",
        "detail": "core.text.text_and_dictation",
        "documentation": {}
    },
    {
        "label": "prose_simple_number",
        "kind": 2,
        "importPath": "core.text.text_and_dictation",
        "description": "core.text.text_and_dictation",
        "peekOfCode": "def prose_simple_number(m) -> str:\n    return m.number_string\n@mod.capture(rule=\"numeral <user.number_string> (dot | point) <digit_string>\")\ndef prose_number_with_dot(m) -> str:\n    return m.number_string + \".\" + m.digit_string\n@mod.capture(rule=\"numeral <user.number_string> colon <user.number_string>\")\ndef prose_number_with_colon(m) -> str:\n    return m.number_string_1 + \":\" + m.number_string_2\n@mod.capture(\n    rule=\"<user.prose_simple_number> | <user.prose_number_with_dot> | <user.prose_number_with_colon>\"",
        "detail": "core.text.text_and_dictation",
        "documentation": {}
    },
    {
        "label": "prose_number_with_dot",
        "kind": 2,
        "importPath": "core.text.text_and_dictation",
        "description": "core.text.text_and_dictation",
        "peekOfCode": "def prose_number_with_dot(m) -> str:\n    return m.number_string + \".\" + m.digit_string\n@mod.capture(rule=\"numeral <user.number_string> colon <user.number_string>\")\ndef prose_number_with_colon(m) -> str:\n    return m.number_string_1 + \":\" + m.number_string_2\n@mod.capture(\n    rule=\"<user.prose_simple_number> | <user.prose_number_with_dot> | <user.prose_number_with_colon>\"\n)\ndef prose_number(m) -> str:\n    return str(m)",
        "detail": "core.text.text_and_dictation",
        "documentation": {}
    },
    {
        "label": "prose_number_with_colon",
        "kind": 2,
        "importPath": "core.text.text_and_dictation",
        "description": "core.text.text_and_dictation",
        "peekOfCode": "def prose_number_with_colon(m) -> str:\n    return m.number_string_1 + \":\" + m.number_string_2\n@mod.capture(\n    rule=\"<user.prose_simple_number> | <user.prose_number_with_dot> | <user.prose_number_with_colon>\"\n)\ndef prose_number(m) -> str:\n    return str(m)\n@mod.capture(rule=\"({user.vocabulary} | <word>)\")\ndef word(m) -> str:\n    \"\"\"A single word, including user-defined vocabulary.\"\"\"",
        "detail": "core.text.text_and_dictation",
        "documentation": {}
    },
    {
        "label": "prose_number",
        "kind": 2,
        "importPath": "core.text.text_and_dictation",
        "description": "core.text.text_and_dictation",
        "peekOfCode": "def prose_number(m) -> str:\n    return str(m)\n@mod.capture(rule=\"({user.vocabulary} | <word>)\")\ndef word(m) -> str:\n    \"\"\"A single word, including user-defined vocabulary.\"\"\"\n    try:\n        return m.vocabulary\n    except AttributeError:\n        return \" \".join(\n            actions.dictate.replace_words(actions.dictate.parse_words(m.word))",
        "detail": "core.text.text_and_dictation",
        "documentation": {}
    },
    {
        "label": "word",
        "kind": 2,
        "importPath": "core.text.text_and_dictation",
        "description": "core.text.text_and_dictation",
        "peekOfCode": "def word(m) -> str:\n    \"\"\"A single word, including user-defined vocabulary.\"\"\"\n    try:\n        return m.vocabulary\n    except AttributeError:\n        return \" \".join(\n            actions.dictate.replace_words(actions.dictate.parse_words(m.word))\n        )\n@mod.capture(rule=\"({user.vocabulary} | <phrase>)+\")\ndef text(m) -> str:",
        "detail": "core.text.text_and_dictation",
        "documentation": {}
    },
    {
        "label": "text",
        "kind": 2,
        "importPath": "core.text.text_and_dictation",
        "description": "core.text.text_and_dictation",
        "peekOfCode": "def text(m) -> str:\n    \"\"\"A sequence of words, including user-defined vocabulary.\"\"\"\n    return format_phrase(m)\n@mod.capture(\n    rule=\"({user.vocabulary} | {user.punctuation} | {user.prose_snippets} | <phrase> | <user.prose_number> | <user.prose_modifier>)+\"\n)\ndef prose(m) -> str:\n    \"\"\"Mixed words and punctuation, auto-spaced & capitalized.\"\"\"\n    # Straighten curly quotes that were introduced to obtain proper spacing.\n    return apply_formatting(m).replace(\"“\", '\"').replace(\"”\", '\"')",
        "detail": "core.text.text_and_dictation",
        "documentation": {}
    },
    {
        "label": "prose",
        "kind": 2,
        "importPath": "core.text.text_and_dictation",
        "description": "core.text.text_and_dictation",
        "peekOfCode": "def prose(m) -> str:\n    \"\"\"Mixed words and punctuation, auto-spaced & capitalized.\"\"\"\n    # Straighten curly quotes that were introduced to obtain proper spacing.\n    return apply_formatting(m).replace(\"“\", '\"').replace(\"”\", '\"')\n@mod.capture(\n    rule=\"({user.vocabulary} | {user.punctuation} | {user.prose_snippets} | <phrase> | <user.prose_number>)+\"\n)\ndef raw_prose(m) -> str:\n    \"\"\"Mixed words and punctuation, auto-spaced & capitalized, without quote straightening and commands (for use in dictation mode).\"\"\"\n    return apply_formatting(m)",
        "detail": "core.text.text_and_dictation",
        "documentation": {}
    },
    {
        "label": "raw_prose",
        "kind": 2,
        "importPath": "core.text.text_and_dictation",
        "description": "core.text.text_and_dictation",
        "peekOfCode": "def raw_prose(m) -> str:\n    \"\"\"Mixed words and punctuation, auto-spaced & capitalized, without quote straightening and commands (for use in dictation mode).\"\"\"\n    return apply_formatting(m)\n# ---------- FORMATTING ---------- #\ndef format_phrase(m):\n    words = capture_to_words(m)\n    result = \"\"\n    for i, word in enumerate(words):\n        if i > 0 and needs_space_between(words[i - 1], word):\n            result += \" \"",
        "detail": "core.text.text_and_dictation",
        "documentation": {}
    },
    {
        "label": "format_phrase",
        "kind": 2,
        "importPath": "core.text.text_and_dictation",
        "description": "core.text.text_and_dictation",
        "peekOfCode": "def format_phrase(m):\n    words = capture_to_words(m)\n    result = \"\"\n    for i, word in enumerate(words):\n        if i > 0 and needs_space_between(words[i - 1], word):\n            result += \" \"\n        result += word\n    return result\ndef capture_to_words(m):\n    words = []",
        "detail": "core.text.text_and_dictation",
        "documentation": {}
    },
    {
        "label": "capture_to_words",
        "kind": 2,
        "importPath": "core.text.text_and_dictation",
        "description": "core.text.text_and_dictation",
        "peekOfCode": "def capture_to_words(m):\n    words = []\n    for item in m:\n        words.extend(\n            actions.dictate.replace_words(actions.dictate.parse_words(item))\n            if isinstance(item, grammar.vm.Phrase)\n            else [item]\n        )\n    return words\ndef apply_formatting(m):",
        "detail": "core.text.text_and_dictation",
        "documentation": {}
    },
    {
        "label": "apply_formatting",
        "kind": 2,
        "importPath": "core.text.text_and_dictation",
        "description": "core.text.text_and_dictation",
        "peekOfCode": "def apply_formatting(m):\n    formatter = DictationFormat()\n    formatter.state = None\n    result = \"\"\n    for item in m:\n        # prose modifiers (cap/no cap/no space) produce formatter callbacks.\n        if isinstance(item, Callable):\n            item(formatter)\n        else:\n            words = (",
        "detail": "core.text.text_and_dictation",
        "documentation": {}
    },
    {
        "label": "omit_space_before",
        "kind": 2,
        "importPath": "core.text.text_and_dictation",
        "description": "core.text.text_and_dictation",
        "peekOfCode": "def omit_space_before(text: str) -> bool:\n    return not text or no_space_before.search(text)\ndef omit_space_after(text: str) -> bool:\n    return not text or no_space_after.search(text)\ndef needs_space_between(before: str, after: str) -> bool:\n    return not (omit_space_after(before) or omit_space_before(after))\n# # TESTS, uncomment to enable\n# assert needs_space_between(\"a\", \"break\")\n# assert needs_space_between(\"break\", \"a\")\n# assert needs_space_between(\".\", \"a\")",
        "detail": "core.text.text_and_dictation",
        "documentation": {}
    },
    {
        "label": "omit_space_after",
        "kind": 2,
        "importPath": "core.text.text_and_dictation",
        "description": "core.text.text_and_dictation",
        "peekOfCode": "def omit_space_after(text: str) -> bool:\n    return not text or no_space_after.search(text)\ndef needs_space_between(before: str, after: str) -> bool:\n    return not (omit_space_after(before) or omit_space_before(after))\n# # TESTS, uncomment to enable\n# assert needs_space_between(\"a\", \"break\")\n# assert needs_space_between(\"break\", \"a\")\n# assert needs_space_between(\".\", \"a\")\n# assert needs_space_between(\"said\", \"'hello\")\n# assert needs_space_between(\"hello'\", \"said\")",
        "detail": "core.text.text_and_dictation",
        "documentation": {}
    },
    {
        "label": "needs_space_between",
        "kind": 2,
        "importPath": "core.text.text_and_dictation",
        "description": "core.text.text_and_dictation",
        "peekOfCode": "def needs_space_between(before: str, after: str) -> bool:\n    return not (omit_space_after(before) or omit_space_before(after))\n# # TESTS, uncomment to enable\n# assert needs_space_between(\"a\", \"break\")\n# assert needs_space_between(\"break\", \"a\")\n# assert needs_space_between(\".\", \"a\")\n# assert needs_space_between(\"said\", \"'hello\")\n# assert needs_space_between(\"hello'\", \"said\")\n# assert needs_space_between(\"hello.\", \"'John\")\n# assert needs_space_between(\"John.'\", \"They\")",
        "detail": "core.text.text_and_dictation",
        "documentation": {}
    },
    {
        "label": "auto_capitalize",
        "kind": 2,
        "importPath": "core.text.text_and_dictation",
        "description": "core.text.text_and_dictation",
        "peekOfCode": "def auto_capitalize(text, state=None):\n    \"\"\"\n    Auto-capitalizes text. Text must contain complete words, abbreviations, and\n    formatted expressions. `state` argument means:\n    - None: Don't capitalize initial word.\n    - \"sentence start\": Capitalize initial word.\n    - \"after newline\": Don't capitalize initial word, but we're after a newline.\n      Used for double-newline detection.\n    Returns (capitalized text, updated state).\n    \"\"\"",
        "detail": "core.text.text_and_dictation",
        "documentation": {}
    },
    {
        "label": "format_first_letter",
        "kind": 2,
        "importPath": "core.text.text_and_dictation",
        "description": "core.text.text_and_dictation",
        "peekOfCode": "def format_first_letter(text, formatter):\n    i = -1\n    for i, c in enumerate(text):\n        if c.isalpha():\n            break\n    if i >= 0 and i < len(text):\n        text = text[:i] + formatter(text[i]) + text[i + 1 :]\n    return text\ndictation_formatter = DictationFormat()\nui.register(\"app_deactivate\", lambda app: dictation_formatter.reset())",
        "detail": "core.text.text_and_dictation",
        "documentation": {}
    },
    {
        "label": "reformat_last_utterance",
        "kind": 2,
        "importPath": "core.text.text_and_dictation",
        "description": "core.text.text_and_dictation",
        "peekOfCode": "def reformat_last_utterance(formatter):\n    text = actions.user.get_last_phrase()\n    actions.user.clear_last_phrase()\n    text = formatter(text)\n    actions.user.add_phrase_to_history(text)\n    actions.insert(text)\n@mod.action_class\nclass Actions:\n    def dictation_format_reset():\n        \"\"\"Resets the dictation formatter\"\"\"",
        "detail": "core.text.text_and_dictation",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "core.text.text_and_dictation",
        "description": "core.text.text_and_dictation",
        "peekOfCode": "mod = Module()\nsetting_context_sensitive_dictation = mod.setting(\n    \"context_sensitive_dictation\",\n    type=bool,\n    default=False,\n    desc=\"Look at surrounding text to improve auto-capitalization/spacing in dictation mode. By default, this works by selecting that text & copying it to the clipboard, so it may be slow or fail in some applications.\",\n)\nmod.list(\"prose_modifiers\", desc=\"Modifiers that can be used within prose\")\nmod.list(\"prose_snippets\", desc=\"Snippets that can be used within prose\")\nctx = Context()",
        "detail": "core.text.text_and_dictation",
        "documentation": {}
    },
    {
        "label": "setting_context_sensitive_dictation",
        "kind": 5,
        "importPath": "core.text.text_and_dictation",
        "description": "core.text.text_and_dictation",
        "peekOfCode": "setting_context_sensitive_dictation = mod.setting(\n    \"context_sensitive_dictation\",\n    type=bool,\n    default=False,\n    desc=\"Look at surrounding text to improve auto-capitalization/spacing in dictation mode. By default, this works by selecting that text & copying it to the clipboard, so it may be slow or fail in some applications.\",\n)\nmod.list(\"prose_modifiers\", desc=\"Modifiers that can be used within prose\")\nmod.list(\"prose_snippets\", desc=\"Snippets that can be used within prose\")\nctx = Context()\n# Maps spoken forms to DictationFormat method names (see DictationFormat below).",
        "detail": "core.text.text_and_dictation",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "core.text.text_and_dictation",
        "description": "core.text.text_and_dictation",
        "peekOfCode": "ctx = Context()\n# Maps spoken forms to DictationFormat method names (see DictationFormat below).\nctx.lists[\"user.prose_modifiers\"] = {\n    \"cap\": \"cap\",\n    \"no cap\": \"no_cap\",\n    \"no caps\": \"no_cap\",  # \"no caps\" variant for Dragon\n    \"no space\": \"no_space\",\n}\nctx.lists[\"user.prose_snippets\"] = {\n    \"spacebar\": \" \",",
        "detail": "core.text.text_and_dictation",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"user.prose_modifiers\"]",
        "kind": 5,
        "importPath": "core.text.text_and_dictation",
        "description": "core.text.text_and_dictation",
        "peekOfCode": "ctx.lists[\"user.prose_modifiers\"] = {\n    \"cap\": \"cap\",\n    \"no cap\": \"no_cap\",\n    \"no caps\": \"no_cap\",  # \"no caps\" variant for Dragon\n    \"no space\": \"no_space\",\n}\nctx.lists[\"user.prose_snippets\"] = {\n    \"spacebar\": \" \",\n    \"new line\": \"\\n\",\n    \"new paragraph\": \"\\n\\n\",",
        "detail": "core.text.text_and_dictation",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"user.prose_snippets\"]",
        "kind": 5,
        "importPath": "core.text.text_and_dictation",
        "description": "core.text.text_and_dictation",
        "peekOfCode": "ctx.lists[\"user.prose_snippets\"] = {\n    \"spacebar\": \" \",\n    \"new line\": \"\\n\",\n    \"new paragraph\": \"\\n\\n\",\n    # Curly quotes are used to obtain proper spacing for left and right quotes, but will later be straightened.\n    \"open quote\": \"“\",\n    \"close quote\": \"”\",\n    \"smiley\": \":-)\",\n    \"winky\": \";-)\",\n    \"frowny\": \":-(\",",
        "detail": "core.text.text_and_dictation",
        "documentation": {}
    },
    {
        "label": "no_space_after",
        "kind": 5,
        "importPath": "core.text.text_and_dictation",
        "description": "core.text.text_and_dictation",
        "peekOfCode": "no_space_after = re.compile(\n    r\"\"\"\n  (?:\n    [\\s\\-_/#@([{‘“]     # characters that never need space after them\n  | (?<!\\w)[$£€¥₩₽₹]    # currency symbols not preceded by a word character\n  # quotes preceded by beginning of string, space, opening braces, dash, or other quotes\n  | (?: ^ | [\\s([{\\-'\"] ) ['\"]\n  )$\"\"\",\n    re.VERBOSE,\n)",
        "detail": "core.text.text_and_dictation",
        "documentation": {}
    },
    {
        "label": "no_space_before",
        "kind": 5,
        "importPath": "core.text.text_and_dictation",
        "description": "core.text.text_and_dictation",
        "peekOfCode": "no_space_before = re.compile(\n    r\"\"\"\n  ^(?:\n    [\\s\\-_.,!?/%)\\]}’”]   # characters that never need space before them\n  | [$£€¥₩₽₹](?!\\w)        # currency symbols not followed by a word character\n  | [;:](?!-\\)|-\\()        # colon or semicolon except for smiley faces\n  # quotes followed by end of string, space, closing braces, dash, other quotes, or some punctuation.\n  | ['\"] (?: $ | [\\s)\\]}\\-'\".,!?;:/] )\n  # apostrophe s\n  | 's(?!\\w)",
        "detail": "core.text.text_and_dictation",
        "documentation": {}
    },
    {
        "label": "no_cap_after",
        "kind": 5,
        "importPath": "core.text.text_and_dictation",
        "description": "core.text.text_and_dictation",
        "peekOfCode": "no_cap_after = re.compile(\n    r\"\"\"(\n    e\\.g\\.\n    | i\\.e\\.\n    )$\"\"\",\n    re.VERBOSE,\n)\ndef auto_capitalize(text, state=None):\n    \"\"\"\n    Auto-capitalizes text. Text must contain complete words, abbreviations, and",
        "detail": "core.text.text_and_dictation",
        "documentation": {}
    },
    {
        "label": "dictation_formatter",
        "kind": 5,
        "importPath": "core.text.text_and_dictation",
        "description": "core.text.text_and_dictation",
        "peekOfCode": "dictation_formatter = DictationFormat()\nui.register(\"app_deactivate\", lambda app: dictation_formatter.reset())\nui.register(\"win_focus\", lambda win: dictation_formatter.reset())\ndef reformat_last_utterance(formatter):\n    text = actions.user.get_last_phrase()\n    actions.user.clear_last_phrase()\n    text = formatter(text)\n    actions.user.add_phrase_to_history(text)\n    actions.insert(text)\n@mod.action_class",
        "detail": "core.text.text_and_dictation",
        "documentation": {}
    },
    {
        "label": "PhraseReplacer",
        "kind": 6,
        "importPath": "core.vocabulary.vocabulary",
        "description": "core.vocabulary.vocabulary",
        "peekOfCode": "class PhraseReplacer:\n    \"\"\"Utility for replacing phrases by other phrases inside text or word lists.\n    Replacing longer phrases has priority.\n    Args:\n      - phrase_dict: dictionary mapping recognized/spoken forms to written forms\n    \"\"\"\n    def __init__(self, phrase_dict: dict[str, str]):\n        # Index phrases by first word, then number of subsequent words n_next\n        phrase_index = dict()\n        for spoken_form, written_form in phrase_dict.items():",
        "detail": "core.vocabulary.vocabulary",
        "documentation": {}
    },
    {
        "label": "OverwrittenActions",
        "kind": 6,
        "importPath": "core.vocabulary.vocabulary",
        "description": "core.vocabulary.vocabulary",
        "peekOfCode": "class OverwrittenActions:\n    def replace_words(words: Sequence[str]) -> Sequence[str]:\n        try:\n            return phrase_replacer.replace(words)\n        except:\n            # fall back to default implementation for error-robustness\n            logging.error(\"phrase replacer failed!\")\n            return actions.next(words)\ndef _create_vocabulary_entries(spoken_form, written_form, type):\n    \"\"\"Expands the provided spoken form and written form into multiple variants based on",
        "detail": "core.vocabulary.vocabulary",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "core.vocabulary.vocabulary",
        "description": "core.vocabulary.vocabulary",
        "peekOfCode": "class Actions:\n    def add_selection_to_vocabulary(phrase: Union[Phrase, str] = \"\", type: str = \"\"):\n        \"\"\"Permanently adds the currently selected text to the vocabulary with the provided\n        spoken form and adds variants based on the type (\"noun\" or \"name\").\n        \"\"\"\n        _add_selection_to_csv(\n            phrase,\n            type,\n            \"additional_words.csv\",\n            vocabulary,",
        "detail": "core.vocabulary.vocabulary",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "core.vocabulary.vocabulary",
        "description": "core.vocabulary.vocabulary",
        "peekOfCode": "mod = Module()\nctx = Context()\nmod.list(\"vocabulary\", desc=\"additional vocabulary words\")\n# Default words that will need to be capitalized.\n# DON'T EDIT THIS. Edit settings/words_to_replace.csv instead.\n# These defaults and those later in this file are ONLY used when\n# auto-creating the corresponding settings/*.csv files. Those csv files\n# determine the contents of user.vocabulary and dictate.word_map. Once they\n# exist, the contents of the lists/dictionaries below are irrelevant.\n_capitalize_defaults = [",
        "detail": "core.vocabulary.vocabulary",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "core.vocabulary.vocabulary",
        "description": "core.vocabulary.vocabulary",
        "peekOfCode": "ctx = Context()\nmod.list(\"vocabulary\", desc=\"additional vocabulary words\")\n# Default words that will need to be capitalized.\n# DON'T EDIT THIS. Edit settings/words_to_replace.csv instead.\n# These defaults and those later in this file are ONLY used when\n# auto-creating the corresponding settings/*.csv files. Those csv files\n# determine the contents of user.vocabulary and dictate.word_map. Once they\n# exist, the contents of the lists/dictionaries below are irrelevant.\n_capitalize_defaults = [\n    # NB. the lexicon now capitalizes January/February by default, but not the",
        "detail": "core.vocabulary.vocabulary",
        "documentation": {}
    },
    {
        "label": "_capitalize_defaults",
        "kind": 5,
        "importPath": "core.vocabulary.vocabulary",
        "description": "core.vocabulary.vocabulary",
        "peekOfCode": "_capitalize_defaults = [\n    # NB. the lexicon now capitalizes January/February by default, but not the\n    # others below. Not sure why.\n    \"January\",\n    \"February\",\n    # March omitted because it's a regular word too\n    \"April\",\n    # May omitted because it's a regular word too\n    \"June\",\n    \"July\",",
        "detail": "core.vocabulary.vocabulary",
        "documentation": {}
    },
    {
        "label": "_word_map_defaults",
        "kind": 5,
        "importPath": "core.vocabulary.vocabulary",
        "description": "core.vocabulary.vocabulary",
        "peekOfCode": "_word_map_defaults = {\n    # E.g:\n    # \"cash\": \"cache\",\n    # This is the opposite ordering to words_to_replace.csv (the latter has the target word first)\n}\n_word_map_defaults.update({word.lower(): word for word in _capitalize_defaults})\n# phrases_to_replace is a spoken form -> written form map, used by our\n# implementation of `dictate.replace_words` (at bottom of file) to rewrite words\n# and phrases Talon recognized. This does not change the priority with which\n# Talon recognizes particular phrases over others.",
        "detail": "core.vocabulary.vocabulary",
        "documentation": {}
    },
    {
        "label": "phrases_to_replace",
        "kind": 5,
        "importPath": "core.vocabulary.vocabulary",
        "description": "core.vocabulary.vocabulary",
        "peekOfCode": "phrases_to_replace = get_list_from_csv(\n    \"words_to_replace.csv\",\n    headers=(\"Replacement\", \"Original\"),\n    default=_word_map_defaults,\n)\n# \"dictate.word_map\" is used by Talon's built-in default implementation of\n# `dictate.replace_words`, but supports only single-word replacements.\n# Multi-word phrases are ignored.\nctx.settings[\"dictate.word_map\"] = phrases_to_replace\n# Default words that should be added to Talon's vocabulary.",
        "detail": "core.vocabulary.vocabulary",
        "documentation": {}
    },
    {
        "label": "ctx.settings[\"dictate.word_map\"]",
        "kind": 5,
        "importPath": "core.vocabulary.vocabulary",
        "description": "core.vocabulary.vocabulary",
        "peekOfCode": "ctx.settings[\"dictate.word_map\"] = phrases_to_replace\n# Default words that should be added to Talon's vocabulary.\n# Don't edit this. Edit 'additional_vocabulary.csv' instead\n_simple_vocab_default = [\"nmap\", \"admin\", \"Cisco\", \"Citrix\", \"VPN\", \"DNS\", \"Minecraft\"]\n# Defaults for different pronounciations of words that need to be added to\n# Talon's vocabulary.\n_default_vocabulary = {\n    \"N map\": \"nmap\",\n    \"under documented\": \"under-documented\",\n}",
        "detail": "core.vocabulary.vocabulary",
        "documentation": {}
    },
    {
        "label": "_simple_vocab_default",
        "kind": 5,
        "importPath": "core.vocabulary.vocabulary",
        "description": "core.vocabulary.vocabulary",
        "peekOfCode": "_simple_vocab_default = [\"nmap\", \"admin\", \"Cisco\", \"Citrix\", \"VPN\", \"DNS\", \"Minecraft\"]\n# Defaults for different pronounciations of words that need to be added to\n# Talon's vocabulary.\n_default_vocabulary = {\n    \"N map\": \"nmap\",\n    \"under documented\": \"under-documented\",\n}\n_default_vocabulary.update({word: word for word in _simple_vocab_default})\n# \"user.vocabulary\" is used to explicitly add words/phrases that Talon doesn't\n# recognize. Words in user.vocabulary (or other lists and captures) are",
        "detail": "core.vocabulary.vocabulary",
        "documentation": {}
    },
    {
        "label": "_default_vocabulary",
        "kind": 5,
        "importPath": "core.vocabulary.vocabulary",
        "description": "core.vocabulary.vocabulary",
        "peekOfCode": "_default_vocabulary = {\n    \"N map\": \"nmap\",\n    \"under documented\": \"under-documented\",\n}\n_default_vocabulary.update({word: word for word in _simple_vocab_default})\n# \"user.vocabulary\" is used to explicitly add words/phrases that Talon doesn't\n# recognize. Words in user.vocabulary (or other lists and captures) are\n# \"command-like\" and their recognition is prioritized over ordinary words.\nvocabulary = get_list_from_csv(\n    \"additional_words.csv\",",
        "detail": "core.vocabulary.vocabulary",
        "documentation": {}
    },
    {
        "label": "vocabulary",
        "kind": 5,
        "importPath": "core.vocabulary.vocabulary",
        "description": "core.vocabulary.vocabulary",
        "peekOfCode": "vocabulary = get_list_from_csv(\n    \"additional_words.csv\",\n    headers=(\"Word(s)\", \"Spoken Form (If Different)\"),\n    default=_default_vocabulary,\n)\nctx.lists[\"user.vocabulary\"] = vocabulary\nclass PhraseReplacer:\n    \"\"\"Utility for replacing phrases by other phrases inside text or word lists.\n    Replacing longer phrases has priority.\n    Args:",
        "detail": "core.vocabulary.vocabulary",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"user.vocabulary\"]",
        "kind": 5,
        "importPath": "core.vocabulary.vocabulary",
        "description": "core.vocabulary.vocabulary",
        "peekOfCode": "ctx.lists[\"user.vocabulary\"] = vocabulary\nclass PhraseReplacer:\n    \"\"\"Utility for replacing phrases by other phrases inside text or word lists.\n    Replacing longer phrases has priority.\n    Args:\n      - phrase_dict: dictionary mapping recognized/spoken forms to written forms\n    \"\"\"\n    def __init__(self, phrase_dict: dict[str, str]):\n        # Index phrases by first word, then number of subsequent words n_next\n        phrase_index = dict()",
        "detail": "core.vocabulary.vocabulary",
        "documentation": {}
    },
    {
        "label": "rep",
        "kind": 5,
        "importPath": "core.vocabulary.vocabulary",
        "description": "core.vocabulary.vocabulary",
        "peekOfCode": "rep = PhraseReplacer(\n    {\n        \"this\": \"foo\",\n        \"that\": \"bar\",\n        \"this is\": \"stopping early\",\n        \"this is a test\": \"it worked!\",\n    }\n)\nassert rep.replace_string(\"gnork\") == \"gnork\"\nassert rep.replace_string(\"this\") == \"foo\"",
        "detail": "core.vocabulary.vocabulary",
        "documentation": {}
    },
    {
        "label": "phrase_replacer",
        "kind": 5,
        "importPath": "core.vocabulary.vocabulary",
        "description": "core.vocabulary.vocabulary",
        "peekOfCode": "phrase_replacer = PhraseReplacer(phrases_to_replace)\n@ctx.action_class(\"dictate\")\nclass OverwrittenActions:\n    def replace_words(words: Sequence[str]) -> Sequence[str]:\n        try:\n            return phrase_replacer.replace(words)\n        except:\n            # fall back to default implementation for error-robustness\n            logging.error(\"phrase replacer failed!\")\n            return actions.next(words)",
        "detail": "core.vocabulary.vocabulary",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "core.websites_and_search_engines.websites_and_search_engines",
        "description": "core.websites_and_search_engines.websites_and_search_engines",
        "peekOfCode": "class Actions:\n    def open_url(url: str):\n        \"\"\"Visit the given URL.\"\"\"\n        webbrowser.open(url)\n    def search_with_search_engine(search_template: str, search_text: str):\n        \"\"\"Search a search engine for given text\"\"\"\n        url = search_template.replace(\"%s\", quote_plus(search_text))\n        webbrowser.open(url)",
        "detail": "core.websites_and_search_engines.websites_and_search_engines",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "core.websites_and_search_engines.websites_and_search_engines",
        "description": "core.websites_and_search_engines.websites_and_search_engines",
        "peekOfCode": "mod = Module()\nmod.list(\"website\", desc=\"A website.\")\nmod.list(\n    \"search_engine\",\n    desc=\"A search engine.  Any instance of %s will be replaced by query text\",\n)\nwebsite_defaults = {\n    \"talon home page\": \"http://talonvoice.com\",\n    \"talon slack\": \"http://talonvoice.slack.com/messages/help\",\n    \"talon wiki\": \"https://talon.wiki/\",",
        "detail": "core.websites_and_search_engines.websites_and_search_engines",
        "documentation": {}
    },
    {
        "label": "website_defaults",
        "kind": 5,
        "importPath": "core.websites_and_search_engines.websites_and_search_engines",
        "description": "core.websites_and_search_engines.websites_and_search_engines",
        "peekOfCode": "website_defaults = {\n    \"talon home page\": \"http://talonvoice.com\",\n    \"talon slack\": \"http://talonvoice.slack.com/messages/help\",\n    \"talon wiki\": \"https://talon.wiki/\",\n    \"talon practice\": \"https://chaosparrot.github.io/talon_practice/\",\n    \"talon repository search\": \"https://search.talonvoice.com/search/\",\n    \"amazon\": \"https://www.amazon.com/\",\n    \"dropbox\": \"https://dropbox.com/\",\n    \"google\": \"https://www.google.com/\",\n    \"google calendar\": \"https://calendar.google.com\",",
        "detail": "core.websites_and_search_engines.websites_and_search_engines",
        "documentation": {}
    },
    {
        "label": "_search_engine_defaults",
        "kind": 5,
        "importPath": "core.websites_and_search_engines.websites_and_search_engines",
        "description": "core.websites_and_search_engines.websites_and_search_engines",
        "peekOfCode": "_search_engine_defaults = {\n    \"amazon\": \"https://www.amazon.com/s/?field-keywords=%s\",\n    \"google\": \"https://www.google.com/search?q=%s\",\n    \"map\": \"https://maps.google.com/maps?q=%s\",\n    \"scholar\": \"https://scholar.google.com/scholar?q=%s\",\n    \"wiki\": \"https://en.wikipedia.org/w/index.php?search=%s\",\n}\nctx = Context()\nctx.lists[\"self.website\"] = get_list_from_csv(\n    \"websites.csv\",",
        "detail": "core.websites_and_search_engines.websites_and_search_engines",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "core.websites_and_search_engines.websites_and_search_engines",
        "description": "core.websites_and_search_engines.websites_and_search_engines",
        "peekOfCode": "ctx = Context()\nctx.lists[\"self.website\"] = get_list_from_csv(\n    \"websites.csv\",\n    headers=(\"URL\", \"Spoken name\"),\n    default=website_defaults,\n)\nctx.lists[\"self.search_engine\"] = get_list_from_csv(\n    \"search_engines.csv\",\n    headers=(\"URL Template\", \"Name\"),\n    default=_search_engine_defaults,",
        "detail": "core.websites_and_search_engines.websites_and_search_engines",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"self.website\"]",
        "kind": 5,
        "importPath": "core.websites_and_search_engines.websites_and_search_engines",
        "description": "core.websites_and_search_engines.websites_and_search_engines",
        "peekOfCode": "ctx.lists[\"self.website\"] = get_list_from_csv(\n    \"websites.csv\",\n    headers=(\"URL\", \"Spoken name\"),\n    default=website_defaults,\n)\nctx.lists[\"self.search_engine\"] = get_list_from_csv(\n    \"search_engines.csv\",\n    headers=(\"URL Template\", \"Name\"),\n    default=_search_engine_defaults,\n)",
        "detail": "core.websites_and_search_engines.websites_and_search_engines",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"self.search_engine\"]",
        "kind": 5,
        "importPath": "core.websites_and_search_engines.websites_and_search_engines",
        "description": "core.websites_and_search_engines.websites_and_search_engines",
        "peekOfCode": "ctx.lists[\"self.search_engine\"] = get_list_from_csv(\n    \"search_engines.csv\",\n    headers=(\"URL Template\", \"Name\"),\n    default=_search_engine_defaults,\n)\n@mod.action_class\nclass Actions:\n    def open_url(url: str):\n        \"\"\"Visit the given URL.\"\"\"\n        webbrowser.open(url)",
        "detail": "core.websites_and_search_engines.websites_and_search_engines",
        "documentation": {}
    },
    {
        "label": "tab_actions",
        "kind": 6,
        "importPath": "core.windows_and_tabs.tabs",
        "description": "core.windows_and_tabs.tabs",
        "peekOfCode": "class tab_actions:\n    def tab_jump(number: int):\n        \"\"\"Jumps to the specified tab\"\"\"\n    def tab_final():\n        \"\"\"Jumps to the final tab\"\"\"\n    def tab_close_wrapper():\n        \"\"\"Closes the current tab.\n        Exists so that apps can implement their own delay before running tab_close() to handle repetitions better.\n        \"\"\"\n        actions.app.tab_close()",
        "detail": "core.windows_and_tabs.tabs",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "core.windows_and_tabs.tabs",
        "description": "core.windows_and_tabs.tabs",
        "peekOfCode": "mod = Module()\n@mod.action_class\nclass tab_actions:\n    def tab_jump(number: int):\n        \"\"\"Jumps to the specified tab\"\"\"\n    def tab_final():\n        \"\"\"Jumps to the final tab\"\"\"\n    def tab_close_wrapper():\n        \"\"\"Closes the current tab.\n        Exists so that apps can implement their own delay before running tab_close() to handle repetitions better.",
        "detail": "core.windows_and_tabs.tabs",
        "documentation": {}
    },
    {
        "label": "RelativeScreenPos",
        "kind": 6,
        "importPath": "core.windows_and_tabs.window_snap",
        "description": "core.windows_and_tabs.window_snap",
        "peekOfCode": "class RelativeScreenPos:\n    \"\"\"Represents a window position as a fraction of the screen.\"\"\"\n    def __init__(self, left, top, right, bottom):\n        self.left = left\n        self.top = top\n        self.bottom = bottom\n        self.right = right\nmod = Module()\nmod.list(\n    \"window_snap_positions\",",
        "detail": "core.windows_and_tabs.window_snap",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "core.windows_and_tabs.window_snap",
        "description": "core.windows_and_tabs.window_snap",
        "peekOfCode": "class Actions:\n    def snap_window(pos: RelativeScreenPos) -> None:\n        \"\"\"Move the active window to a specific position on-screen.\n        See `RelativeScreenPos` for the structure of this position.\n        \"\"\"\n        _snap_window_helper(ui.active_window(), pos)\n    def move_window_next_screen() -> None:\n        \"\"\"Move the active window to a specific screen.\"\"\"\n        _move_to_screen(ui.active_window(), offset=1)\n    def move_window_previous_screen() -> None:",
        "detail": "core.windows_and_tabs.window_snap",
        "documentation": {}
    },
    {
        "label": "window_snap_position",
        "kind": 2,
        "importPath": "core.windows_and_tabs.window_snap",
        "description": "core.windows_and_tabs.window_snap",
        "peekOfCode": "def window_snap_position(m) -> RelativeScreenPos:\n    return _snap_positions[m.window_snap_positions]\nctx = Context()\nctx.lists[\"user.window_snap_positions\"] = _snap_positions.keys()\n@mod.action_class\nclass Actions:\n    def snap_window(pos: RelativeScreenPos) -> None:\n        \"\"\"Move the active window to a specific position on-screen.\n        See `RelativeScreenPos` for the structure of this position.\n        \"\"\"",
        "detail": "core.windows_and_tabs.window_snap",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "core.windows_and_tabs.window_snap",
        "description": "core.windows_and_tabs.window_snap",
        "peekOfCode": "mod = Module()\nmod.list(\n    \"window_snap_positions\",\n    \"Predefined window positions for the current window. See `RelativeScreenPos`.\",\n)\n_snap_positions = {\n    # Halves\n    # .---.---.     .-------.\n    # |   |   |  &  |-------|\n    # '---'---'     '-------'",
        "detail": "core.windows_and_tabs.window_snap",
        "documentation": {}
    },
    {
        "label": "_snap_positions",
        "kind": 5,
        "importPath": "core.windows_and_tabs.window_snap",
        "description": "core.windows_and_tabs.window_snap",
        "peekOfCode": "_snap_positions = {\n    # Halves\n    # .---.---.     .-------.\n    # |   |   |  &  |-------|\n    # '---'---'     '-------'\n    \"left\": RelativeScreenPos(0, 0, 0.5, 1),\n    \"right\": RelativeScreenPos(0.5, 0, 1, 1),\n    \"top\": RelativeScreenPos(0, 0, 1, 0.5),\n    \"bottom\": RelativeScreenPos(0, 0.5, 1, 1),\n    # Thirds",
        "detail": "core.windows_and_tabs.window_snap",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "core.windows_and_tabs.window_snap",
        "description": "core.windows_and_tabs.window_snap",
        "peekOfCode": "ctx = Context()\nctx.lists[\"user.window_snap_positions\"] = _snap_positions.keys()\n@mod.action_class\nclass Actions:\n    def snap_window(pos: RelativeScreenPos) -> None:\n        \"\"\"Move the active window to a specific position on-screen.\n        See `RelativeScreenPos` for the structure of this position.\n        \"\"\"\n        _snap_window_helper(ui.active_window(), pos)\n    def move_window_next_screen() -> None:",
        "detail": "core.windows_and_tabs.window_snap",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"user.window_snap_positions\"]",
        "kind": 5,
        "importPath": "core.windows_and_tabs.window_snap",
        "description": "core.windows_and_tabs.window_snap",
        "peekOfCode": "ctx.lists[\"user.window_snap_positions\"] = _snap_positions.keys()\n@mod.action_class\nclass Actions:\n    def snap_window(pos: RelativeScreenPos) -> None:\n        \"\"\"Move the active window to a specific position on-screen.\n        See `RelativeScreenPos` for the structure of this position.\n        \"\"\"\n        _snap_window_helper(ui.active_window(), pos)\n    def move_window_next_screen() -> None:\n        \"\"\"Move the active window to a specific screen.\"\"\"",
        "detail": "core.windows_and_tabs.window_snap",
        "documentation": {}
    },
    {
        "label": "AppActions",
        "kind": 6,
        "importPath": "core.windows_and_tabs.windows_and_tabs_linux",
        "description": "core.windows_and_tabs.windows_and_tabs_linux",
        "peekOfCode": "class AppActions:\n    # app.preferences()\n    def tab_close():\n        actions.key(\"ctrl-w\")\n        # action(app.tab_detach):\n        #  Move the current tab to a new window\n    def tab_next():\n        actions.key(\"ctrl-tab\")\n    def tab_open():\n        actions.key(\"ctrl-t\")",
        "detail": "core.windows_and_tabs.windows_and_tabs_linux",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "core.windows_and_tabs.windows_and_tabs_linux",
        "description": "core.windows_and_tabs.windows_and_tabs_linux",
        "peekOfCode": "ctx = Context()\nctx.matches = r\"\"\"\nos: linux\n\"\"\"\n@ctx.action_class(\"app\")\nclass AppActions:\n    # app.preferences()\n    def tab_close():\n        actions.key(\"ctrl-w\")\n        # action(app.tab_detach):",
        "detail": "core.windows_and_tabs.windows_and_tabs_linux",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "core.windows_and_tabs.windows_and_tabs_linux",
        "description": "core.windows_and_tabs.windows_and_tabs_linux",
        "peekOfCode": "ctx.matches = r\"\"\"\nos: linux\n\"\"\"\n@ctx.action_class(\"app\")\nclass AppActions:\n    # app.preferences()\n    def tab_close():\n        actions.key(\"ctrl-w\")\n        # action(app.tab_detach):\n        #  Move the current tab to a new window",
        "detail": "core.windows_and_tabs.windows_and_tabs_linux",
        "documentation": {}
    },
    {
        "label": "AppActions",
        "kind": 6,
        "importPath": "core.windows_and_tabs.windows_and_tabs_mac",
        "description": "core.windows_and_tabs.windows_and_tabs_mac",
        "peekOfCode": "class AppActions:\n    def preferences():\n        actions.key(\"cmd-,\")\n    def tab_close():\n        actions.key(\"cmd-w\")\n        # action(app.tab_detach):\n        #  Move the current tab to a new window\n    def tab_next():\n        actions.key(\"cmd-shift-]\")\n    def tab_open():",
        "detail": "core.windows_and_tabs.windows_and_tabs_mac",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "core.windows_and_tabs.windows_and_tabs_mac",
        "description": "core.windows_and_tabs.windows_and_tabs_mac",
        "peekOfCode": "ctx = Context()\nctx.matches = r\"\"\"\nos: mac\n\"\"\"\n@ctx.action_class(\"app\")\nclass AppActions:\n    def preferences():\n        actions.key(\"cmd-,\")\n    def tab_close():\n        actions.key(\"cmd-w\")",
        "detail": "core.windows_and_tabs.windows_and_tabs_mac",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "core.windows_and_tabs.windows_and_tabs_mac",
        "description": "core.windows_and_tabs.windows_and_tabs_mac",
        "peekOfCode": "ctx.matches = r\"\"\"\nos: mac\n\"\"\"\n@ctx.action_class(\"app\")\nclass AppActions:\n    def preferences():\n        actions.key(\"cmd-,\")\n    def tab_close():\n        actions.key(\"cmd-w\")\n        # action(app.tab_detach):",
        "detail": "core.windows_and_tabs.windows_and_tabs_mac",
        "documentation": {}
    },
    {
        "label": "AppActions",
        "kind": 6,
        "importPath": "core.windows_and_tabs.windows_and_tabs_win",
        "description": "core.windows_and_tabs.windows_and_tabs_win",
        "peekOfCode": "class AppActions:\n    # app.preferences()\n    def tab_close():\n        actions.key(\"ctrl-w\")\n        # action(app.tab_detach):\n        #  Move the current tab to a new window\n    def tab_next():\n        actions.key(\"ctrl-tab\")\n    def tab_open():\n        actions.key(\"ctrl-t\")",
        "detail": "core.windows_and_tabs.windows_and_tabs_win",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "core.windows_and_tabs.windows_and_tabs_win",
        "description": "core.windows_and_tabs.windows_and_tabs_win",
        "peekOfCode": "ctx = Context()\nctx.matches = r\"\"\"\nos: windows\n\"\"\"\n@ctx.action_class(\"app\")\nclass AppActions:\n    # app.preferences()\n    def tab_close():\n        actions.key(\"ctrl-w\")\n        # action(app.tab_detach):",
        "detail": "core.windows_and_tabs.windows_and_tabs_win",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "core.windows_and_tabs.windows_and_tabs_win",
        "description": "core.windows_and_tabs.windows_and_tabs_win",
        "peekOfCode": "ctx.matches = r\"\"\"\nos: windows\n\"\"\"\n@ctx.action_class(\"app\")\nclass AppActions:\n    # app.preferences()\n    def tab_close():\n        actions.key(\"ctrl-w\")\n        # action(app.tab_detach):\n        #  Move the current tab to a new window",
        "detail": "core.windows_and_tabs.windows_and_tabs_win",
        "documentation": {}
    },
    {
        "label": "scope",
        "kind": 2,
        "importPath": "core.app_running",
        "description": "core.app_running",
        "peekOfCode": "def scope():\n    return {\"running\": {app.name.lower() for app in ui.apps()}}\nui.register(\"app_launch\", scope.update)\nui.register(\"app_close\", scope.update)",
        "detail": "core.app_running",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "core.app_running",
        "description": "core.app_running",
        "peekOfCode": "mod = Module()\n@mod.scope\ndef scope():\n    return {\"running\": {app.name.lower() for app in ui.apps()}}\nui.register(\"app_launch\", scope.update)\nui.register(\"app_close\", scope.update)",
        "detail": "core.app_running",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "core.application_matches",
        "description": "core.application_matches",
        "peekOfCode": "mod = Module()\napps = mod.apps\n# apple specific apps\napps.datagrip = \"\"\"\nos: mac\nand app.name: DataGrip\n\"\"\"\napps.finder = \"\"\"\nos: mac\nand app.bundle: com.apple.finder",
        "detail": "core.application_matches",
        "documentation": {}
    },
    {
        "label": "apps",
        "kind": 5,
        "importPath": "core.application_matches",
        "description": "core.application_matches",
        "peekOfCode": "apps = mod.apps\n# apple specific apps\napps.datagrip = \"\"\"\nos: mac\nand app.name: DataGrip\n\"\"\"\napps.finder = \"\"\"\nos: mac\nand app.bundle: com.apple.finder\n\"\"\"",
        "detail": "core.application_matches",
        "documentation": {}
    },
    {
        "label": "apps.datagrip",
        "kind": 5,
        "importPath": "core.application_matches",
        "description": "core.application_matches",
        "peekOfCode": "apps.datagrip = \"\"\"\nos: mac\nand app.name: DataGrip\n\"\"\"\napps.finder = \"\"\"\nos: mac\nand app.bundle: com.apple.finder\n\"\"\"\napps.rstudio = \"\"\"\nos: mac",
        "detail": "core.application_matches",
        "documentation": {}
    },
    {
        "label": "apps.finder",
        "kind": 5,
        "importPath": "core.application_matches",
        "description": "core.application_matches",
        "peekOfCode": "apps.finder = \"\"\"\nos: mac\nand app.bundle: com.apple.finder\n\"\"\"\napps.rstudio = \"\"\"\nos: mac\nand app.name: RStudio\n\"\"\"\napps.apple_terminal = \"\"\"\nos: mac",
        "detail": "core.application_matches",
        "documentation": {}
    },
    {
        "label": "apps.rstudio",
        "kind": 5,
        "importPath": "core.application_matches",
        "description": "core.application_matches",
        "peekOfCode": "apps.rstudio = \"\"\"\nos: mac\nand app.name: RStudio\n\"\"\"\napps.apple_terminal = \"\"\"\nos: mac\nand app.bundle: com.apple.Terminal\n\"\"\"\napps.iterm2 = \"\"\"\nos: mac",
        "detail": "core.application_matches",
        "documentation": {}
    },
    {
        "label": "apps.apple_terminal",
        "kind": 5,
        "importPath": "core.application_matches",
        "description": "core.application_matches",
        "peekOfCode": "apps.apple_terminal = \"\"\"\nos: mac\nand app.bundle: com.apple.Terminal\n\"\"\"\napps.iterm2 = \"\"\"\nos: mac\nand app.bundle: com.googlecode.iterm2\n\"\"\"\n# linux specific apps\napps.keepass = \"\"\"",
        "detail": "core.application_matches",
        "documentation": {}
    },
    {
        "label": "apps.iterm2",
        "kind": 5,
        "importPath": "core.application_matches",
        "description": "core.application_matches",
        "peekOfCode": "apps.iterm2 = \"\"\"\nos: mac\nand app.bundle: com.googlecode.iterm2\n\"\"\"\n# linux specific apps\napps.keepass = \"\"\"\nos: linux\nand app.name: KeePassX2\nos: linux\nand app.name: KeePassXC",
        "detail": "core.application_matches",
        "documentation": {}
    },
    {
        "label": "apps.keepass",
        "kind": 5,
        "importPath": "core.application_matches",
        "description": "core.application_matches",
        "peekOfCode": "apps.keepass = \"\"\"\nos: linux\nand app.name: KeePassX2\nos: linux\nand app.name: KeePassXC\nos: linux\nand app.name: KeepassX2\nos: linux\nand app.name: keepassx2\nos: linux",
        "detail": "core.application_matches",
        "documentation": {}
    },
    {
        "label": "apps.signal",
        "kind": 5,
        "importPath": "core.application_matches",
        "description": "core.application_matches",
        "peekOfCode": "apps.signal = \"\"\"\nos: linux\nand app.name: Signal\nos: linux\nand app.name: signal\n\"\"\"\napps.termite = \"\"\"\nos: linux\nand app.name: /termite/\n\"\"\"",
        "detail": "core.application_matches",
        "documentation": {}
    },
    {
        "label": "apps.termite",
        "kind": 5,
        "importPath": "core.application_matches",
        "description": "core.application_matches",
        "peekOfCode": "apps.termite = \"\"\"\nos: linux\nand app.name: /termite/\n\"\"\"\napps.windows_command_processor = \"\"\"\nos: windows\nand app.name: Windows Command Processor\nos: windows\nand app.exe: cmd.exe\n\"\"\"",
        "detail": "core.application_matches",
        "documentation": {}
    },
    {
        "label": "apps.windows_command_processor",
        "kind": 5,
        "importPath": "core.application_matches",
        "description": "core.application_matches",
        "peekOfCode": "apps.windows_command_processor = \"\"\"\nos: windows\nand app.name: Windows Command Processor\nos: windows\nand app.exe: cmd.exe\n\"\"\"\napps.windows_terminal = \"\"\"\nos: windows\nand app.exe: WindowsTerminal.exe\n\"\"\"",
        "detail": "core.application_matches",
        "documentation": {}
    },
    {
        "label": "apps.windows_terminal",
        "kind": 5,
        "importPath": "core.application_matches",
        "description": "core.application_matches",
        "peekOfCode": "apps.windows_terminal = \"\"\"\nos: windows\nand app.exe: WindowsTerminal.exe\n\"\"\"\nmod.apps.windows_power_shell = \"\"\"\nos: windows\nand app.exe: powershell.exe\n\"\"\"\napps.vim = \"\"\"\nwin.title:/VIM/",
        "detail": "core.application_matches",
        "documentation": {}
    },
    {
        "label": "mod.apps.windows_power_shell",
        "kind": 5,
        "importPath": "core.application_matches",
        "description": "core.application_matches",
        "peekOfCode": "mod.apps.windows_power_shell = \"\"\"\nos: windows\nand app.exe: powershell.exe\n\"\"\"\napps.vim = \"\"\"\nwin.title:/VIM/\n\"\"\"",
        "detail": "core.application_matches",
        "documentation": {}
    },
    {
        "label": "apps.vim",
        "kind": 5,
        "importPath": "core.application_matches",
        "description": "core.application_matches",
        "peekOfCode": "apps.vim = \"\"\"\nwin.title:/VIM/\n\"\"\"",
        "detail": "core.application_matches",
        "documentation": {}
    },
    {
        "label": "SpeakableItem",
        "kind": 6,
        "importPath": "core.create_spoken_forms",
        "description": "core.create_spoken_forms",
        "peekOfCode": "class SpeakableItem:\n    name: str\n    value: Any\n@mod.action_class\nclass Actions:\n    def create_spoken_forms(\n        source: str,\n        words_to_exclude: Optional[list[str]] = None,\n        minimum_term_length: int = DEFAULT_MINIMUM_TERM_LENGTH,\n        generate_subsequences: bool = True,",
        "detail": "core.create_spoken_forms",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "core.create_spoken_forms",
        "description": "core.create_spoken_forms",
        "peekOfCode": "class Actions:\n    def create_spoken_forms(\n        source: str,\n        words_to_exclude: Optional[list[str]] = None,\n        minimum_term_length: int = DEFAULT_MINIMUM_TERM_LENGTH,\n        generate_subsequences: bool = True,\n    ) -> list[str]:\n        \"\"\"Create spoken forms for a given source\"\"\"\n        if words_to_exclude is None:\n            words_to_exclude = []",
        "detail": "core.create_spoken_forms",
        "documentation": {}
    },
    {
        "label": "create_spoken_form_for_number",
        "kind": 2,
        "importPath": "core.create_spoken_forms",
        "description": "core.create_spoken_forms",
        "peekOfCode": "def create_spoken_form_for_number(num: int):\n    \"\"\"Creates a spoken form for an integer\"\"\"\n    n3 = []\n    r1 = \"\"\n    # create numeric string\n    ns = str(num)\n    for k in range(3, 33, 3):\n        r = ns[-k:]\n        q = len(ns) - k\n        # break if end of ns has been reached",
        "detail": "core.create_spoken_forms",
        "documentation": {}
    },
    {
        "label": "create_spoken_form_years",
        "kind": 2,
        "importPath": "core.create_spoken_forms",
        "description": "core.create_spoken_forms",
        "peekOfCode": "def create_spoken_form_years(num: str):\n    \"\"\"Creates spoken forms for numbers 1000 <= num <= 9999. Returns None if not supported\"\"\"\n    val = int(num)\n    if val > 9999 or val < 1000:\n        return None\n    centuries = val // 100\n    remainder = val % 100\n    words = []\n    if centuries % 10 != 0:\n        words.append(create_spoken_form_for_number(centuries))",
        "detail": "core.create_spoken_forms",
        "documentation": {}
    },
    {
        "label": "create_single_spoken_form",
        "kind": 2,
        "importPath": "core.create_spoken_forms",
        "description": "core.create_spoken_forms",
        "peekOfCode": "def create_single_spoken_form(source: str):\n    \"\"\"\n    Returns a spoken form of a string\n        (1) Returns the value from REVERSE_PRONUNCIATION_MAP if it exists\n        (2) Splits allcaps into separate letters (\"ABC\" -> A B C)\n        (3) Otherwise, returns the lower case source.\n    \"\"\"\n    normalized_source = source.lower()\n    try:\n        mapped_source = REVERSE_PRONUNCIATION_MAP[normalized_source]",
        "detail": "core.create_spoken_forms",
        "documentation": {}
    },
    {
        "label": "create_spoken_forms_from_regex",
        "kind": 2,
        "importPath": "core.create_spoken_forms",
        "description": "core.create_spoken_forms",
        "peekOfCode": "def create_spoken_forms_from_regex(source: str, pattern: re.Pattern):\n    \"\"\"\n    Creates a list of spoken forms for source using the provided regex pattern.\n    For numeric pieces detected by the regex, generates both digit-wise and full\n    spoken forms for the numbers where appropriate.\n    \"\"\"\n    pieces = list(pattern.finditer(source))\n    # list of spoken forms returned\n    spoken_forms = []\n    # contains the pieces for the spoken form with individual digits",
        "detail": "core.create_spoken_forms",
        "documentation": {}
    },
    {
        "label": "generate_string_subsequences",
        "kind": 2,
        "importPath": "core.create_spoken_forms",
        "description": "core.create_spoken_forms",
        "peekOfCode": "def generate_string_subsequences(\n    source: str,\n    words_to_exclude: list[str],\n    minimum_term_length=DEFAULT_MINIMUM_TERM_LENGTH,\n):\n    term_sequence = source.split(\" \")\n    terms = list(\n        {\n            term.lower().strip()\n            for term in (",
        "detail": "core.create_spoken_forms",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "core.create_spoken_forms",
        "description": "core.create_spoken_forms",
        "peekOfCode": "mod = Module()\n# TODO: 'Whats application': 'WhatsApp' (Should keep \"whats app\" as well?)\n# TODO: 'V O X': 'VOX' (should keep \"VOX\" as well?)\n# Could handle by handling all alternatives for these, or by having hardcoded list of things that we want to handle specially\n# TODO: Tests\nDEFAULT_MINIMUM_TERM_LENGTH = 3\nFANCY_REGULAR_EXPRESSION = r\"[A-Z]?[a-z]+|[A-Z]+(?![a-z])|[0-9]+\"\nFILE_EXTENSIONS_REGEX = \"|\".join(\n    re.escape(file_extension.strip()) + \"$\"\n    for file_extension in file_extensions.values()",
        "detail": "core.create_spoken_forms",
        "documentation": {}
    },
    {
        "label": "DEFAULT_MINIMUM_TERM_LENGTH",
        "kind": 5,
        "importPath": "core.create_spoken_forms",
        "description": "core.create_spoken_forms",
        "peekOfCode": "DEFAULT_MINIMUM_TERM_LENGTH = 3\nFANCY_REGULAR_EXPRESSION = r\"[A-Z]?[a-z]+|[A-Z]+(?![a-z])|[0-9]+\"\nFILE_EXTENSIONS_REGEX = \"|\".join(\n    re.escape(file_extension.strip()) + \"$\"\n    for file_extension in file_extensions.values()\n)\nSYMBOLS_REGEX = \"|\".join(re.escape(symbol) for symbol in set(symbol_key_words.values()))\nREGEX_NO_SYMBOLS = re.compile(\n    \"|\".join(\n        [",
        "detail": "core.create_spoken_forms",
        "documentation": {}
    },
    {
        "label": "FANCY_REGULAR_EXPRESSION",
        "kind": 5,
        "importPath": "core.create_spoken_forms",
        "description": "core.create_spoken_forms",
        "peekOfCode": "FANCY_REGULAR_EXPRESSION = r\"[A-Z]?[a-z]+|[A-Z]+(?![a-z])|[0-9]+\"\nFILE_EXTENSIONS_REGEX = \"|\".join(\n    re.escape(file_extension.strip()) + \"$\"\n    for file_extension in file_extensions.values()\n)\nSYMBOLS_REGEX = \"|\".join(re.escape(symbol) for symbol in set(symbol_key_words.values()))\nREGEX_NO_SYMBOLS = re.compile(\n    \"|\".join(\n        [\n            FANCY_REGULAR_EXPRESSION,",
        "detail": "core.create_spoken_forms",
        "documentation": {}
    },
    {
        "label": "FILE_EXTENSIONS_REGEX",
        "kind": 5,
        "importPath": "core.create_spoken_forms",
        "description": "core.create_spoken_forms",
        "peekOfCode": "FILE_EXTENSIONS_REGEX = \"|\".join(\n    re.escape(file_extension.strip()) + \"$\"\n    for file_extension in file_extensions.values()\n)\nSYMBOLS_REGEX = \"|\".join(re.escape(symbol) for symbol in set(symbol_key_words.values()))\nREGEX_NO_SYMBOLS = re.compile(\n    \"|\".join(\n        [\n            FANCY_REGULAR_EXPRESSION,\n            FILE_EXTENSIONS_REGEX,",
        "detail": "core.create_spoken_forms",
        "documentation": {}
    },
    {
        "label": "SYMBOLS_REGEX",
        "kind": 5,
        "importPath": "core.create_spoken_forms",
        "description": "core.create_spoken_forms",
        "peekOfCode": "SYMBOLS_REGEX = \"|\".join(re.escape(symbol) for symbol in set(symbol_key_words.values()))\nREGEX_NO_SYMBOLS = re.compile(\n    \"|\".join(\n        [\n            FANCY_REGULAR_EXPRESSION,\n            FILE_EXTENSIONS_REGEX,\n        ]\n    )\n)\nREGEX_WITH_SYMBOLS = re.compile(",
        "detail": "core.create_spoken_forms",
        "documentation": {}
    },
    {
        "label": "REGEX_NO_SYMBOLS",
        "kind": 5,
        "importPath": "core.create_spoken_forms",
        "description": "core.create_spoken_forms",
        "peekOfCode": "REGEX_NO_SYMBOLS = re.compile(\n    \"|\".join(\n        [\n            FANCY_REGULAR_EXPRESSION,\n            FILE_EXTENSIONS_REGEX,\n        ]\n    )\n)\nREGEX_WITH_SYMBOLS = re.compile(\n    \"|\".join([FANCY_REGULAR_EXPRESSION, FILE_EXTENSIONS_REGEX, SYMBOLS_REGEX])",
        "detail": "core.create_spoken_forms",
        "documentation": {}
    },
    {
        "label": "REGEX_WITH_SYMBOLS",
        "kind": 5,
        "importPath": "core.create_spoken_forms",
        "description": "core.create_spoken_forms",
        "peekOfCode": "REGEX_WITH_SYMBOLS = re.compile(\n    \"|\".join([FANCY_REGULAR_EXPRESSION, FILE_EXTENSIONS_REGEX, SYMBOLS_REGEX])\n)\nREVERSE_PRONUNCIATION_MAP = {\n    **{value: key for key, value in abbreviations.items()},\n    **{value.strip(): key for key, value in file_extensions.items()},\n    **{str(value): key for key, value in digits_map.items()},\n    **{value: key for key, value in symbol_key_words.items()},\n}\n# begin: create the lists etc necessary for create_spoken_word_for_number",
        "detail": "core.create_spoken_forms",
        "documentation": {}
    },
    {
        "label": "REVERSE_PRONUNCIATION_MAP",
        "kind": 5,
        "importPath": "core.create_spoken_forms",
        "description": "core.create_spoken_forms",
        "peekOfCode": "REVERSE_PRONUNCIATION_MAP = {\n    **{value: key for key, value in abbreviations.items()},\n    **{value.strip(): key for key, value in file_extensions.items()},\n    **{str(value): key for key, value in digits_map.items()},\n    **{value: key for key, value in symbol_key_words.items()},\n}\n# begin: create the lists etc necessary for create_spoken_word_for_number\n# by convention, each entry in the list has an append space... until I clean up the function\n# the algorithm's expectation is slightly different from numbers.py\n# [\"\", \"one \", \"two \",... \"nine \"] or equivalents",
        "detail": "core.create_spoken_forms",
        "documentation": {}
    },
    {
        "label": "ones",
        "kind": 5,
        "importPath": "core.create_spoken_forms",
        "description": "core.create_spoken_forms",
        "peekOfCode": "ones = [\"\"] + [\n    REVERSE_PRONUNCIATION_MAP[str(index)] for index in range(10) if index != 0\n]\n# [\"\",\"\",\"twenty\",\"thirty\",\"forty\",...\"ninety\"]\n# or equivalent\ntwenties = [\"\", \"\"] + list(tens)\n# print(\"twenties = \" + str(twenties))\nthousands = [\"\"] + [val for index, val in enumerate(scales) if index != 0]\n# print(\"thousands = \" + thousands)\n# end: create the lists necessary for create_spoken_word_for_number",
        "detail": "core.create_spoken_forms",
        "documentation": {}
    },
    {
        "label": "twenties",
        "kind": 5,
        "importPath": "core.create_spoken_forms",
        "description": "core.create_spoken_forms",
        "peekOfCode": "twenties = [\"\", \"\"] + list(tens)\n# print(\"twenties = \" + str(twenties))\nthousands = [\"\"] + [val for index, val in enumerate(scales) if index != 0]\n# print(\"thousands = \" + thousands)\n# end: create the lists necessary for create_spoken_word_for_number\ndef create_spoken_form_for_number(num: int):\n    \"\"\"Creates a spoken form for an integer\"\"\"\n    n3 = []\n    r1 = \"\"\n    # create numeric string",
        "detail": "core.create_spoken_forms",
        "documentation": {}
    },
    {
        "label": "thousands",
        "kind": 5,
        "importPath": "core.create_spoken_forms",
        "description": "core.create_spoken_forms",
        "peekOfCode": "thousands = [\"\"] + [val for index, val in enumerate(scales) if index != 0]\n# print(\"thousands = \" + thousands)\n# end: create the lists necessary for create_spoken_word_for_number\ndef create_spoken_form_for_number(num: int):\n    \"\"\"Creates a spoken form for an integer\"\"\"\n    n3 = []\n    r1 = \"\"\n    # create numeric string\n    ns = str(num)\n    for k in range(3, 33, 3):",
        "detail": "core.create_spoken_forms",
        "documentation": {}
    },
    {
        "label": "DelayedSpeechOffActions",
        "kind": 6,
        "importPath": "core.delayed_speech_off",
        "description": "core.delayed_speech_off",
        "peekOfCode": "class DelayedSpeechOffActions:\n    def delayed_speech_on():\n        \"\"\"Activates a \"temporary speech\" mode that can be disabled lazily,\n        so that the actual disable command happens after whatever phrase\n        finishes next.\"\"\"\n        global delayed_enabled\n        if not actions.speech.enabled():\n            delayed_enabled = True\n            actions.speech.enable()\n    def delayed_speech_off():",
        "detail": "core.delayed_speech_off",
        "documentation": {}
    },
    {
        "label": "do_disable",
        "kind": 2,
        "importPath": "core.delayed_speech_off",
        "description": "core.delayed_speech_off",
        "peekOfCode": "def do_disable(e):\n    speech_system.unregister(\"post:phrase\", do_disable)\n    actions.speech.disable()\n@delay_mod.action_class\nclass DelayedSpeechOffActions:\n    def delayed_speech_on():\n        \"\"\"Activates a \"temporary speech\" mode that can be disabled lazily,\n        so that the actual disable command happens after whatever phrase\n        finishes next.\"\"\"\n        global delayed_enabled",
        "detail": "core.delayed_speech_off",
        "documentation": {}
    },
    {
        "label": "delay_mod",
        "kind": 5,
        "importPath": "core.delayed_speech_off",
        "description": "core.delayed_speech_off",
        "peekOfCode": "delay_mod = Module()\ndelayed_enabled = False\ndef do_disable(e):\n    speech_system.unregister(\"post:phrase\", do_disable)\n    actions.speech.disable()\n@delay_mod.action_class\nclass DelayedSpeechOffActions:\n    def delayed_speech_on():\n        \"\"\"Activates a \"temporary speech\" mode that can be disabled lazily,\n        so that the actual disable command happens after whatever phrase",
        "detail": "core.delayed_speech_off",
        "documentation": {}
    },
    {
        "label": "delayed_enabled",
        "kind": 5,
        "importPath": "core.delayed_speech_off",
        "description": "core.delayed_speech_off",
        "peekOfCode": "delayed_enabled = False\ndef do_disable(e):\n    speech_system.unregister(\"post:phrase\", do_disable)\n    actions.speech.disable()\n@delay_mod.action_class\nclass DelayedSpeechOffActions:\n    def delayed_speech_on():\n        \"\"\"Activates a \"temporary speech\" mode that can be disabled lazily,\n        so that the actual disable command happens after whatever phrase\n        finishes next.\"\"\"",
        "detail": "core.delayed_speech_off",
        "documentation": {}
    },
    {
        "label": "ModuleActions",
        "kind": 6,
        "importPath": "core.edit_text_file",
        "description": "core.edit_text_file",
        "peekOfCode": "class ModuleActions:\n    def edit_text_file(path: str):\n        \"\"\"Tries to open a file in the user's preferred text editor.\"\"\"\nwinctx, linuxctx, macctx = Context(), Context(), Context()\nwinctx.matches = \"os: windows\"\nlinuxctx.matches = \"os: linux\"\nmacctx.matches = \"os: mac\"\n@winctx.action_class(\"self\")\nclass WinActions:\n    def edit_text_file(path):",
        "detail": "core.edit_text_file",
        "documentation": {}
    },
    {
        "label": "WinActions",
        "kind": 6,
        "importPath": "core.edit_text_file",
        "description": "core.edit_text_file",
        "peekOfCode": "class WinActions:\n    def edit_text_file(path):\n        # If there's no applications registered that can open the given type\n        # of file, 'edit' will fail, but 'open' always gives the user a\n        # choice between applications.\n        try:\n            os.startfile(path, \"edit\")\n        except OSError:\n            os.startfile(path, \"open\")\n@macctx.action_class(\"self\")",
        "detail": "core.edit_text_file",
        "documentation": {}
    },
    {
        "label": "MacActions",
        "kind": 6,
        "importPath": "core.edit_text_file",
        "description": "core.edit_text_file",
        "peekOfCode": "class MacActions:\n    def edit_text_file(path):\n        # -t means try to open in a text editor.\n        open_with_subprocess(path, [\"/usr/bin/open\", \"-t\", path])\n@linuxctx.action_class(\"self\")\nclass LinuxActions:\n    def edit_text_file(path):\n        # we use xdg-open for this even though it might not open a text\n        # editor. we could use $EDITOR, but that might be something that\n        # requires a terminal (eg nano, vi).",
        "detail": "core.edit_text_file",
        "documentation": {}
    },
    {
        "label": "LinuxActions",
        "kind": 6,
        "importPath": "core.edit_text_file",
        "description": "core.edit_text_file",
        "peekOfCode": "class LinuxActions:\n    def edit_text_file(path):\n        # we use xdg-open for this even though it might not open a text\n        # editor. we could use $EDITOR, but that might be something that\n        # requires a terminal (eg nano, vi).\n        open_with_subprocess(path, [\"/usr/bin/xdg-open\", path])\n# Helper for linux and mac.\ndef open_with_subprocess(path, args):\n    \"\"\"Tries to open a file using the given subprocess arguments.\"\"\"\n    try:",
        "detail": "core.edit_text_file",
        "documentation": {}
    },
    {
        "label": "open_with_subprocess",
        "kind": 2,
        "importPath": "core.edit_text_file",
        "description": "core.edit_text_file",
        "peekOfCode": "def open_with_subprocess(path, args):\n    \"\"\"Tries to open a file using the given subprocess arguments.\"\"\"\n    try:\n        return subprocess.run(args, timeout=0.5, check=True)\n    except subprocess.TimeoutExpired:\n        app.notify(f\"Timeout trying to open file for editing: {path}\")\n        raise\n    except subprocess.CalledProcessError:\n        app.notify(f\"Could not open file for editing: {path}\")\n        raise",
        "detail": "core.edit_text_file",
        "documentation": {}
    },
    {
        "label": "REPO_DIR",
        "kind": 5,
        "importPath": "core.edit_text_file",
        "description": "core.edit_text_file",
        "peekOfCode": "REPO_DIR = os.path.dirname(os.path.dirname(__file__))\nSETTINGS_DIR = os.path.join(REPO_DIR, \"settings\")\nmod = Module()\nctx = Context()\nmod.list(\"talon_settings_csv\", desc=\"Absolute paths to talon user settings csv files.\")\n_csvs = {\n    name: os.path.join(SETTINGS_DIR, file_name)\n    for name, file_name in {\n        \"file extensions\": \"file_extensions.csv\",\n        \"search engines\": \"search_engines.csv\",",
        "detail": "core.edit_text_file",
        "documentation": {}
    },
    {
        "label": "SETTINGS_DIR",
        "kind": 5,
        "importPath": "core.edit_text_file",
        "description": "core.edit_text_file",
        "peekOfCode": "SETTINGS_DIR = os.path.join(REPO_DIR, \"settings\")\nmod = Module()\nctx = Context()\nmod.list(\"talon_settings_csv\", desc=\"Absolute paths to talon user settings csv files.\")\n_csvs = {\n    name: os.path.join(SETTINGS_DIR, file_name)\n    for name, file_name in {\n        \"file extensions\": \"file_extensions.csv\",\n        \"search engines\": \"search_engines.csv\",\n        \"system paths\": \"system_paths.csv\",",
        "detail": "core.edit_text_file",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "core.edit_text_file",
        "description": "core.edit_text_file",
        "peekOfCode": "mod = Module()\nctx = Context()\nmod.list(\"talon_settings_csv\", desc=\"Absolute paths to talon user settings csv files.\")\n_csvs = {\n    name: os.path.join(SETTINGS_DIR, file_name)\n    for name, file_name in {\n        \"file extensions\": \"file_extensions.csv\",\n        \"search engines\": \"search_engines.csv\",\n        \"system paths\": \"system_paths.csv\",\n        \"websites\": \"websites.csv\",",
        "detail": "core.edit_text_file",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "core.edit_text_file",
        "description": "core.edit_text_file",
        "peekOfCode": "ctx = Context()\nmod.list(\"talon_settings_csv\", desc=\"Absolute paths to talon user settings csv files.\")\n_csvs = {\n    name: os.path.join(SETTINGS_DIR, file_name)\n    for name, file_name in {\n        \"file extensions\": \"file_extensions.csv\",\n        \"search engines\": \"search_engines.csv\",\n        \"system paths\": \"system_paths.csv\",\n        \"websites\": \"websites.csv\",\n        \"words to replace\": \"words_to_replace.csv\",",
        "detail": "core.edit_text_file",
        "documentation": {}
    },
    {
        "label": "_csvs",
        "kind": 5,
        "importPath": "core.edit_text_file",
        "description": "core.edit_text_file",
        "peekOfCode": "_csvs = {\n    name: os.path.join(SETTINGS_DIR, file_name)\n    for name, file_name in {\n        \"file extensions\": \"file_extensions.csv\",\n        \"search engines\": \"search_engines.csv\",\n        \"system paths\": \"system_paths.csv\",\n        \"websites\": \"websites.csv\",\n        \"words to replace\": \"words_to_replace.csv\",\n        \"additional words\": \"additional_words.csv\",\n    }.items()",
        "detail": "core.edit_text_file",
        "documentation": {}
    },
    {
        "label": "_csvs[\"homophones\"]",
        "kind": 5,
        "importPath": "core.edit_text_file",
        "description": "core.edit_text_file",
        "peekOfCode": "_csvs[\"homophones\"] = os.path.join(REPO_DIR, \"core\", \"homophones\", \"homophones.csv\")\nctx.lists[\"self.talon_settings_csv\"] = _csvs\n@mod.action_class\nclass ModuleActions:\n    def edit_text_file(path: str):\n        \"\"\"Tries to open a file in the user's preferred text editor.\"\"\"\nwinctx, linuxctx, macctx = Context(), Context(), Context()\nwinctx.matches = \"os: windows\"\nlinuxctx.matches = \"os: linux\"\nmacctx.matches = \"os: mac\"",
        "detail": "core.edit_text_file",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"self.talon_settings_csv\"]",
        "kind": 5,
        "importPath": "core.edit_text_file",
        "description": "core.edit_text_file",
        "peekOfCode": "ctx.lists[\"self.talon_settings_csv\"] = _csvs\n@mod.action_class\nclass ModuleActions:\n    def edit_text_file(path: str):\n        \"\"\"Tries to open a file in the user's preferred text editor.\"\"\"\nwinctx, linuxctx, macctx = Context(), Context(), Context()\nwinctx.matches = \"os: windows\"\nlinuxctx.matches = \"os: linux\"\nmacctx.matches = \"os: mac\"\n@winctx.action_class(\"self\")",
        "detail": "core.edit_text_file",
        "documentation": {}
    },
    {
        "label": "winctx.matches",
        "kind": 5,
        "importPath": "core.edit_text_file",
        "description": "core.edit_text_file",
        "peekOfCode": "winctx.matches = \"os: windows\"\nlinuxctx.matches = \"os: linux\"\nmacctx.matches = \"os: mac\"\n@winctx.action_class(\"self\")\nclass WinActions:\n    def edit_text_file(path):\n        # If there's no applications registered that can open the given type\n        # of file, 'edit' will fail, but 'open' always gives the user a\n        # choice between applications.\n        try:",
        "detail": "core.edit_text_file",
        "documentation": {}
    },
    {
        "label": "linuxctx.matches",
        "kind": 5,
        "importPath": "core.edit_text_file",
        "description": "core.edit_text_file",
        "peekOfCode": "linuxctx.matches = \"os: linux\"\nmacctx.matches = \"os: mac\"\n@winctx.action_class(\"self\")\nclass WinActions:\n    def edit_text_file(path):\n        # If there's no applications registered that can open the given type\n        # of file, 'edit' will fail, but 'open' always gives the user a\n        # choice between applications.\n        try:\n            os.startfile(path, \"edit\")",
        "detail": "core.edit_text_file",
        "documentation": {}
    },
    {
        "label": "macctx.matches",
        "kind": 5,
        "importPath": "core.edit_text_file",
        "description": "core.edit_text_file",
        "peekOfCode": "macctx.matches = \"os: mac\"\n@winctx.action_class(\"self\")\nclass WinActions:\n    def edit_text_file(path):\n        # If there's no applications registered that can open the given type\n        # of file, 'edit' will fail, but 'open' always gives the user a\n        # choice between applications.\n        try:\n            os.startfile(path, \"edit\")\n        except OSError:",
        "detail": "core.edit_text_file",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "core.engine",
        "description": "core.engine",
        "peekOfCode": "class Actions:\n    def engine_sleep():\n        \"\"\"Sleep the engine\"\"\"\n        speech_system.engine_mimic(\"go to sleep\"),\n    def engine_wake():\n        \"\"\"Wake the engine\"\"\"\n        speech_system.engine_mimic(\"wake up\"),\n    def engine_mimic(cmd: str):\n        \"\"\"Sends phrase to engine\"\"\"\n        speech_system.engine_mimic(cmd)",
        "detail": "core.engine",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "core.engine",
        "description": "core.engine",
        "peekOfCode": "mod = Module()\n@mod.action_class\nclass Actions:\n    def engine_sleep():\n        \"\"\"Sleep the engine\"\"\"\n        speech_system.engine_mimic(\"go to sleep\"),\n    def engine_wake():\n        \"\"\"Wake the engine\"\"\"\n        speech_system.engine_mimic(\"wake up\"),\n    def engine_mimic(cmd: str):",
        "detail": "core.engine",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "core.system_command",
        "description": "core.system_command",
        "peekOfCode": "class Actions:\n    def system_command(cmd: str):\n        \"\"\"execute a command on the system\"\"\"\n        os.system(cmd)\n    def system_command_nb(cmd: str):\n        \"\"\"execute a command on the system without blocking\"\"\"\n        subprocess.Popen(cmd, shell=True)",
        "detail": "core.system_command",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "core.system_command",
        "description": "core.system_command",
        "peekOfCode": "mod = Module()\n@mod.action_class\nclass Actions:\n    def system_command(cmd: str):\n        \"\"\"execute a command on the system\"\"\"\n        os.system(cmd)\n    def system_command_nb(cmd: str):\n        \"\"\"execute a command on the system without blocking\"\"\"\n        subprocess.Popen(cmd, shell=True)",
        "detail": "core.system_command",
        "documentation": {}
    },
    {
        "label": "on_ready",
        "kind": 2,
        "importPath": "core.system_paths",
        "description": "core.system_paths",
        "peekOfCode": "def on_ready():\n    default_system_paths = {\n        \"user\": user_path,\n        \"profile\": user_path,\n        \"desktop\": os.path.join(user_path, \"Desktop\"),\n        \"desk\": os.path.join(user_path, \"Desktop\"),\n        \"documents\": os.path.join(user_path, \"Documents\"),\n        \"docks\": os.path.join(user_path, \"Documents\"),\n        \"downloads\": os.path.join(user_path, \"Downloads\"),\n        \"music\": os.path.join(user_path, \"Music\"),",
        "detail": "core.system_paths",
        "documentation": {}
    },
    {
        "label": "system_path",
        "kind": 2,
        "importPath": "core.system_paths",
        "description": "core.system_paths",
        "peekOfCode": "def system_path(m) -> str:\n    return m.system_paths\napp.register(\"ready\", on_ready)",
        "detail": "core.system_paths",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "core.system_paths",
        "description": "core.system_paths",
        "peekOfCode": "mod = Module()\nctx = Context()\nmod.list(\"system_paths\", desc=\"List of system paths\")\nuser_path = os.path.expanduser(\"~\")\n# We need to wait for ready before we can call \"actions.path.talon_home()\" and\n# \"actions.path.talon_user()\"\ndef on_ready():\n    default_system_paths = {\n        \"user\": user_path,\n        \"profile\": user_path,",
        "detail": "core.system_paths",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "core.system_paths",
        "description": "core.system_paths",
        "peekOfCode": "ctx = Context()\nmod.list(\"system_paths\", desc=\"List of system paths\")\nuser_path = os.path.expanduser(\"~\")\n# We need to wait for ready before we can call \"actions.path.talon_home()\" and\n# \"actions.path.talon_user()\"\ndef on_ready():\n    default_system_paths = {\n        \"user\": user_path,\n        \"profile\": user_path,\n        \"desktop\": os.path.join(user_path, \"Desktop\"),",
        "detail": "core.system_paths",
        "documentation": {}
    },
    {
        "label": "user_path",
        "kind": 5,
        "importPath": "core.system_paths",
        "description": "core.system_paths",
        "peekOfCode": "user_path = os.path.expanduser(\"~\")\n# We need to wait for ready before we can call \"actions.path.talon_home()\" and\n# \"actions.path.talon_user()\"\ndef on_ready():\n    default_system_paths = {\n        \"user\": user_path,\n        \"profile\": user_path,\n        \"desktop\": os.path.join(user_path, \"Desktop\"),\n        \"desk\": os.path.join(user_path, \"Desktop\"),\n        \"documents\": os.path.join(user_path, \"Documents\"),",
        "detail": "core.system_paths",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "core.tags",
        "description": "core.tags",
        "peekOfCode": "mod = Module()\ntagList = [\n    \"disassembler\",\n    \"gdb\",\n    \"git\",  # commandline tag for git commands\n    \"ida\",\n    \"tabs\",\n    \"generic_windows_shell\",\n    \"generic_unix_shell\",\n    \"readline\",",
        "detail": "core.tags",
        "documentation": {}
    },
    {
        "label": "tagList",
        "kind": 5,
        "importPath": "core.tags",
        "description": "core.tags",
        "peekOfCode": "tagList = [\n    \"disassembler\",\n    \"gdb\",\n    \"git\",  # commandline tag for git commands\n    \"ida\",\n    \"tabs\",\n    \"generic_windows_shell\",\n    \"generic_unix_shell\",\n    \"readline\",\n    \"taskwarrior\",  # commandline tag for taskwarrior commands",
        "detail": "core.tags",
        "documentation": {}
    },
    {
        "label": "get_list_from_csv",
        "kind": 2,
        "importPath": "core.user_settings",
        "description": "core.user_settings",
        "peekOfCode": "def get_list_from_csv(\n    filename: str, headers: tuple[str, str], default: dict[str, str] = {}\n):\n    \"\"\"Retrieves list from CSV\"\"\"\n    path = SETTINGS_DIR / filename\n    assert filename.endswith(\".csv\")\n    if not path.is_file():\n        with open(path, \"w\", encoding=\"utf-8\", newline=\"\") as file:\n            writer = csv.writer(file)\n            writer.writerow(headers)",
        "detail": "core.user_settings",
        "documentation": {}
    },
    {
        "label": "append_to_csv",
        "kind": 2,
        "importPath": "core.user_settings",
        "description": "core.user_settings",
        "peekOfCode": "def append_to_csv(filename: str, rows: dict[str, str]):\n    path = SETTINGS_DIR / filename\n    assert filename.endswith(\".csv\")\n    with open(str(path)) as file:\n        line = None\n        for line in file:\n            pass\n        needs_newline = line is not None and not line.endswith(\"\\n\")\n    with open(path, \"a\", encoding=\"utf-8\", newline=\"\") as file:\n        writer = csv.writer(file)",
        "detail": "core.user_settings",
        "documentation": {}
    },
    {
        "label": "SETTINGS_DIR",
        "kind": 5,
        "importPath": "core.user_settings",
        "description": "core.user_settings",
        "peekOfCode": "SETTINGS_DIR = Path(__file__).parents[1] / \"settings\"\nif not SETTINGS_DIR.is_dir():\n    os.mkdir(SETTINGS_DIR)\ndef get_list_from_csv(\n    filename: str, headers: tuple[str, str], default: dict[str, str] = {}\n):\n    \"\"\"Retrieves list from CSV\"\"\"\n    path = SETTINGS_DIR / filename\n    assert filename.endswith(\".csv\")\n    if not path.is_file():",
        "detail": "core.user_settings",
        "documentation": {}
    },
    {
        "label": "UserActions",
        "kind": 6,
        "importPath": "lang.batch.batch",
        "description": "lang.batch.batch",
        "peekOfCode": "class UserActions:\n    def code_comment_line_prefix():\n        actions.auto_insert(\"REM \")",
        "detail": "lang.batch.batch",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "lang.batch.batch",
        "description": "lang.batch.batch",
        "peekOfCode": "ctx = Context()\nctx.matches = r\"\"\"\ntag: user.batch\n\"\"\"\n@ctx.action_class(\"user\")\nclass UserActions:\n    def code_comment_line_prefix():\n        actions.auto_insert(\"REM \")",
        "detail": "lang.batch.batch",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "lang.batch.batch",
        "description": "lang.batch.batch",
        "peekOfCode": "ctx.matches = r\"\"\"\ntag: user.batch\n\"\"\"\n@ctx.action_class(\"user\")\nclass UserActions:\n    def code_comment_line_prefix():\n        actions.auto_insert(\"REM \")",
        "detail": "lang.batch.batch",
        "documentation": {}
    },
    {
        "label": "UserActions",
        "kind": 6,
        "importPath": "lang.c.c",
        "description": "lang.c.c",
        "peekOfCode": "class UserActions:\n    def code_operator_indirection():\n        actions.auto_insert(\"*\")\n    def code_operator_address_of():\n        actions.auto_insert(\"&\")\n    def code_operator_structure_dereference():\n        actions.auto_insert(\"->\")\n    def code_operator_subscript():\n        actions.insert(\"[]\")\n        actions.key(\"left\")",
        "detail": "lang.c.c",
        "documentation": {}
    },
    {
        "label": "c_pointers",
        "kind": 2,
        "importPath": "lang.c.c",
        "description": "lang.c.c",
        "peekOfCode": "def c_pointers(m) -> str:\n    \"Returns a string\"\n    return m.c_pointers\n@mod.capture(rule=\"{self.c_signed}\")\ndef c_signed(m) -> str:\n    \"Returns a string\"\n    return m.c_signed\n@mod.capture(rule=\"{self.c_keywords}\")\ndef c_keywords(m) -> str:\n    \"Returns a string\"",
        "detail": "lang.c.c",
        "documentation": {}
    },
    {
        "label": "c_signed",
        "kind": 2,
        "importPath": "lang.c.c",
        "description": "lang.c.c",
        "peekOfCode": "def c_signed(m) -> str:\n    \"Returns a string\"\n    return m.c_signed\n@mod.capture(rule=\"{self.c_keywords}\")\ndef c_keywords(m) -> str:\n    \"Returns a string\"\n    return m.c_keywords\n@mod.capture(rule=\"{self.c_types}\")\ndef c_types(m) -> str:\n    \"Returns a string\"",
        "detail": "lang.c.c",
        "documentation": {}
    },
    {
        "label": "c_keywords",
        "kind": 2,
        "importPath": "lang.c.c",
        "description": "lang.c.c",
        "peekOfCode": "def c_keywords(m) -> str:\n    \"Returns a string\"\n    return m.c_keywords\n@mod.capture(rule=\"{self.c_types}\")\ndef c_types(m) -> str:\n    \"Returns a string\"\n    return m.c_types\n@mod.capture(rule=\"{self.c_types}\")\ndef c_types(m) -> str:\n    \"Returns a string\"",
        "detail": "lang.c.c",
        "documentation": {}
    },
    {
        "label": "c_types",
        "kind": 2,
        "importPath": "lang.c.c",
        "description": "lang.c.c",
        "peekOfCode": "def c_types(m) -> str:\n    \"Returns a string\"\n    return m.c_types\n@mod.capture(rule=\"{self.c_types}\")\ndef c_types(m) -> str:\n    \"Returns a string\"\n    return m.c_types\n@mod.capture(rule=\"{self.stdint_types}\")\ndef stdint_types(m) -> str:\n    \"Returns a string\"",
        "detail": "lang.c.c",
        "documentation": {}
    },
    {
        "label": "c_types",
        "kind": 2,
        "importPath": "lang.c.c",
        "description": "lang.c.c",
        "peekOfCode": "def c_types(m) -> str:\n    \"Returns a string\"\n    return m.c_types\n@mod.capture(rule=\"{self.stdint_types}\")\ndef stdint_types(m) -> str:\n    \"Returns a string\"\n    return m.stdint_types\n@mod.capture(rule=\"{self.stdint_signed}\")\ndef stdint_signed(m) -> str:\n    \"Returns a string\"",
        "detail": "lang.c.c",
        "documentation": {}
    },
    {
        "label": "stdint_types",
        "kind": 2,
        "importPath": "lang.c.c",
        "description": "lang.c.c",
        "peekOfCode": "def stdint_types(m) -> str:\n    \"Returns a string\"\n    return m.stdint_types\n@mod.capture(rule=\"{self.stdint_signed}\")\ndef stdint_signed(m) -> str:\n    \"Returns a string\"\n    return m.stdint_signed\n@mod.capture(rule=\"[<self.c_signed>] <self.c_types> [<self.c_pointers>+]\")\ndef c_cast(m) -> str:\n    \"Returns a string\"",
        "detail": "lang.c.c",
        "documentation": {}
    },
    {
        "label": "stdint_signed",
        "kind": 2,
        "importPath": "lang.c.c",
        "description": "lang.c.c",
        "peekOfCode": "def stdint_signed(m) -> str:\n    \"Returns a string\"\n    return m.stdint_signed\n@mod.capture(rule=\"[<self.c_signed>] <self.c_types> [<self.c_pointers>+]\")\ndef c_cast(m) -> str:\n    \"Returns a string\"\n    return \"(\" + \" \".join(list(m)) + \")\"\n@mod.capture(rule=\"[<self.stdint_signed>] <self.stdint_types> [<self.c_pointers>+]\")\ndef stdint_cast(m) -> str:\n    \"Returns a string\"",
        "detail": "lang.c.c",
        "documentation": {}
    },
    {
        "label": "c_cast",
        "kind": 2,
        "importPath": "lang.c.c",
        "description": "lang.c.c",
        "peekOfCode": "def c_cast(m) -> str:\n    \"Returns a string\"\n    return \"(\" + \" \".join(list(m)) + \")\"\n@mod.capture(rule=\"[<self.stdint_signed>] <self.stdint_types> [<self.c_pointers>+]\")\ndef stdint_cast(m) -> str:\n    \"Returns a string\"\n    return \"(\" + \"\".join(list(m)) + \")\"\n@mod.capture(rule=\"[<self.c_signed>] <self.c_types> [<self.c_pointers>]\")\ndef c_variable(m) -> str:\n    \"Returns a string\"",
        "detail": "lang.c.c",
        "documentation": {}
    },
    {
        "label": "stdint_cast",
        "kind": 2,
        "importPath": "lang.c.c",
        "description": "lang.c.c",
        "peekOfCode": "def stdint_cast(m) -> str:\n    \"Returns a string\"\n    return \"(\" + \"\".join(list(m)) + \")\"\n@mod.capture(rule=\"[<self.c_signed>] <self.c_types> [<self.c_pointers>]\")\ndef c_variable(m) -> str:\n    \"Returns a string\"\n    return \" \".join(list(m))\n@ctx.action_class(\"user\")\nclass UserActions:\n    def code_operator_indirection():",
        "detail": "lang.c.c",
        "documentation": {}
    },
    {
        "label": "c_variable",
        "kind": 2,
        "importPath": "lang.c.c",
        "description": "lang.c.c",
        "peekOfCode": "def c_variable(m) -> str:\n    \"Returns a string\"\n    return \" \".join(list(m))\n@ctx.action_class(\"user\")\nclass UserActions:\n    def code_operator_indirection():\n        actions.auto_insert(\"*\")\n    def code_operator_address_of():\n        actions.auto_insert(\"&\")\n    def code_operator_structure_dereference():",
        "detail": "lang.c.c",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "lang.c.c",
        "description": "lang.c.c",
        "peekOfCode": "mod = Module()\nmod.setting(\n    \"use_stdint_datatypes \",\n    type=int,\n    default=1,\n    desc=\"Use the stdint datatype naming in commands by default\",\n)\nctx = Context()\nctx.matches = r\"\"\"\ntag: user.c",
        "detail": "lang.c.c",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "lang.c.c",
        "description": "lang.c.c",
        "peekOfCode": "ctx = Context()\nctx.matches = r\"\"\"\ntag: user.c\n\"\"\"\nctx.lists[\"self.c_pointers\"] = {\n    \"pointer\": \"*\",\n    \"pointer to pointer\": \"**\",\n}\nctx.lists[\"self.stdint_signed\"] = {\n    \"signed\": \"\",",
        "detail": "lang.c.c",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "lang.c.c",
        "description": "lang.c.c",
        "peekOfCode": "ctx.matches = r\"\"\"\ntag: user.c\n\"\"\"\nctx.lists[\"self.c_pointers\"] = {\n    \"pointer\": \"*\",\n    \"pointer to pointer\": \"**\",\n}\nctx.lists[\"self.stdint_signed\"] = {\n    \"signed\": \"\",\n    \"unsigned\": \"u\",",
        "detail": "lang.c.c",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"self.c_pointers\"]",
        "kind": 5,
        "importPath": "lang.c.c",
        "description": "lang.c.c",
        "peekOfCode": "ctx.lists[\"self.c_pointers\"] = {\n    \"pointer\": \"*\",\n    \"pointer to pointer\": \"**\",\n}\nctx.lists[\"self.stdint_signed\"] = {\n    \"signed\": \"\",\n    \"unsigned\": \"u\",\n}\nctx.lists[\"self.c_signed\"] = {\n    \"signed\": \"signed \",",
        "detail": "lang.c.c",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"self.stdint_signed\"]",
        "kind": 5,
        "importPath": "lang.c.c",
        "description": "lang.c.c",
        "peekOfCode": "ctx.lists[\"self.stdint_signed\"] = {\n    \"signed\": \"\",\n    \"unsigned\": \"u\",\n}\nctx.lists[\"self.c_signed\"] = {\n    \"signed\": \"signed \",\n    \"unsigned\": \"unsigned \",\n}\nctx.lists[\"self.c_keywords\"] = {\n    \"static\": \"static\",",
        "detail": "lang.c.c",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"self.c_signed\"]",
        "kind": 5,
        "importPath": "lang.c.c",
        "description": "lang.c.c",
        "peekOfCode": "ctx.lists[\"self.c_signed\"] = {\n    \"signed\": \"signed \",\n    \"unsigned\": \"unsigned \",\n}\nctx.lists[\"self.c_keywords\"] = {\n    \"static\": \"static\",\n    \"volatile\": \"volatile\",\n    \"register\": \"register\",\n}\nctx.lists[\"self.stdint_types\"] = {",
        "detail": "lang.c.c",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"self.c_keywords\"]",
        "kind": 5,
        "importPath": "lang.c.c",
        "description": "lang.c.c",
        "peekOfCode": "ctx.lists[\"self.c_keywords\"] = {\n    \"static\": \"static\",\n    \"volatile\": \"volatile\",\n    \"register\": \"register\",\n}\nctx.lists[\"self.stdint_types\"] = {\n    \"character\": \"int8_t\",\n    \"char\": \"int8_t\",\n    \"short\": \"int16_t\",\n    \"long\": \"int32_t\",",
        "detail": "lang.c.c",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"self.stdint_types\"]",
        "kind": 5,
        "importPath": "lang.c.c",
        "description": "lang.c.c",
        "peekOfCode": "ctx.lists[\"self.stdint_types\"] = {\n    \"character\": \"int8_t\",\n    \"char\": \"int8_t\",\n    \"short\": \"int16_t\",\n    \"long\": \"int32_t\",\n    \"long long\": \"int64_t\",\n    \"int\": \"int32_t\",\n    \"integer\": \"int32_t\",\n    \"void\": \"void\",\n    \"double\": \"double\",",
        "detail": "lang.c.c",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"self.c_types\"]",
        "kind": 5,
        "importPath": "lang.c.c",
        "description": "lang.c.c",
        "peekOfCode": "ctx.lists[\"self.c_types\"] = {\n    \"character\": \"char\",\n    \"char\": \"char\",\n    \"short\": \"short\",\n    \"long\": \"long\",\n    \"int\": \"int\",\n    \"integer\": \"int\",\n    \"void\": \"void\",\n    \"double\": \"double\",\n    \"struct\": \"struct\",",
        "detail": "lang.c.c",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"user.code_libraries\"]",
        "kind": 5,
        "importPath": "lang.c.c",
        "description": "lang.c.c",
        "peekOfCode": "ctx.lists[\"user.code_libraries\"] = {\n    \"assert\": \"assert.h\",\n    \"type\": \"ctype.h\",\n    \"error\": \"errno.h\",\n    \"float\": \"float.h\",\n    \"limits\": \"limits.h\",\n    \"locale\": \"locale.h\",\n    \"math\": \"math.h\",\n    \"set jump\": \"setjmp.h\",\n    \"signal\": \"signal.h\",",
        "detail": "lang.c.c",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"user.code_common_function\"]",
        "kind": 5,
        "importPath": "lang.c.c",
        "description": "lang.c.c",
        "peekOfCode": "ctx.lists[\"user.code_common_function\"] = {\n    \"mem copy\": \"memcpy\",\n    \"mem set\": \"memset\",\n    \"string cat\": \"strcat\",\n    \"stir cat\": \"strcat\",\n    \"stir en cat\": \"strncat\",\n    \"stir elle cat\": \"strlcat\",\n    \"stir copy\": \"strcpy\",\n    \"stir en copy\": \"strncpy\",\n    \"stir elle copy\": \"strlcpy\",",
        "detail": "lang.c.c",
        "documentation": {}
    },
    {
        "label": "UserActions",
        "kind": 6,
        "importPath": "lang.csharp.csharp",
        "description": "lang.csharp.csharp",
        "peekOfCode": "class UserActions:\n    def code_operator_indirection():\n        actions.auto_insert(\"*\")\n    def code_operator_address_of():\n        actions.auto_insert(\"&\")\n    def code_operator_structure_dereference():\n        actions.auto_insert(\"->\")\n    def code_operator_lambda():\n        actions.auto_insert(\"=>\")\n    def code_operator_subscript():",
        "detail": "lang.csharp.csharp",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "lang.csharp.csharp",
        "description": "lang.csharp.csharp",
        "peekOfCode": "ctx = Context()\nctx.matches = r\"\"\"\ntag: user.csharp\n\"\"\"\nctx.lists[\"user.code_common_function\"] = {\n    \"integer\": \"int.TryParse\",\n    \"print\": \"Console.WriteLine\",\n    \"string\": \".ToString\",\n}\n@ctx.action_class(\"user\")",
        "detail": "lang.csharp.csharp",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "lang.csharp.csharp",
        "description": "lang.csharp.csharp",
        "peekOfCode": "ctx.matches = r\"\"\"\ntag: user.csharp\n\"\"\"\nctx.lists[\"user.code_common_function\"] = {\n    \"integer\": \"int.TryParse\",\n    \"print\": \"Console.WriteLine\",\n    \"string\": \".ToString\",\n}\n@ctx.action_class(\"user\")\nclass UserActions:",
        "detail": "lang.csharp.csharp",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"user.code_common_function\"]",
        "kind": 5,
        "importPath": "lang.csharp.csharp",
        "description": "lang.csharp.csharp",
        "peekOfCode": "ctx.lists[\"user.code_common_function\"] = {\n    \"integer\": \"int.TryParse\",\n    \"print\": \"Console.WriteLine\",\n    \"string\": \".ToString\",\n}\n@ctx.action_class(\"user\")\nclass UserActions:\n    def code_operator_indirection():\n        actions.auto_insert(\"*\")\n    def code_operator_address_of():",
        "detail": "lang.csharp.csharp",
        "documentation": {}
    },
    {
        "label": "UserActions",
        "kind": 6,
        "importPath": "lang.css.css",
        "description": "lang.css.css",
        "peekOfCode": "class UserActions:\n    def code_block():\n        actions.user.insert_between(\"{\", \"}\")\n        actions.key(\"enter\")\n    def code_operator_addition():\n        actions.insert(\" + \")\n    def code_operator_subtraction():\n        actions.insert(\" - \")\n    def code_operator_multiplication():\n        actions.insert(\" * \")",
        "detail": "lang.css.css",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "lang.css.css",
        "description": "lang.css.css",
        "peekOfCode": "mod = Module()\nglobal_ctx = Context()\nctx = Context()\nctx.matches = \"\"\"\ntag: user.css\n\"\"\"\nmod.list(\"css_at_rule\", desc=\"List of CSS @rules\")\nmod.list(\"css_unit\", desc=\"List of CSS units\")\nmod.list(\"css_global_value\", desc=\"CSS-wide values\")\nglobal_ctx.lists[\"self.css_unit\"] = {",
        "detail": "lang.css.css",
        "documentation": {}
    },
    {
        "label": "global_ctx",
        "kind": 5,
        "importPath": "lang.css.css",
        "description": "lang.css.css",
        "peekOfCode": "global_ctx = Context()\nctx = Context()\nctx.matches = \"\"\"\ntag: user.css\n\"\"\"\nmod.list(\"css_at_rule\", desc=\"List of CSS @rules\")\nmod.list(\"css_unit\", desc=\"List of CSS units\")\nmod.list(\"css_global_value\", desc=\"CSS-wide values\")\nglobal_ctx.lists[\"self.css_unit\"] = {\n    # distance (length)",
        "detail": "lang.css.css",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "lang.css.css",
        "description": "lang.css.css",
        "peekOfCode": "ctx = Context()\nctx.matches = \"\"\"\ntag: user.css\n\"\"\"\nmod.list(\"css_at_rule\", desc=\"List of CSS @rules\")\nmod.list(\"css_unit\", desc=\"List of CSS units\")\nmod.list(\"css_global_value\", desc=\"CSS-wide values\")\nglobal_ctx.lists[\"self.css_unit\"] = {\n    # distance (length)\n    \"char\": \"ch\",",
        "detail": "lang.css.css",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "lang.css.css",
        "description": "lang.css.css",
        "peekOfCode": "ctx.matches = \"\"\"\ntag: user.css\n\"\"\"\nmod.list(\"css_at_rule\", desc=\"List of CSS @rules\")\nmod.list(\"css_unit\", desc=\"List of CSS units\")\nmod.list(\"css_global_value\", desc=\"CSS-wide values\")\nglobal_ctx.lists[\"self.css_unit\"] = {\n    # distance (length)\n    \"char\": \"ch\",\n    \"em\": \"em\",",
        "detail": "lang.css.css",
        "documentation": {}
    },
    {
        "label": "global_ctx.lists[\"self.css_unit\"]",
        "kind": 5,
        "importPath": "lang.css.css",
        "description": "lang.css.css",
        "peekOfCode": "global_ctx.lists[\"self.css_unit\"] = {\n    # distance (length)\n    \"char\": \"ch\",\n    \"em\": \"em\",\n    \"rem\": \"rem\",\n    \"pixels\": \"px\",\n    \"points\": \"pt\",\n    \"view height\": \"vh\",\n    \"view width\": \"vw\",\n    # angle",
        "detail": "lang.css.css",
        "documentation": {}
    },
    {
        "label": "global_ctx.lists[\"self.css_at_rule\"]",
        "kind": 5,
        "importPath": "lang.css.css",
        "description": "lang.css.css",
        "peekOfCode": "global_ctx.lists[\"self.css_at_rule\"] = [\n    # regular\n    \"charset\",\n    \"import\",\n    \"namespace\",\n    # conditional group\n    \"media\",\n    \"supports\",\n    # other nested\n    \"page\",",
        "detail": "lang.css.css",
        "documentation": {}
    },
    {
        "label": "global_ctx.lists[\"self.css_global_value\"]",
        "kind": 5,
        "importPath": "lang.css.css",
        "description": "lang.css.css",
        "peekOfCode": "global_ctx.lists[\"self.css_global_value\"] = [\"initial\", \"inherit\", \"unset\", \"revert\"]\nctx.lists[\"user.code_common_function\"] = {\n    # reference\n    \"attribute\": \"attr\",\n    \"env\": \"env\",\n    \"url\": \"url\",\n    \"var\": \"var\",\n    \"variable\": \"var\",\n    # mathematical\n    \"calc\": \"calc\",",
        "detail": "lang.css.css",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"user.code_common_function\"]",
        "kind": 5,
        "importPath": "lang.css.css",
        "description": "lang.css.css",
        "peekOfCode": "ctx.lists[\"user.code_common_function\"] = {\n    # reference\n    \"attribute\": \"attr\",\n    \"env\": \"env\",\n    \"url\": \"url\",\n    \"var\": \"var\",\n    \"variable\": \"var\",\n    # mathematical\n    \"calc\": \"calc\",\n    \"calculate\": \"calc\",",
        "detail": "lang.css.css",
        "documentation": {}
    },
    {
        "label": "UserActions",
        "kind": 6,
        "importPath": "lang.java.java",
        "description": "lang.java.java",
        "peekOfCode": "class UserActions:\n    def code_operator_lambda():\n        actions.insert(\" -> \")\n    def code_operator_subscript():\n        actions.user.insert_between(\"[\", \"]\")\n    def code_operator_assignment():\n        actions.insert(\" = \")\n    def code_operator_subtraction():\n        actions.insert(\" - \")\n    def code_operator_subtraction_assignment():",
        "detail": "lang.java.java",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "lang.java.java",
        "description": "lang.java.java",
        "peekOfCode": "ctx = Context()\nmod = Module()\nctx.matches = r\"\"\"\ntag: user.java\n\"\"\"\n# Primitive Types\njava_primitive_types = {\n    \"boolean\": \"boolean\",\n    \"int\": \"int\",\n    \"float\": \"float\",",
        "detail": "lang.java.java",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "lang.java.java",
        "description": "lang.java.java",
        "peekOfCode": "mod = Module()\nctx.matches = r\"\"\"\ntag: user.java\n\"\"\"\n# Primitive Types\njava_primitive_types = {\n    \"boolean\": \"boolean\",\n    \"int\": \"int\",\n    \"float\": \"float\",\n    \"byte\": \"byte\",",
        "detail": "lang.java.java",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "lang.java.java",
        "description": "lang.java.java",
        "peekOfCode": "ctx.matches = r\"\"\"\ntag: user.java\n\"\"\"\n# Primitive Types\njava_primitive_types = {\n    \"boolean\": \"boolean\",\n    \"int\": \"int\",\n    \"float\": \"float\",\n    \"byte\": \"byte\",\n    \"double\": \"double\",",
        "detail": "lang.java.java",
        "documentation": {}
    },
    {
        "label": "java_primitive_types",
        "kind": 5,
        "importPath": "lang.java.java",
        "description": "lang.java.java",
        "peekOfCode": "java_primitive_types = {\n    \"boolean\": \"boolean\",\n    \"int\": \"int\",\n    \"float\": \"float\",\n    \"byte\": \"byte\",\n    \"double\": \"double\",\n    \"short\": \"short\",\n    \"long\": \"long\",\n    \"char\": \"char\",\n    \"void\": \"void\",",
        "detail": "lang.java.java",
        "documentation": {}
    },
    {
        "label": "java_boxed_types",
        "kind": 5,
        "importPath": "lang.java.java",
        "description": "lang.java.java",
        "peekOfCode": "java_boxed_types = {\n    \"Byte\": \"Byte\",\n    \"Integer\": \"Integer\",\n    \"Double\": \"Double\",\n    \"Short\": \"Short\",\n    \"Float\": \"Float\",\n    \"Long\": \"Long\",\n    \"Boolean\": \"Boolean\",\n    \"Character\": \"Character\",\n    \"Void\": \"Void\",",
        "detail": "lang.java.java",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"self.java_boxed_type\"]",
        "kind": 5,
        "importPath": "lang.java.java",
        "description": "lang.java.java",
        "peekOfCode": "ctx.lists[\"self.java_boxed_type\"] = java_boxed_types\n# Common Classes\njava_common_classes = {\n    \"Object\": \"Object\",\n    \"string\": \"String\",\n    \"thread\": \"Thread\",\n    \"exception\": \"Exception\",\n}\nmod.list(\"java_common_class\", desc=\"Java Common Classes\")\nctx.lists[\"self.java_common_class\"] = java_common_classes",
        "detail": "lang.java.java",
        "documentation": {}
    },
    {
        "label": "java_common_classes",
        "kind": 5,
        "importPath": "lang.java.java",
        "description": "lang.java.java",
        "peekOfCode": "java_common_classes = {\n    \"Object\": \"Object\",\n    \"string\": \"String\",\n    \"thread\": \"Thread\",\n    \"exception\": \"Exception\",\n}\nmod.list(\"java_common_class\", desc=\"Java Common Classes\")\nctx.lists[\"self.java_common_class\"] = java_common_classes\n# Java Generic Data Structures\njava_generic_data_structures = {",
        "detail": "lang.java.java",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"self.java_common_class\"]",
        "kind": 5,
        "importPath": "lang.java.java",
        "description": "lang.java.java",
        "peekOfCode": "ctx.lists[\"self.java_common_class\"] = java_common_classes\n# Java Generic Data Structures\njava_generic_data_structures = {\n    # Interfaces\n    \"set\": \"Set\",\n    \"list\": \"List\",\n    \"queue\": \"Queue\",\n    \"deque\": \"Deque\",\n    \"map\": \"Map\",\n    # Classes",
        "detail": "lang.java.java",
        "documentation": {}
    },
    {
        "label": "java_generic_data_structures",
        "kind": 5,
        "importPath": "lang.java.java",
        "description": "lang.java.java",
        "peekOfCode": "java_generic_data_structures = {\n    # Interfaces\n    \"set\": \"Set\",\n    \"list\": \"List\",\n    \"queue\": \"Queue\",\n    \"deque\": \"Deque\",\n    \"map\": \"Map\",\n    # Classes\n    \"hash set\": \"HashSet\",\n    \"array list\": \"ArrayList\",",
        "detail": "lang.java.java",
        "documentation": {}
    },
    {
        "label": "unboxed_types",
        "kind": 5,
        "importPath": "lang.java.java",
        "description": "lang.java.java",
        "peekOfCode": "unboxed_types = java_primitive_types.copy()\nunboxed_types.update(java_common_classes)\nunboxed_types.update(java_generic_data_structures)\nctx.lists[\"user.code_type\"] = unboxed_types\nmod.list(\"java_generic_data_structure\", desc=\"Java Generic Data Structures\")\nctx.lists[\"self.java_generic_data_structure\"] = java_generic_data_structures\n# Java Modifies\njava_modifiers = {\n    \"public\": \"public\",\n    \"private\": \"private\",",
        "detail": "lang.java.java",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"user.code_type\"]",
        "kind": 5,
        "importPath": "lang.java.java",
        "description": "lang.java.java",
        "peekOfCode": "ctx.lists[\"user.code_type\"] = unboxed_types\nmod.list(\"java_generic_data_structure\", desc=\"Java Generic Data Structures\")\nctx.lists[\"self.java_generic_data_structure\"] = java_generic_data_structures\n# Java Modifies\njava_modifiers = {\n    \"public\": \"public\",\n    \"private\": \"private\",\n    \"protected\": \"protected\",\n    \"static\": \"static\",\n    \"synchronized\": \"synchronized\",",
        "detail": "lang.java.java",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"self.java_generic_data_structure\"]",
        "kind": 5,
        "importPath": "lang.java.java",
        "description": "lang.java.java",
        "peekOfCode": "ctx.lists[\"self.java_generic_data_structure\"] = java_generic_data_structures\n# Java Modifies\njava_modifiers = {\n    \"public\": \"public\",\n    \"private\": \"private\",\n    \"protected\": \"protected\",\n    \"static\": \"static\",\n    \"synchronized\": \"synchronized\",\n    \"volatile\": \"volatile\",\n    \"transient\": \"transient\",",
        "detail": "lang.java.java",
        "documentation": {}
    },
    {
        "label": "java_modifiers",
        "kind": 5,
        "importPath": "lang.java.java",
        "description": "lang.java.java",
        "peekOfCode": "java_modifiers = {\n    \"public\": \"public\",\n    \"private\": \"private\",\n    \"protected\": \"protected\",\n    \"static\": \"static\",\n    \"synchronized\": \"synchronized\",\n    \"volatile\": \"volatile\",\n    \"transient\": \"transient\",\n    \"abstract\": \"abstract\",\n    \"interface\": \"interface\",",
        "detail": "lang.java.java",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"self.java_modifier\"]",
        "kind": 5,
        "importPath": "lang.java.java",
        "description": "lang.java.java",
        "peekOfCode": "ctx.lists[\"self.java_modifier\"] = java_modifiers\n@ctx.action_class(\"user\")\nclass UserActions:\n    def code_operator_lambda():\n        actions.insert(\" -> \")\n    def code_operator_subscript():\n        actions.user.insert_between(\"[\", \"]\")\n    def code_operator_assignment():\n        actions.insert(\" = \")\n    def code_operator_subtraction():",
        "detail": "lang.java.java",
        "documentation": {}
    },
    {
        "label": "UserActions",
        "kind": 6,
        "importPath": "lang.javascript.javascript",
        "description": "lang.javascript.javascript",
        "peekOfCode": "class UserActions:\n    def code_insert_is_not_null():\n        actions.auto_insert(\" !== null\")\n    def code_insert_is_null():\n        actions.auto_insert(\" === null\")\n    def code_state_if():\n        actions.user.insert_between(\"if (\", \")\")\n    def code_state_else_if():\n        actions.user.insert_between(\" else if (\", \")\")\n    def code_state_else():",
        "detail": "lang.javascript.javascript",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "lang.javascript.javascript",
        "description": "lang.javascript.javascript",
        "peekOfCode": "mod = Module()\nctx = Context()\nctx.matches = \"\"\"\ntag: user.javascript\n\"\"\"\nctx.lists[\"user.code_common_function\"] = {\n    \"abs\": \"Math.abs\",\n    \"entries\": \"Object.entries\",\n    \"fetch\": \"fetch\",\n    \"floor\": \"Math.floor\",",
        "detail": "lang.javascript.javascript",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "lang.javascript.javascript",
        "description": "lang.javascript.javascript",
        "peekOfCode": "ctx = Context()\nctx.matches = \"\"\"\ntag: user.javascript\n\"\"\"\nctx.lists[\"user.code_common_function\"] = {\n    \"abs\": \"Math.abs\",\n    \"entries\": \"Object.entries\",\n    \"fetch\": \"fetch\",\n    \"floor\": \"Math.floor\",\n    \"from entries\": \"Object.fromEntries\",",
        "detail": "lang.javascript.javascript",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "lang.javascript.javascript",
        "description": "lang.javascript.javascript",
        "peekOfCode": "ctx.matches = \"\"\"\ntag: user.javascript\n\"\"\"\nctx.lists[\"user.code_common_function\"] = {\n    \"abs\": \"Math.abs\",\n    \"entries\": \"Object.entries\",\n    \"fetch\": \"fetch\",\n    \"floor\": \"Math.floor\",\n    \"from entries\": \"Object.fromEntries\",\n    \"keys\": \"Object.keys\",",
        "detail": "lang.javascript.javascript",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"user.code_common_function\"]",
        "kind": 5,
        "importPath": "lang.javascript.javascript",
        "description": "lang.javascript.javascript",
        "peekOfCode": "ctx.lists[\"user.code_common_function\"] = {\n    \"abs\": \"Math.abs\",\n    \"entries\": \"Object.entries\",\n    \"fetch\": \"fetch\",\n    \"floor\": \"Math.floor\",\n    \"from entries\": \"Object.fromEntries\",\n    \"keys\": \"Object.keys\",\n    \"log\": \"console.log\",\n    \"max\": \"Math.max\",\n    \"min\": \"Math.min\",",
        "detail": "lang.javascript.javascript",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"user.code_common_member_function\"]",
        "kind": 5,
        "importPath": "lang.javascript.javascript",
        "description": "lang.javascript.javascript",
        "peekOfCode": "ctx.lists[\"user.code_common_member_function\"] = {\n    \"catch\": \"catch\",\n    \"concat\": \"concat\",\n    \"filter\": \"filter\",\n    \"finally\": \"finally\",\n    \"find\": \"find\",\n    \"flat map\": \"flatMap\",\n    \"for each\": \"forEach\",\n    \"join\": \"join\",\n    \"includes\": \"includes\",",
        "detail": "lang.javascript.javascript",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"user.code_keyword\"]",
        "kind": 5,
        "importPath": "lang.javascript.javascript",
        "description": "lang.javascript.javascript",
        "peekOfCode": "ctx.lists[\"user.code_keyword\"] = {\n    \"a sink\": \"async \",\n    \"await\": \"await \",\n    \"break\": \"break\",\n    \"class\": \"class \",\n    \"const\": \"const \",\n    \"continue\": \"continue\",\n    \"default\": \"default \",\n    \"export\": \"export \",\n    \"false\": \"false\",",
        "detail": "lang.javascript.javascript",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "lang.markdown.markdown",
        "description": "lang.markdown.markdown",
        "peekOfCode": "mod = Module()\nctx = Context()\nmod.list(\"markdown_code_block_language\", desc=\"Languages for code blocks\")\nctx.lists[\"user.markdown_code_block_language\"] = {\n    \"typescript\": \"typescript\",\n    \"python\": \"python\",\n    \"code\": \"\",\n}",
        "detail": "lang.markdown.markdown",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "lang.markdown.markdown",
        "description": "lang.markdown.markdown",
        "peekOfCode": "ctx = Context()\nmod.list(\"markdown_code_block_language\", desc=\"Languages for code blocks\")\nctx.lists[\"user.markdown_code_block_language\"] = {\n    \"typescript\": \"typescript\",\n    \"python\": \"python\",\n    \"code\": \"\",\n}",
        "detail": "lang.markdown.markdown",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"user.markdown_code_block_language\"]",
        "kind": 5,
        "importPath": "lang.markdown.markdown",
        "description": "lang.markdown.markdown",
        "peekOfCode": "ctx.lists[\"user.markdown_code_block_language\"] = {\n    \"typescript\": \"typescript\",\n    \"python\": \"python\",\n    \"code\": \"\",\n}",
        "detail": "lang.markdown.markdown",
        "documentation": {}
    },
    {
        "label": "UserActions",
        "kind": 6,
        "importPath": "lang.php.php",
        "description": "lang.php.php",
        "peekOfCode": "class UserActions:\n    def code_self():\n        actions.auto_insert(\"$this\")\n    def code_operator_object_accessor():\n        actions.auto_insert(\"->\")\n    def code_define_class():\n        actions.auto_insert(\"class \")\n    def code_block():\n        actions.insert(\"{}\")\n        actions.edit.left()",
        "detail": "lang.php.php",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "lang.php.php",
        "description": "lang.php.php",
        "peekOfCode": "ctx = Context()\nctx.matches = r\"\"\"\ntag: user.php\n\"\"\"\nctx.lists[\"user.code_type\"] = {\n    \"int\": \"int\",\n    \"float\": \"float\",\n    \"string\": \"string\",\n    \"bool\": \"bool\",\n    \"array\": \"array\",",
        "detail": "lang.php.php",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "lang.php.php",
        "description": "lang.php.php",
        "peekOfCode": "ctx.matches = r\"\"\"\ntag: user.php\n\"\"\"\nctx.lists[\"user.code_type\"] = {\n    \"int\": \"int\",\n    \"float\": \"float\",\n    \"string\": \"string\",\n    \"bool\": \"bool\",\n    \"array\": \"array\",\n    \"null\": \"null\",",
        "detail": "lang.php.php",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"user.code_type\"]",
        "kind": 5,
        "importPath": "lang.php.php",
        "description": "lang.php.php",
        "peekOfCode": "ctx.lists[\"user.code_type\"] = {\n    \"int\": \"int\",\n    \"float\": \"float\",\n    \"string\": \"string\",\n    \"bool\": \"bool\",\n    \"array\": \"array\",\n    \"null\": \"null\",\n    \"void\": \"void\",\n}\n@ctx.action_class(\"user\")",
        "detail": "lang.php.php",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "lang.proto.proto",
        "description": "lang.proto.proto",
        "peekOfCode": "mod = Module()\nctx = Context()\nctx.matches = r\"\"\"\ntag: user.protobuf\n\"\"\"\nctx.lists[\"user.code_type\"] = {\n    \"string\": \"string\",\n    \"bytes\": \"bytes\",\n    \"you sixty four\": \"uint64\",\n    \"you thirty two\": \"uint32\",",
        "detail": "lang.proto.proto",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "lang.proto.proto",
        "description": "lang.proto.proto",
        "peekOfCode": "ctx = Context()\nctx.matches = r\"\"\"\ntag: user.protobuf\n\"\"\"\nctx.lists[\"user.code_type\"] = {\n    \"string\": \"string\",\n    \"bytes\": \"bytes\",\n    \"you sixty four\": \"uint64\",\n    \"you thirty two\": \"uint32\",\n    \"eye sixty four\": \"int64\",",
        "detail": "lang.proto.proto",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "lang.proto.proto",
        "description": "lang.proto.proto",
        "peekOfCode": "ctx.matches = r\"\"\"\ntag: user.protobuf\n\"\"\"\nctx.lists[\"user.code_type\"] = {\n    \"string\": \"string\",\n    \"bytes\": \"bytes\",\n    \"you sixty four\": \"uint64\",\n    \"you thirty two\": \"uint32\",\n    \"eye sixty four\": \"int64\",\n    \"eye thirty two\": \"int32\",",
        "detail": "lang.proto.proto",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"user.code_type\"]",
        "kind": 5,
        "importPath": "lang.proto.proto",
        "description": "lang.proto.proto",
        "peekOfCode": "ctx.lists[\"user.code_type\"] = {\n    \"string\": \"string\",\n    \"bytes\": \"bytes\",\n    \"you sixty four\": \"uint64\",\n    \"you thirty two\": \"uint32\",\n    \"eye sixty four\": \"int64\",\n    \"eye thirty two\": \"int32\",\n    \"sin sixty four\": \"sint64\",\n    \"sin thirty two\": \"sint32\",\n    \"fixed sixty four\": \"fixed64\",",
        "detail": "lang.proto.proto",
        "documentation": {}
    },
    {
        "label": "UserActions",
        "kind": 6,
        "importPath": "lang.python.python",
        "description": "lang.python.python",
        "peekOfCode": "class UserActions:\n    def code_operator_lambda():\n        actions.user.insert_between(\"lambda \", \": \")\n    def code_operator_subscript():\n        actions.user.insert_between(\"[\", \"]\")\n    def code_operator_assignment():\n        actions.auto_insert(\" = \")\n    def code_operator_subtraction():\n        actions.auto_insert(\" - \")\n    def code_operator_subtraction_assignment():",
        "detail": "lang.python.python",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "lang.python.python",
        "description": "lang.python.python",
        "peekOfCode": "mod = Module()\nctx = Context()\nctx.matches = r\"\"\"\ntag: user.python\n\"\"\"\nctx.lists[\"user.code_common_function\"] = {\n    \"enumerate\": \"enumerate\",\n    \"integer\": \"int\",\n    \"length\": \"len\",\n    \"list\": \"list\",",
        "detail": "lang.python.python",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "lang.python.python",
        "description": "lang.python.python",
        "peekOfCode": "ctx = Context()\nctx.matches = r\"\"\"\ntag: user.python\n\"\"\"\nctx.lists[\"user.code_common_function\"] = {\n    \"enumerate\": \"enumerate\",\n    \"integer\": \"int\",\n    \"length\": \"len\",\n    \"list\": \"list\",\n    \"print\": \"print\",",
        "detail": "lang.python.python",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "lang.python.python",
        "description": "lang.python.python",
        "peekOfCode": "ctx.matches = r\"\"\"\ntag: user.python\n\"\"\"\nctx.lists[\"user.code_common_function\"] = {\n    \"enumerate\": \"enumerate\",\n    \"integer\": \"int\",\n    \"length\": \"len\",\n    \"list\": \"list\",\n    \"print\": \"print\",\n    \"range\": \"range\",",
        "detail": "lang.python.python",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"user.code_common_function\"]",
        "kind": 5,
        "importPath": "lang.python.python",
        "description": "lang.python.python",
        "peekOfCode": "ctx.lists[\"user.code_common_function\"] = {\n    \"enumerate\": \"enumerate\",\n    \"integer\": \"int\",\n    \"length\": \"len\",\n    \"list\": \"list\",\n    \"print\": \"print\",\n    \"range\": \"range\",\n    \"set\": \"set\",\n    \"split\": \"split\",\n    \"string\": \"str\",",
        "detail": "lang.python.python",
        "documentation": {}
    },
    {
        "label": "docstring_fields",
        "kind": 5,
        "importPath": "lang.python.python",
        "description": "lang.python.python",
        "peekOfCode": "docstring_fields = {\n    \"class\": \":class:\",\n    \"function\": \":func:\",\n    \"parameter\": \":param:\",\n    \"raise\": \":raise:\",\n    \"returns\": \":return:\",\n    \"type\": \":type:\",\n    \"return type\": \":rtype:\",\n    # these are sphinx-specific\n    \"see also\": \".. seealso:: \",",
        "detail": "lang.python.python",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"user.python_docstring_fields\"]",
        "kind": 5,
        "importPath": "lang.python.python",
        "description": "lang.python.python",
        "peekOfCode": "ctx.lists[\"user.python_docstring_fields\"] = docstring_fields\nctx.lists[\"user.code_type\"] = {\n    \"boolean\": \"bool\",\n    \"integer\": \"int\",\n    \"string\": \"str\",\n    \"none\": \"None\",\n    \"dick\": \"Dict\",\n    \"float\": \"float\",\n    \"any\": \"Any\",\n    \"tuple\": \"Tuple\",",
        "detail": "lang.python.python",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"user.code_type\"]",
        "kind": 5,
        "importPath": "lang.python.python",
        "description": "lang.python.python",
        "peekOfCode": "ctx.lists[\"user.code_type\"] = {\n    \"boolean\": \"bool\",\n    \"integer\": \"int\",\n    \"string\": \"str\",\n    \"none\": \"None\",\n    \"dick\": \"Dict\",\n    \"float\": \"float\",\n    \"any\": \"Any\",\n    \"tuple\": \"Tuple\",\n    \"union\": \"UnionAny\",",
        "detail": "lang.python.python",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"user.code_keyword\"]",
        "kind": 5,
        "importPath": "lang.python.python",
        "description": "lang.python.python",
        "peekOfCode": "ctx.lists[\"user.code_keyword\"] = {\n    \"break\": \"break\",\n    \"continue\": \"continue\",\n    \"class\": \"class \",\n    \"return\": \"return \",\n    \"import\": \"import \",\n    \"null\": \"None\",\n    \"none\": \"None\",\n    \"true\": \"True\",\n    \"false\": \"False\",",
        "detail": "lang.python.python",
        "documentation": {}
    },
    {
        "label": "exception_list",
        "kind": 5,
        "importPath": "lang.python.python",
        "description": "lang.python.python",
        "peekOfCode": "exception_list = [\n    \"BaseException\",\n    \"SystemExit\",\n    \"KeyboardInterrupt\",\n    \"GeneratorExit\",\n    \"Exception\",\n    \"StopIteration\",\n    \"StopAsyncIteration\",\n    \"ArithmeticError\",\n    \"FloatingPointError\",",
        "detail": "lang.python.python",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"user.python_exception\"]",
        "kind": 5,
        "importPath": "lang.python.python",
        "description": "lang.python.python",
        "peekOfCode": "ctx.lists[\"user.python_exception\"] = {\n    \" \".join(re.findall(\"[A-Z][^A-Z]*\", exception)).lower(): exception\n    for exception in exception_list\n}\n@ctx.action_class(\"user\")\nclass UserActions:\n    def code_operator_lambda():\n        actions.user.insert_between(\"lambda \", \": \")\n    def code_operator_subscript():\n        actions.user.insert_between(\"[\", \"]\")",
        "detail": "lang.python.python",
        "documentation": {}
    },
    {
        "label": "UserActions",
        "kind": 6,
        "importPath": "lang.r.r",
        "description": "lang.r.r",
        "peekOfCode": "class UserActions:\n    def code_operator_assignment():\n        actions.auto_insert(\" <- \")\n    def code_operator_subtraction():\n        actions.auto_insert(\" - \")\n    def code_operator_addition():\n        actions.auto_insert(\" + \")\n    def code_operator_multiplication():\n        actions.auto_insert(\" * \")\n    def code_operator_exponent():",
        "detail": "lang.r.r",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "lang.r.r",
        "description": "lang.r.r",
        "peekOfCode": "ctx = Context()\nctx.matches = r\"\"\"\ntag: user.r\n\"\"\"\nctx.lists[\"user.code_common_function\"] = {\n    # base R\n    \"as character\": \"as.character\",\n    \"as data frame\": \"as.data.frame\",\n    \"as date\": \"as.Date\",\n    \"as double\": \"as.double\",",
        "detail": "lang.r.r",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "lang.r.r",
        "description": "lang.r.r",
        "peekOfCode": "ctx.matches = r\"\"\"\ntag: user.r\n\"\"\"\nctx.lists[\"user.code_common_function\"] = {\n    # base R\n    \"as character\": \"as.character\",\n    \"as data frame\": \"as.data.frame\",\n    \"as date\": \"as.Date\",\n    \"as double\": \"as.double\",\n    \"as factor\": \"as.factor\",",
        "detail": "lang.r.r",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"user.code_common_function\"]",
        "kind": 5,
        "importPath": "lang.r.r",
        "description": "lang.r.r",
        "peekOfCode": "ctx.lists[\"user.code_common_function\"] = {\n    # base R\n    \"as character\": \"as.character\",\n    \"as data frame\": \"as.data.frame\",\n    \"as date\": \"as.Date\",\n    \"as double\": \"as.double\",\n    \"as factor\": \"as.factor\",\n    \"as integer\": \"as.integer\",\n    \"as numeric\": \"as.numeric\",\n    \"base read RDS\": \"readRDS\",",
        "detail": "lang.r.r",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"user.code_libraries\"]",
        "kind": 5,
        "importPath": "lang.r.r",
        "description": "lang.r.r",
        "peekOfCode": "ctx.lists[\"user.code_libraries\"] = {\n    \"bayes plot\": \"bayesplot\",\n    \"BRMS\": \"brms\",\n    \"cable\": \"kable\",\n    \"car\": \"car\",\n    \"D plier\": \"dplyr\",\n    \"dev tools\": \"devtools\",\n    \"future\": \"future\",\n    \"furr\": \"furrr\",\n    \"gap minder\": \"gapminder\",",
        "detail": "lang.r.r",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"user.code_parameter_name\"]",
        "kind": 5,
        "importPath": "lang.r.r",
        "description": "lang.r.r",
        "peekOfCode": "ctx.lists[\"user.code_parameter_name\"] = {\n    \"alpha\": \"alpha\",\n    \"breaks\": \"breaks\",\n    \"colour\": \"colour\",\n    \"data\": \"data\",\n    \"fill\": \"fill\",\n    \"H just\": \"hjust\",\n    \"keep\": \".keep\",\n    \"label\": \"label\",\n    \"labels\": \"labels\",",
        "detail": "lang.r.r",
        "documentation": {}
    },
    {
        "label": "UserActions",
        "kind": 6,
        "importPath": "lang.ruby.ruby",
        "description": "lang.ruby.ruby",
        "peekOfCode": "class UserActions:\n    def code_operator_lambda():\n        actions.auto_insert(\"->\")\n    def code_operator_subscript():\n        actions.insert(\"[]\")\n        actions.key(\"left\")\n    def code_operator_assignment():\n        actions.auto_insert(\" = \")\n    def code_operator_subtraction():\n        actions.auto_insert(\" - \")",
        "detail": "lang.ruby.ruby",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "lang.ruby.ruby",
        "description": "lang.ruby.ruby",
        "peekOfCode": "ctx = Context()\nctx.matches = r\"\"\"\ntag: user.ruby\n\"\"\"\n@ctx.action_class(\"user\")\nclass UserActions:\n    def code_operator_lambda():\n        actions.auto_insert(\"->\")\n    def code_operator_subscript():\n        actions.insert(\"[]\")",
        "detail": "lang.ruby.ruby",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "lang.ruby.ruby",
        "description": "lang.ruby.ruby",
        "peekOfCode": "ctx.matches = r\"\"\"\ntag: user.ruby\n\"\"\"\n@ctx.action_class(\"user\")\nclass UserActions:\n    def code_operator_lambda():\n        actions.auto_insert(\"->\")\n    def code_operator_subscript():\n        actions.insert(\"[]\")\n        actions.key(\"left\")",
        "detail": "lang.ruby.ruby",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "lang.rust.rust",
        "description": "lang.rust.rust",
        "peekOfCode": "class Actions:\n    def code_state_implements():\n        \"\"\"Inserts implements block, positioning the cursor appropriately\"\"\"\n    def code_insert_if_let_some():\n        \"\"\"Inserts if let some block, positioning the cursor appropriately\"\"\"\n    def code_insert_if_let_error():\n        \"\"\"Inserts if let error block, positioning the cursor appropriately\"\"\"\n    def code_insert_trait_annotation(type: str):\n        \"\"\"Inserts type annotation for implementor of trait\"\"\"\n    def code_insert_return_trait(type: str):",
        "detail": "lang.rust.rust",
        "documentation": {}
    },
    {
        "label": "UserActions",
        "kind": 6,
        "importPath": "lang.rust.rust",
        "description": "lang.rust.rust",
        "peekOfCode": "class UserActions:\n    # tag: comment_line\n    def code_comment_line_prefix():\n        actions.auto_insert(\"// \")\n    # tag: comment_documentation\n    def code_comment_documentation():\n        actions.auto_insert(\"/// \")\n    # tag: imperative\n    def code_block():\n        actions.auto_insert(\"{}\")",
        "detail": "lang.rust.rust",
        "documentation": {}
    },
    {
        "label": "code_type",
        "kind": 2,
        "importPath": "lang.rust.rust",
        "description": "lang.rust.rust",
        "peekOfCode": "def code_type(m) -> str:\n    \"\"\"Returns a macro name\"\"\"\n    return \"\".join(m)\nctx.lists[\"user.code_macros\"] = all_macros\nctx.lists[\"user.code_trait\"] = all_traits\n@ctx.action_class(\"user\")\nclass UserActions:\n    # tag: comment_line\n    def code_comment_line_prefix():\n        actions.auto_insert(\"// \")",
        "detail": "lang.rust.rust",
        "documentation": {}
    },
    {
        "label": "code_insert_function_or_macro",
        "kind": 2,
        "importPath": "lang.rust.rust",
        "description": "lang.rust.rust",
        "peekOfCode": "def code_insert_function_or_macro(\n    text: str,\n    selection: str,\n    left_delim: str,\n    right_delim: str,\n):\n    if selection:\n        out_text = text + f\"{left_delim}{selection}{right_delim}\"\n    else:\n        out_text = text + f\"{left_delim}{right_delim}\"",
        "detail": "lang.rust.rust",
        "documentation": {}
    },
    {
        "label": "repeat_call",
        "kind": 2,
        "importPath": "lang.rust.rust",
        "description": "lang.rust.rust",
        "peekOfCode": "def repeat_call(n: int, f: Callable[..., RT], *args: Any, **kwargs: Any):\n    for i in range(n):\n        f(*args, **kwargs)",
        "detail": "lang.rust.rust",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "lang.rust.rust",
        "description": "lang.rust.rust",
        "peekOfCode": "mod = Module()\n# rust specific grammar\nmod.list(\"code_type_modifier\", desc=\"List of type modifiers for active language\")\nmod.list(\"code_macros\", desc=\"List of macros for active language\")\nmod.list(\"code_trait\", desc=\"List of traits for active language\")\n@mod.action_class\nclass Actions:\n    def code_state_implements():\n        \"\"\"Inserts implements block, positioning the cursor appropriately\"\"\"\n    def code_insert_if_let_some():",
        "detail": "lang.rust.rust",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "lang.rust.rust",
        "description": "lang.rust.rust",
        "peekOfCode": "ctx = Context()\nctx.matches = r\"\"\"\ntag: user.rust\n\"\"\"\nscalar_types = {\n    \"eye eight\": \"i8\",\n    \"you eight\": \"u8\",\n    \"bytes\": \"u8\",\n    \"eye sixteen\": \"i16\",\n    \"you sixteen\": \"u16\",",
        "detail": "lang.rust.rust",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "lang.rust.rust",
        "description": "lang.rust.rust",
        "peekOfCode": "ctx.matches = r\"\"\"\ntag: user.rust\n\"\"\"\nscalar_types = {\n    \"eye eight\": \"i8\",\n    \"you eight\": \"u8\",\n    \"bytes\": \"u8\",\n    \"eye sixteen\": \"i16\",\n    \"you sixteen\": \"u16\",\n    \"eye thirty two\": \"i32\",",
        "detail": "lang.rust.rust",
        "documentation": {}
    },
    {
        "label": "scalar_types",
        "kind": 5,
        "importPath": "lang.rust.rust",
        "description": "lang.rust.rust",
        "peekOfCode": "scalar_types = {\n    \"eye eight\": \"i8\",\n    \"you eight\": \"u8\",\n    \"bytes\": \"u8\",\n    \"eye sixteen\": \"i16\",\n    \"you sixteen\": \"u16\",\n    \"eye thirty two\": \"i32\",\n    \"you thirty two\": \"u32\",\n    \"eye sixty four\": \"i64\",\n    \"you sixty four\": \"u64\",",
        "detail": "lang.rust.rust",
        "documentation": {}
    },
    {
        "label": "compound_types",
        "kind": 5,
        "importPath": "lang.rust.rust",
        "description": "lang.rust.rust",
        "peekOfCode": "compound_types = {\n    \"tuple\": \"()\",\n    \"array\": \"[]\",\n}\nstandard_library_types = {\n    \"box\": \"Box\",\n    \"vector\": \"Vec\",\n    \"string\": \"String\",\n    \"string slice\": \"&str\",\n    \"os string\": \"OsString\",",
        "detail": "lang.rust.rust",
        "documentation": {}
    },
    {
        "label": "standard_library_types",
        "kind": 5,
        "importPath": "lang.rust.rust",
        "description": "lang.rust.rust",
        "peekOfCode": "standard_library_types = {\n    \"box\": \"Box\",\n    \"vector\": \"Vec\",\n    \"string\": \"String\",\n    \"string slice\": \"&str\",\n    \"os string\": \"OsString\",\n    \"os string slice\": \"&OsStr\",\n    \"see string\": \"CString\",\n    \"see string slice\": \"&CStr\",\n    \"option\": \"Option\",",
        "detail": "lang.rust.rust",
        "documentation": {}
    },
    {
        "label": "standard_sync_types",
        "kind": 5,
        "importPath": "lang.rust.rust",
        "description": "lang.rust.rust",
        "peekOfCode": "standard_sync_types = {\n    \"arc\": \"Arc\",\n    \"barrier\": \"Barrier\",\n    \"condition variable\": \"Condvar\",\n    \"mutex\": \"Mutex\",\n    \"once\": \"Once\",\n    \"read write lock\": \"RwLock\",\n    \"receiver\": \"Receiver\",\n    \"sender\": \"Sender\",\n    \"sink sender\": \"SyncSender\",",
        "detail": "lang.rust.rust",
        "documentation": {}
    },
    {
        "label": "all_types",
        "kind": 5,
        "importPath": "lang.rust.rust",
        "description": "lang.rust.rust",
        "peekOfCode": "all_types = {\n    **scalar_types,\n    **compound_types,\n    **standard_library_types,\n    **standard_sync_types,\n}\nstandard_function_macros = {\n    \"panic\": \"panic!\",\n    \"format\": \"format!\",\n    \"concatenate\": \"concat!\",",
        "detail": "lang.rust.rust",
        "documentation": {}
    },
    {
        "label": "standard_function_macros",
        "kind": 5,
        "importPath": "lang.rust.rust",
        "description": "lang.rust.rust",
        "peekOfCode": "standard_function_macros = {\n    \"panic\": \"panic!\",\n    \"format\": \"format!\",\n    \"concatenate\": \"concat!\",\n    \"print\": \"print!\",\n    \"print line\": \"println!\",\n    \"error print line\": \"eprintln!\",\n    \"to do\": \"todo!\",\n}\nstandard_array_macros = {",
        "detail": "lang.rust.rust",
        "documentation": {}
    },
    {
        "label": "standard_array_macros",
        "kind": 5,
        "importPath": "lang.rust.rust",
        "description": "lang.rust.rust",
        "peekOfCode": "standard_array_macros = {\n    \"vector\": \"vec!\",\n}\nstandard_block_macros = {\n    \"macro rules\": \"macro_rules!\",\n}\nlogging_macros = {\n    \"debug\": \"debug!\",\n    \"info\": \"info!\",\n    \"warning\": \"warn!\",",
        "detail": "lang.rust.rust",
        "documentation": {}
    },
    {
        "label": "standard_block_macros",
        "kind": 5,
        "importPath": "lang.rust.rust",
        "description": "lang.rust.rust",
        "peekOfCode": "standard_block_macros = {\n    \"macro rules\": \"macro_rules!\",\n}\nlogging_macros = {\n    \"debug\": \"debug!\",\n    \"info\": \"info!\",\n    \"warning\": \"warn!\",\n    \"error\": \"error!\",\n}\ntesting_macros = {",
        "detail": "lang.rust.rust",
        "documentation": {}
    },
    {
        "label": "logging_macros",
        "kind": 5,
        "importPath": "lang.rust.rust",
        "description": "lang.rust.rust",
        "peekOfCode": "logging_macros = {\n    \"debug\": \"debug!\",\n    \"info\": \"info!\",\n    \"warning\": \"warn!\",\n    \"error\": \"error!\",\n}\ntesting_macros = {\n    \"assert\": \"assert!\",\n    \"assert equal\": \"assert_eq!\",\n    \"assert not equal\": \"assert_ne!\",",
        "detail": "lang.rust.rust",
        "documentation": {}
    },
    {
        "label": "testing_macros",
        "kind": 5,
        "importPath": "lang.rust.rust",
        "description": "lang.rust.rust",
        "peekOfCode": "testing_macros = {\n    \"assert\": \"assert!\",\n    \"assert equal\": \"assert_eq!\",\n    \"assert not equal\": \"assert_ne!\",\n}\nall_function_macros = {\n    **standard_function_macros,\n    **logging_macros,\n    **testing_macros,\n}",
        "detail": "lang.rust.rust",
        "documentation": {}
    },
    {
        "label": "all_function_macros",
        "kind": 5,
        "importPath": "lang.rust.rust",
        "description": "lang.rust.rust",
        "peekOfCode": "all_function_macros = {\n    **standard_function_macros,\n    **logging_macros,\n    **testing_macros,\n}\nall_array_macros = {\n    **standard_array_macros,\n}\nall_block_macros = {\n    **standard_block_macros,",
        "detail": "lang.rust.rust",
        "documentation": {}
    },
    {
        "label": "all_array_macros",
        "kind": 5,
        "importPath": "lang.rust.rust",
        "description": "lang.rust.rust",
        "peekOfCode": "all_array_macros = {\n    **standard_array_macros,\n}\nall_block_macros = {\n    **standard_block_macros,\n}\nall_macros = {\n    **all_function_macros,\n    **all_array_macros,\n    **all_block_macros,",
        "detail": "lang.rust.rust",
        "documentation": {}
    },
    {
        "label": "all_block_macros",
        "kind": 5,
        "importPath": "lang.rust.rust",
        "description": "lang.rust.rust",
        "peekOfCode": "all_block_macros = {\n    **standard_block_macros,\n}\nall_macros = {\n    **all_function_macros,\n    **all_array_macros,\n    **all_block_macros,\n}\nall_function_macro_values = set(all_function_macros.values())\nall_array_macro_values = set(all_array_macros.values())",
        "detail": "lang.rust.rust",
        "documentation": {}
    },
    {
        "label": "all_macros",
        "kind": 5,
        "importPath": "lang.rust.rust",
        "description": "lang.rust.rust",
        "peekOfCode": "all_macros = {\n    **all_function_macros,\n    **all_array_macros,\n    **all_block_macros,\n}\nall_function_macro_values = set(all_function_macros.values())\nall_array_macro_values = set(all_array_macros.values())\nall_block_macro_values = set(all_block_macros.values())\nclosure_traits = {\n    \"closure\": \"Fn\",",
        "detail": "lang.rust.rust",
        "documentation": {}
    },
    {
        "label": "all_function_macro_values",
        "kind": 5,
        "importPath": "lang.rust.rust",
        "description": "lang.rust.rust",
        "peekOfCode": "all_function_macro_values = set(all_function_macros.values())\nall_array_macro_values = set(all_array_macros.values())\nall_block_macro_values = set(all_block_macros.values())\nclosure_traits = {\n    \"closure\": \"Fn\",\n    \"closure once\": \"FnOnce\",\n    \"closure mutable\": \"FnMut\",\n}\nconversion_traits = {\n    \"into\": \"Into\",",
        "detail": "lang.rust.rust",
        "documentation": {}
    },
    {
        "label": "all_array_macro_values",
        "kind": 5,
        "importPath": "lang.rust.rust",
        "description": "lang.rust.rust",
        "peekOfCode": "all_array_macro_values = set(all_array_macros.values())\nall_block_macro_values = set(all_block_macros.values())\nclosure_traits = {\n    \"closure\": \"Fn\",\n    \"closure once\": \"FnOnce\",\n    \"closure mutable\": \"FnMut\",\n}\nconversion_traits = {\n    \"into\": \"Into\",\n    \"from\": \"From\",",
        "detail": "lang.rust.rust",
        "documentation": {}
    },
    {
        "label": "all_block_macro_values",
        "kind": 5,
        "importPath": "lang.rust.rust",
        "description": "lang.rust.rust",
        "peekOfCode": "all_block_macro_values = set(all_block_macros.values())\nclosure_traits = {\n    \"closure\": \"Fn\",\n    \"closure once\": \"FnOnce\",\n    \"closure mutable\": \"FnMut\",\n}\nconversion_traits = {\n    \"into\": \"Into\",\n    \"from\": \"From\",\n}",
        "detail": "lang.rust.rust",
        "documentation": {}
    },
    {
        "label": "closure_traits",
        "kind": 5,
        "importPath": "lang.rust.rust",
        "description": "lang.rust.rust",
        "peekOfCode": "closure_traits = {\n    \"closure\": \"Fn\",\n    \"closure once\": \"FnOnce\",\n    \"closure mutable\": \"FnMut\",\n}\nconversion_traits = {\n    \"into\": \"Into\",\n    \"from\": \"From\",\n}\niterator_traits = {",
        "detail": "lang.rust.rust",
        "documentation": {}
    },
    {
        "label": "conversion_traits",
        "kind": 5,
        "importPath": "lang.rust.rust",
        "description": "lang.rust.rust",
        "peekOfCode": "conversion_traits = {\n    \"into\": \"Into\",\n    \"from\": \"From\",\n}\niterator_traits = {\n    \"iterator\": \"Iterator\",\n}\nall_traits = {\n    **closure_traits,\n    **conversion_traits,",
        "detail": "lang.rust.rust",
        "documentation": {}
    },
    {
        "label": "iterator_traits",
        "kind": 5,
        "importPath": "lang.rust.rust",
        "description": "lang.rust.rust",
        "peekOfCode": "iterator_traits = {\n    \"iterator\": \"Iterator\",\n}\nall_traits = {\n    **closure_traits,\n    **conversion_traits,\n    **iterator_traits,\n}\n# tag: libraries_gui\nctx.lists[\"user.code_libraries\"] = {",
        "detail": "lang.rust.rust",
        "documentation": {}
    },
    {
        "label": "all_traits",
        "kind": 5,
        "importPath": "lang.rust.rust",
        "description": "lang.rust.rust",
        "peekOfCode": "all_traits = {\n    **closure_traits,\n    **conversion_traits,\n    **iterator_traits,\n}\n# tag: libraries_gui\nctx.lists[\"user.code_libraries\"] = {\n    \"eye oh\": \"std::io\",\n    \"file system\": \"std::fs\",\n    \"envy\": \"std::env\",",
        "detail": "lang.rust.rust",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"user.code_libraries\"]",
        "kind": 5,
        "importPath": "lang.rust.rust",
        "description": "lang.rust.rust",
        "peekOfCode": "ctx.lists[\"user.code_libraries\"] = {\n    \"eye oh\": \"std::io\",\n    \"file system\": \"std::fs\",\n    \"envy\": \"std::env\",\n    \"collections\": \"std::collections\",\n}\n# tag: functions_common\nctx.lists[\"user.code_common_function\"] = {\n    \"drop\": \"drop\",\n    \"catch unwind\": \"catch_unwind\",",
        "detail": "lang.rust.rust",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"user.code_common_function\"]",
        "kind": 5,
        "importPath": "lang.rust.rust",
        "description": "lang.rust.rust",
        "peekOfCode": "ctx.lists[\"user.code_common_function\"] = {\n    \"drop\": \"drop\",\n    \"catch unwind\": \"catch_unwind\",\n    \"iterator\": \"iter\",\n    \"into iterator\": \"into_iter\",\n    \"from iterator\": \"from_iter\",\n    **all_macros,\n}\n# tag: functions\nctx.lists[\"user.code_type\"] = all_types",
        "detail": "lang.rust.rust",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"user.code_type\"]",
        "kind": 5,
        "importPath": "lang.rust.rust",
        "description": "lang.rust.rust",
        "peekOfCode": "ctx.lists[\"user.code_type\"] = all_types\n# rust specific grammar\nctx.lists[\"user.code_type_modifier\"] = {\n    \"mutable\": \"mut \",\n    \"mute\": \"mut \",\n    \"borrowed\": \"&\",\n    \"borrowed mutable\": \"&mut \",\n    \"borrowed mute\": \"&mut \",\n    \"mutable borrowed\": \"&mut \",\n    \"mute borrowed\": \"&mut \",",
        "detail": "lang.rust.rust",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"user.code_type_modifier\"]",
        "kind": 5,
        "importPath": "lang.rust.rust",
        "description": "lang.rust.rust",
        "peekOfCode": "ctx.lists[\"user.code_type_modifier\"] = {\n    \"mutable\": \"mut \",\n    \"mute\": \"mut \",\n    \"borrowed\": \"&\",\n    \"borrowed mutable\": \"&mut \",\n    \"borrowed mute\": \"&mut \",\n    \"mutable borrowed\": \"&mut \",\n    \"mute borrowed\": \"&mut \",\n}\n@ctx.capture(\"user.code_type\", rule=\"[{user.code_type_modifier}] {user.code_type}\")",
        "detail": "lang.rust.rust",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"user.code_macros\"]",
        "kind": 5,
        "importPath": "lang.rust.rust",
        "description": "lang.rust.rust",
        "peekOfCode": "ctx.lists[\"user.code_macros\"] = all_macros\nctx.lists[\"user.code_trait\"] = all_traits\n@ctx.action_class(\"user\")\nclass UserActions:\n    # tag: comment_line\n    def code_comment_line_prefix():\n        actions.auto_insert(\"// \")\n    # tag: comment_documentation\n    def code_comment_documentation():\n        actions.auto_insert(\"/// \")",
        "detail": "lang.rust.rust",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"user.code_trait\"]",
        "kind": 5,
        "importPath": "lang.rust.rust",
        "description": "lang.rust.rust",
        "peekOfCode": "ctx.lists[\"user.code_trait\"] = all_traits\n@ctx.action_class(\"user\")\nclass UserActions:\n    # tag: comment_line\n    def code_comment_line_prefix():\n        actions.auto_insert(\"// \")\n    # tag: comment_documentation\n    def code_comment_documentation():\n        actions.auto_insert(\"/// \")\n    # tag: imperative",
        "detail": "lang.rust.rust",
        "documentation": {}
    },
    {
        "label": "RT",
        "kind": 5,
        "importPath": "lang.rust.rust",
        "description": "lang.rust.rust",
        "peekOfCode": "RT = TypeVar(\"RT\")  # return type\ndef repeat_call(n: int, f: Callable[..., RT], *args: Any, **kwargs: Any):\n    for i in range(n):\n        f(*args, **kwargs)",
        "detail": "lang.rust.rust",
        "documentation": {}
    },
    {
        "label": "UserActions",
        "kind": 6,
        "importPath": "lang.scala.scala",
        "description": "lang.scala.scala",
        "peekOfCode": "class UserActions:\n    def code_block():\n        actions.insert(\"{}\")\n        actions.edit.left()\n        actions.key(\"enter\")\n    def code_operator_lambda():\n        actions.insert(\" => \")\n    def code_operator_subscript():\n        actions.insert(\"()\")\n        actions.edit.left()",
        "detail": "lang.scala.scala",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "lang.scala.scala",
        "description": "lang.scala.scala",
        "peekOfCode": "ctx = Context()\nmod = Module()\nctx.matches = r\"\"\"\ntag: user.scala\n\"\"\"\n# Scala Common Types\nscala_common_types = {\n    \"boolean\": \"Boolean\",\n    \"int\": \"Int\",\n    \"float\": \"Float\",",
        "detail": "lang.scala.scala",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "lang.scala.scala",
        "description": "lang.scala.scala",
        "peekOfCode": "mod = Module()\nctx.matches = r\"\"\"\ntag: user.scala\n\"\"\"\n# Scala Common Types\nscala_common_types = {\n    \"boolean\": \"Boolean\",\n    \"int\": \"Int\",\n    \"float\": \"Float\",\n    \"byte\": \"Byte\",",
        "detail": "lang.scala.scala",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "lang.scala.scala",
        "description": "lang.scala.scala",
        "peekOfCode": "ctx.matches = r\"\"\"\ntag: user.scala\n\"\"\"\n# Scala Common Types\nscala_common_types = {\n    \"boolean\": \"Boolean\",\n    \"int\": \"Int\",\n    \"float\": \"Float\",\n    \"byte\": \"Byte\",\n    \"double\": \"Double\",",
        "detail": "lang.scala.scala",
        "documentation": {}
    },
    {
        "label": "scala_common_types",
        "kind": 5,
        "importPath": "lang.scala.scala",
        "description": "lang.scala.scala",
        "peekOfCode": "scala_common_types = {\n    \"boolean\": \"Boolean\",\n    \"int\": \"Int\",\n    \"float\": \"Float\",\n    \"byte\": \"Byte\",\n    \"double\": \"Double\",\n    \"short\": \"Short\",\n    \"long\": \"Long\",\n    \"char\": \"Char\",\n    \"unit\": \"Unit\",",
        "detail": "lang.scala.scala",
        "documentation": {}
    },
    {
        "label": "scala_common_generic_types",
        "kind": 5,
        "importPath": "lang.scala.scala",
        "description": "lang.scala.scala",
        "peekOfCode": "scala_common_generic_types = {\n    \"array\": \"Array\",\n    \"deck\": \"Deque\",\n    \"future\": \"Future\",\n    \"list\": \"List\",\n    \"map\": \"Map\",\n    \"nil\": \"Nil\",\n    \"option\": \"Option\",\n    \"queue\": \"Queue\",\n    \"seek\": \"Seq\",",
        "detail": "lang.scala.scala",
        "documentation": {}
    },
    {
        "label": "scala_types",
        "kind": 5,
        "importPath": "lang.scala.scala",
        "description": "lang.scala.scala",
        "peekOfCode": "scala_types = scala_common_types.copy()\nscala_types.update(scala_common_generic_types)\nctx.lists[\"user.code_type\"] = scala_types\n# Scala Modifies\nscala_modifiers = {\n    \"public\": \"public\",\n    \"private\": \"private\",\n    \"protected\": \"protected\",\n}\nmod.list(\"scala_modifier\", desc=\"Scala Modifiers\")",
        "detail": "lang.scala.scala",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"user.code_type\"]",
        "kind": 5,
        "importPath": "lang.scala.scala",
        "description": "lang.scala.scala",
        "peekOfCode": "ctx.lists[\"user.code_type\"] = scala_types\n# Scala Modifies\nscala_modifiers = {\n    \"public\": \"public\",\n    \"private\": \"private\",\n    \"protected\": \"protected\",\n}\nmod.list(\"scala_modifier\", desc=\"Scala Modifiers\")\nctx.lists[\"user.scala_modifier\"] = scala_modifiers\nscala_keywords = {",
        "detail": "lang.scala.scala",
        "documentation": {}
    },
    {
        "label": "scala_modifiers",
        "kind": 5,
        "importPath": "lang.scala.scala",
        "description": "lang.scala.scala",
        "peekOfCode": "scala_modifiers = {\n    \"public\": \"public\",\n    \"private\": \"private\",\n    \"protected\": \"protected\",\n}\nmod.list(\"scala_modifier\", desc=\"Scala Modifiers\")\nctx.lists[\"user.scala_modifier\"] = scala_modifiers\nscala_keywords = {\n    \"abstract\": \"abstract\",\n    \"case class\": \"case class\",",
        "detail": "lang.scala.scala",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"user.scala_modifier\"]",
        "kind": 5,
        "importPath": "lang.scala.scala",
        "description": "lang.scala.scala",
        "peekOfCode": "ctx.lists[\"user.scala_modifier\"] = scala_modifiers\nscala_keywords = {\n    \"abstract\": \"abstract\",\n    \"case class\": \"case class\",\n    \"def\": \"def\",\n    \"extends\": \"extends\",\n    \"implicit\": \"implicit\",\n    \"lazy val\": \"lazy val\",\n    \"new\": \"new\",\n    \"object\": \"object\",",
        "detail": "lang.scala.scala",
        "documentation": {}
    },
    {
        "label": "scala_keywords",
        "kind": 5,
        "importPath": "lang.scala.scala",
        "description": "lang.scala.scala",
        "peekOfCode": "scala_keywords = {\n    \"abstract\": \"abstract\",\n    \"case class\": \"case class\",\n    \"def\": \"def\",\n    \"extends\": \"extends\",\n    \"implicit\": \"implicit\",\n    \"lazy val\": \"lazy val\",\n    \"new\": \"new\",\n    \"object\": \"object\",\n    \"override\": \"override\",",
        "detail": "lang.scala.scala",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"user.scala_keyword\"]",
        "kind": 5,
        "importPath": "lang.scala.scala",
        "description": "lang.scala.scala",
        "peekOfCode": "ctx.lists[\"user.scala_keyword\"] = scala_keywords\n@ctx.action_class(\"user\")\nclass UserActions:\n    def code_block():\n        actions.insert(\"{}\")\n        actions.edit.left()\n        actions.key(\"enter\")\n    def code_operator_lambda():\n        actions.insert(\" => \")\n    def code_operator_subscript():",
        "detail": "lang.scala.scala",
        "documentation": {}
    },
    {
        "label": "UserActions",
        "kind": 6,
        "importPath": "lang.sql.sql",
        "description": "lang.sql.sql",
        "peekOfCode": "class UserActions:\n    def code_operator_addition():\n        actions.auto_insert(\" + \")\n    def code_operator_subtraction():\n        actions.auto_insert(\" - \")\n    def code_operator_multiplication():\n        actions.auto_insert(\" * \")\n    def code_operator_division():\n        actions.auto_insert(\" / \")\n    def code_operator_equal():",
        "detail": "lang.sql.sql",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "lang.sql.sql",
        "description": "lang.sql.sql",
        "peekOfCode": "ctx = Context()\nctx.matches = r\"\"\"\ntag: user.sql\n\"\"\"\n# these vary by dialect\nctx.lists[\"user.code_common_function\"] = {\"count\": \"Count\", \"min\": \"Min\", \"max\": \"Max\"}\n@ctx.action_class(\"user\")\nclass UserActions:\n    def code_operator_addition():\n        actions.auto_insert(\" + \")",
        "detail": "lang.sql.sql",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "lang.sql.sql",
        "description": "lang.sql.sql",
        "peekOfCode": "ctx.matches = r\"\"\"\ntag: user.sql\n\"\"\"\n# these vary by dialect\nctx.lists[\"user.code_common_function\"] = {\"count\": \"Count\", \"min\": \"Min\", \"max\": \"Max\"}\n@ctx.action_class(\"user\")\nclass UserActions:\n    def code_operator_addition():\n        actions.auto_insert(\" + \")\n    def code_operator_subtraction():",
        "detail": "lang.sql.sql",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"user.code_common_function\"]",
        "kind": 5,
        "importPath": "lang.sql.sql",
        "description": "lang.sql.sql",
        "peekOfCode": "ctx.lists[\"user.code_common_function\"] = {\"count\": \"Count\", \"min\": \"Min\", \"max\": \"Max\"}\n@ctx.action_class(\"user\")\nclass UserActions:\n    def code_operator_addition():\n        actions.auto_insert(\" + \")\n    def code_operator_subtraction():\n        actions.auto_insert(\" - \")\n    def code_operator_multiplication():\n        actions.auto_insert(\" * \")\n    def code_operator_division():",
        "detail": "lang.sql.sql",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "lang.tags.comment_block",
        "description": "lang.tags.comment_block",
        "peekOfCode": "class Actions:\n    def code_comment_block():\n        \"\"\"Block comment\"\"\"\n    def code_comment_block_prefix():\n        \"\"\"Block comment start syntax\"\"\"\n    def code_comment_block_suffix():\n        \"\"\"Block comment end syntax\"\"\"\n@c_like_ctx.action_class(\"user\")\nclass CActions:\n    def code_comment_block():",
        "detail": "lang.tags.comment_block",
        "documentation": {}
    },
    {
        "label": "CActions",
        "kind": 6,
        "importPath": "lang.tags.comment_block",
        "description": "lang.tags.comment_block",
        "peekOfCode": "class CActions:\n    def code_comment_block():\n        actions.insert(\"/*\\n\\n*/\")\n        actions.edit.up()\n    def code_comment_block_prefix():\n        actions.auto_insert(\"/*\")\n    def code_comment_block_suffix():\n        actions.auto_insert(\"*/\")",
        "detail": "lang.tags.comment_block",
        "documentation": {}
    },
    {
        "label": "c_like_ctx",
        "kind": 5,
        "importPath": "lang.tags.comment_block",
        "description": "lang.tags.comment_block",
        "peekOfCode": "c_like_ctx = Context()\nmod = Module()\nmod.tag(\"code_comment_block\", desc=\"Tag for enabling generic block comment commands\")\nmod.tag(\"code_comment_block_c_like\", desc=\"Denotes usage of C-style block comments\")\nc_like_ctx.matches = \"\"\"\ntag: user.code_comment_block_c_like\n\"\"\"\nc_like_ctx.tags = [\"user.code_comment_block\"]\n@mod.action_class\nclass Actions:",
        "detail": "lang.tags.comment_block",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "lang.tags.comment_block",
        "description": "lang.tags.comment_block",
        "peekOfCode": "mod = Module()\nmod.tag(\"code_comment_block\", desc=\"Tag for enabling generic block comment commands\")\nmod.tag(\"code_comment_block_c_like\", desc=\"Denotes usage of C-style block comments\")\nc_like_ctx.matches = \"\"\"\ntag: user.code_comment_block_c_like\n\"\"\"\nc_like_ctx.tags = [\"user.code_comment_block\"]\n@mod.action_class\nclass Actions:\n    def code_comment_block():",
        "detail": "lang.tags.comment_block",
        "documentation": {}
    },
    {
        "label": "c_like_ctx.matches",
        "kind": 5,
        "importPath": "lang.tags.comment_block",
        "description": "lang.tags.comment_block",
        "peekOfCode": "c_like_ctx.matches = \"\"\"\ntag: user.code_comment_block_c_like\n\"\"\"\nc_like_ctx.tags = [\"user.code_comment_block\"]\n@mod.action_class\nclass Actions:\n    def code_comment_block():\n        \"\"\"Block comment\"\"\"\n    def code_comment_block_prefix():\n        \"\"\"Block comment start syntax\"\"\"",
        "detail": "lang.tags.comment_block",
        "documentation": {}
    },
    {
        "label": "c_like_ctx.tags",
        "kind": 5,
        "importPath": "lang.tags.comment_block",
        "description": "lang.tags.comment_block",
        "peekOfCode": "c_like_ctx.tags = [\"user.code_comment_block\"]\n@mod.action_class\nclass Actions:\n    def code_comment_block():\n        \"\"\"Block comment\"\"\"\n    def code_comment_block_prefix():\n        \"\"\"Block comment start syntax\"\"\"\n    def code_comment_block_suffix():\n        \"\"\"Block comment end syntax\"\"\"\n@c_like_ctx.action_class(\"user\")",
        "detail": "lang.tags.comment_block",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "lang.tags.comment_documentation",
        "description": "lang.tags.comment_documentation",
        "peekOfCode": "class Actions:\n    def code_comment_documentation():\n        \"\"\"Inserts a document comment and positions the cursor appropriately\"\"\"",
        "detail": "lang.tags.comment_documentation",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "lang.tags.comment_documentation",
        "description": "lang.tags.comment_documentation",
        "peekOfCode": "ctx = Context()\nmod = Module()\nmod.tag(\n    \"code_comment_documentation\", desc=\"Tag for enabling generic documentation commands\"\n)\n@mod.action_class\nclass Actions:\n    def code_comment_documentation():\n        \"\"\"Inserts a document comment and positions the cursor appropriately\"\"\"",
        "detail": "lang.tags.comment_documentation",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "lang.tags.comment_documentation",
        "description": "lang.tags.comment_documentation",
        "peekOfCode": "mod = Module()\nmod.tag(\n    \"code_comment_documentation\", desc=\"Tag for enabling generic documentation commands\"\n)\n@mod.action_class\nclass Actions:\n    def code_comment_documentation():\n        \"\"\"Inserts a document comment and positions the cursor appropriately\"\"\"",
        "detail": "lang.tags.comment_documentation",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "lang.tags.comment_line",
        "description": "lang.tags.comment_line",
        "peekOfCode": "class Actions:\n    def code_comment_line_prefix():\n        \"\"\"Inserts line comment prefix at current cursor location\"\"\"",
        "detail": "lang.tags.comment_line",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "lang.tags.comment_line",
        "description": "lang.tags.comment_line",
        "peekOfCode": "ctx = Context()\nmod = Module()\nmod.tag(\"code_comment_line\", desc=\"Tag for enabling generic line comment commands\")\n@mod.action_class\nclass Actions:\n    def code_comment_line_prefix():\n        \"\"\"Inserts line comment prefix at current cursor location\"\"\"",
        "detail": "lang.tags.comment_line",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "lang.tags.comment_line",
        "description": "lang.tags.comment_line",
        "peekOfCode": "mod = Module()\nmod.tag(\"code_comment_line\", desc=\"Tag for enabling generic line comment commands\")\n@mod.action_class\nclass Actions:\n    def code_comment_line_prefix():\n        \"\"\"Inserts line comment prefix at current cursor location\"\"\"",
        "detail": "lang.tags.comment_line",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "lang.tags.data_bool",
        "description": "lang.tags.data_bool",
        "peekOfCode": "class Actions:\n    def code_insert_true():\n        \"\"\"Insert True value\"\"\"\n    def code_insert_false():\n        \"\"\"Insert False value\"\"\"",
        "detail": "lang.tags.data_bool",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "lang.tags.data_bool",
        "description": "lang.tags.data_bool",
        "peekOfCode": "ctx = Context()\nmod = Module()\nmod.tag(\"code_data_bool\", desc=\"Tag for enabling commands for inserting Boolean data\")\n@mod.action_class\nclass Actions:\n    def code_insert_true():\n        \"\"\"Insert True value\"\"\"\n    def code_insert_false():\n        \"\"\"Insert False value\"\"\"",
        "detail": "lang.tags.data_bool",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "lang.tags.data_bool",
        "description": "lang.tags.data_bool",
        "peekOfCode": "mod = Module()\nmod.tag(\"code_data_bool\", desc=\"Tag for enabling commands for inserting Boolean data\")\n@mod.action_class\nclass Actions:\n    def code_insert_true():\n        \"\"\"Insert True value\"\"\"\n    def code_insert_false():\n        \"\"\"Insert False value\"\"\"",
        "detail": "lang.tags.data_bool",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "lang.tags.data_null",
        "description": "lang.tags.data_null",
        "peekOfCode": "class Actions:\n    def code_insert_null():\n        \"\"\"Inserts null\"\"\"\n    def code_insert_is_null():\n        \"\"\"Inserts check for null\"\"\"\n    def code_insert_is_not_null():\n        \"\"\"Inserts check for non-null\"\"\"",
        "detail": "lang.tags.data_null",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "lang.tags.data_null",
        "description": "lang.tags.data_null",
        "peekOfCode": "ctx = Context()\nmod = Module()\nmod.tag(\"code_data_null\", desc=\"Tag for enabling commands relating to null\")\n@mod.action_class\nclass Actions:\n    def code_insert_null():\n        \"\"\"Inserts null\"\"\"\n    def code_insert_is_null():\n        \"\"\"Inserts check for null\"\"\"\n    def code_insert_is_not_null():",
        "detail": "lang.tags.data_null",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "lang.tags.data_null",
        "description": "lang.tags.data_null",
        "peekOfCode": "mod = Module()\nmod.tag(\"code_data_null\", desc=\"Tag for enabling commands relating to null\")\n@mod.action_class\nclass Actions:\n    def code_insert_null():\n        \"\"\"Inserts null\"\"\"\n    def code_insert_is_null():\n        \"\"\"Inserts check for null\"\"\"\n    def code_insert_is_not_null():\n        \"\"\"Inserts check for non-null\"\"\"",
        "detail": "lang.tags.data_null",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "lang.tags.functions",
        "description": "lang.tags.functions",
        "peekOfCode": "class Actions:\n    def code_modified_function(modifiers: Union[list[str], int], text: str):\n        \"\"\"\n        Inserts function declaration with the given modifiers. modifiers == 0\n        implies no modifiers (.talon files don't have empty list literal\n        syntax)\n        \"\"\"\n        mods = {} if modifiers == 0 else set(modifiers)\n        if mods == {}:\n            return actions.user.code_default_function(text)",
        "detail": "lang.tags.functions",
        "documentation": {}
    },
    {
        "label": "code_type",
        "kind": 2,
        "importPath": "lang.tags.functions",
        "description": "lang.tags.functions",
        "peekOfCode": "def code_type(m) -> str:\n    \"\"\"Returns a macro name\"\"\"\n    return m.code_type\nsetting_private_function_formatter = mod.setting(\"code_private_function_formatter\", str)\nsetting_protected_function_formatter = mod.setting(\n    \"code_protected_function_formatter\", str\n)\nsetting_public_function_formatter = mod.setting(\"code_public_function_formatter\", str)\nsetting_private_variable_formatter = mod.setting(\"code_private_variable_formatter\", str)\nsetting_protected_variable_formatter = mod.setting(",
        "detail": "lang.tags.functions",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "lang.tags.functions",
        "description": "lang.tags.functions",
        "peekOfCode": "ctx = Context()\nmod = Module()\n# TODO: abstract visibilities using a list (#663)\nmod.tag(\"code_functions\", desc=\"Tag for enabling commands for functions\")\nmod.list(\"code_type\", desc=\"List of types for active language\")\nmod.list(\n    \"code_parameter_name\", desc=\"List of common parameter names for active language\"\n)\nmod.list(\n    \"code_function_modifier\",",
        "detail": "lang.tags.functions",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "lang.tags.functions",
        "description": "lang.tags.functions",
        "peekOfCode": "mod = Module()\n# TODO: abstract visibilities using a list (#663)\nmod.tag(\"code_functions\", desc=\"Tag for enabling commands for functions\")\nmod.list(\"code_type\", desc=\"List of types for active language\")\nmod.list(\n    \"code_parameter_name\", desc=\"List of common parameter names for active language\"\n)\nmod.list(\n    \"code_function_modifier\",\n    desc=\"List of function modifiers (e.g. private, async, static)\",",
        "detail": "lang.tags.functions",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"user.code_function_modifier\"]",
        "kind": 5,
        "importPath": "lang.tags.functions",
        "description": "lang.tags.functions",
        "peekOfCode": "ctx.lists[\"user.code_function_modifier\"] = {\n    \"pub\": \"public\",\n    \"pro\": \"protected\",\n    \"private\": \"private\",\n    \"static\": \"static\",\n}\n@mod.capture(rule=\"{user.code_type}\")\ndef code_type(m) -> str:\n    \"\"\"Returns a macro name\"\"\"\n    return m.code_type",
        "detail": "lang.tags.functions",
        "documentation": {}
    },
    {
        "label": "setting_private_function_formatter",
        "kind": 5,
        "importPath": "lang.tags.functions",
        "description": "lang.tags.functions",
        "peekOfCode": "setting_private_function_formatter = mod.setting(\"code_private_function_formatter\", str)\nsetting_protected_function_formatter = mod.setting(\n    \"code_protected_function_formatter\", str\n)\nsetting_public_function_formatter = mod.setting(\"code_public_function_formatter\", str)\nsetting_private_variable_formatter = mod.setting(\"code_private_variable_formatter\", str)\nsetting_protected_variable_formatter = mod.setting(\n    \"code_protected_variable_formatter\", str\n)\nsetting_public_variable_formatter = mod.setting(\"code_public_variable_formatter\", str)",
        "detail": "lang.tags.functions",
        "documentation": {}
    },
    {
        "label": "setting_protected_function_formatter",
        "kind": 5,
        "importPath": "lang.tags.functions",
        "description": "lang.tags.functions",
        "peekOfCode": "setting_protected_function_formatter = mod.setting(\n    \"code_protected_function_formatter\", str\n)\nsetting_public_function_formatter = mod.setting(\"code_public_function_formatter\", str)\nsetting_private_variable_formatter = mod.setting(\"code_private_variable_formatter\", str)\nsetting_protected_variable_formatter = mod.setting(\n    \"code_protected_variable_formatter\", str\n)\nsetting_public_variable_formatter = mod.setting(\"code_public_variable_formatter\", str)\n@mod.action_class",
        "detail": "lang.tags.functions",
        "documentation": {}
    },
    {
        "label": "setting_public_function_formatter",
        "kind": 5,
        "importPath": "lang.tags.functions",
        "description": "lang.tags.functions",
        "peekOfCode": "setting_public_function_formatter = mod.setting(\"code_public_function_formatter\", str)\nsetting_private_variable_formatter = mod.setting(\"code_private_variable_formatter\", str)\nsetting_protected_variable_formatter = mod.setting(\n    \"code_protected_variable_formatter\", str\n)\nsetting_public_variable_formatter = mod.setting(\"code_public_variable_formatter\", str)\n@mod.action_class\nclass Actions:\n    def code_modified_function(modifiers: Union[list[str], int], text: str):\n        \"\"\"",
        "detail": "lang.tags.functions",
        "documentation": {}
    },
    {
        "label": "setting_private_variable_formatter",
        "kind": 5,
        "importPath": "lang.tags.functions",
        "description": "lang.tags.functions",
        "peekOfCode": "setting_private_variable_formatter = mod.setting(\"code_private_variable_formatter\", str)\nsetting_protected_variable_formatter = mod.setting(\n    \"code_protected_variable_formatter\", str\n)\nsetting_public_variable_formatter = mod.setting(\"code_public_variable_formatter\", str)\n@mod.action_class\nclass Actions:\n    def code_modified_function(modifiers: Union[list[str], int], text: str):\n        \"\"\"\n        Inserts function declaration with the given modifiers. modifiers == 0",
        "detail": "lang.tags.functions",
        "documentation": {}
    },
    {
        "label": "setting_protected_variable_formatter",
        "kind": 5,
        "importPath": "lang.tags.functions",
        "description": "lang.tags.functions",
        "peekOfCode": "setting_protected_variable_formatter = mod.setting(\n    \"code_protected_variable_formatter\", str\n)\nsetting_public_variable_formatter = mod.setting(\"code_public_variable_formatter\", str)\n@mod.action_class\nclass Actions:\n    def code_modified_function(modifiers: Union[list[str], int], text: str):\n        \"\"\"\n        Inserts function declaration with the given modifiers. modifiers == 0\n        implies no modifiers (.talon files don't have empty list literal",
        "detail": "lang.tags.functions",
        "documentation": {}
    },
    {
        "label": "setting_public_variable_formatter",
        "kind": 5,
        "importPath": "lang.tags.functions",
        "description": "lang.tags.functions",
        "peekOfCode": "setting_public_variable_formatter = mod.setting(\"code_public_variable_formatter\", str)\n@mod.action_class\nclass Actions:\n    def code_modified_function(modifiers: Union[list[str], int], text: str):\n        \"\"\"\n        Inserts function declaration with the given modifiers. modifiers == 0\n        implies no modifiers (.talon files don't have empty list literal\n        syntax)\n        \"\"\"\n        mods = {} if modifiers == 0 else set(modifiers)",
        "detail": "lang.tags.functions",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "lang.tags.functions_common",
        "description": "lang.tags.functions_common",
        "peekOfCode": "class Actions:\n    def code_toggle_functions():\n        \"\"\"GUI: List functions for active language\"\"\"\n        global function_list\n        if gui_functions.showing:\n            function_list = []\n            gui_functions.hide()\n            ctx.tags.discard(\"user.code_functions_common_gui_active\")\n        else:\n            update_function_list_and_freeze()",
        "detail": "lang.tags.functions_common",
        "documentation": {}
    },
    {
        "label": "code_common_function",
        "kind": 2,
        "importPath": "lang.tags.functions_common",
        "description": "lang.tags.functions_common",
        "peekOfCode": "def code_common_function(m) -> str:\n    \"\"\"Returns a function name\"\"\"\n    return m.code_common_function\nmod.tag(\"code_functions_common\", desc=\"Tag for enabling support for common functions\")\nmod.tag(\n    \"code_functions_common_gui_active\",\n    desc=\"Active when the function picker GUI is showing\",\n)\n@mod.action_class\nclass Actions:",
        "detail": "lang.tags.functions_common",
        "documentation": {}
    },
    {
        "label": "update_function_list_and_freeze",
        "kind": 2,
        "importPath": "lang.tags.functions_common",
        "description": "lang.tags.functions_common",
        "peekOfCode": "def update_function_list_and_freeze():\n    global function_list\n    if \"user.code_common_function\" in registry.lists:\n        function_list = sorted(registry.lists[\"user.code_common_function\"][0].keys())\n    else:\n        function_list = []\n    gui_functions.show()\n    ctx.tags.add(\"user.code_functions_common_gui_active\")\n@imgui.open()\ndef gui_functions(gui: imgui.GUI):",
        "detail": "lang.tags.functions_common",
        "documentation": {}
    },
    {
        "label": "gui_functions",
        "kind": 2,
        "importPath": "lang.tags.functions_common",
        "description": "lang.tags.functions_common",
        "peekOfCode": "def gui_functions(gui: imgui.GUI):\n    gui.text(\"Functions\")\n    gui.line()\n    # print(str(registry.lists[\"user.code_functions\"]))\n    for i, entry in enumerate(function_list, 1):\n        if entry in registry.lists[\"user.code_common_function\"][0]:\n            gui.text(\n                f\"{i}. {entry}: {registry.lists['user.code_common_function'][0][entry]}\"\n            )\n    gui.spacer()",
        "detail": "lang.tags.functions_common",
        "documentation": {}
    },
    {
        "label": "commands_updated",
        "kind": 2,
        "importPath": "lang.tags.functions_common",
        "description": "lang.tags.functions_common",
        "peekOfCode": "def commands_updated(_):\n    if gui_functions.showing:\n        update_function_list_and_freeze()\nregistry.register(\"update_commands\", commands_updated)",
        "detail": "lang.tags.functions_common",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "lang.tags.functions_common",
        "description": "lang.tags.functions_common",
        "peekOfCode": "ctx = Context()\nmod = Module()\nmod.list(\"code_common_function\", desc=\"List of common functions for active language\")\n# global\nfunction_list = []\n@mod.capture(rule=\"{user.code_common_function}\")\ndef code_common_function(m) -> str:\n    \"\"\"Returns a function name\"\"\"\n    return m.code_common_function\nmod.tag(\"code_functions_common\", desc=\"Tag for enabling support for common functions\")",
        "detail": "lang.tags.functions_common",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "lang.tags.functions_common",
        "description": "lang.tags.functions_common",
        "peekOfCode": "mod = Module()\nmod.list(\"code_common_function\", desc=\"List of common functions for active language\")\n# global\nfunction_list = []\n@mod.capture(rule=\"{user.code_common_function}\")\ndef code_common_function(m) -> str:\n    \"\"\"Returns a function name\"\"\"\n    return m.code_common_function\nmod.tag(\"code_functions_common\", desc=\"Tag for enabling support for common functions\")\nmod.tag(",
        "detail": "lang.tags.functions_common",
        "documentation": {}
    },
    {
        "label": "function_list",
        "kind": 5,
        "importPath": "lang.tags.functions_common",
        "description": "lang.tags.functions_common",
        "peekOfCode": "function_list = []\n@mod.capture(rule=\"{user.code_common_function}\")\ndef code_common_function(m) -> str:\n    \"\"\"Returns a function name\"\"\"\n    return m.code_common_function\nmod.tag(\"code_functions_common\", desc=\"Tag for enabling support for common functions\")\nmod.tag(\n    \"code_functions_common_gui_active\",\n    desc=\"Active when the function picker GUI is showing\",\n)",
        "detail": "lang.tags.functions_common",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "lang.tags.imperative",
        "description": "lang.tags.imperative",
        "peekOfCode": "class Actions:\n    def code_block():\n        \"\"\"Inserts equivalent of {\\n} for the active language, and places the cursor appropriately\"\"\"\n    def code_state_if():\n        \"\"\"Inserts if statement\"\"\"\n    def code_state_else_if():\n        \"\"\"Inserts else if statement\"\"\"\n    def code_state_else():\n        \"\"\"Inserts else statement\"\"\"\n    def code_state_do():",
        "detail": "lang.tags.imperative",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "lang.tags.imperative",
        "description": "lang.tags.imperative",
        "peekOfCode": "ctx = Context()\nmod = Module()\nmod.tag(\n    \"code_imperative\",\n    desc=\"Tag for enabling basic imperative programming commands (loops, functions, etc)\",\n)\n@mod.action_class\nclass Actions:\n    def code_block():\n        \"\"\"Inserts equivalent of {\\n} for the active language, and places the cursor appropriately\"\"\"",
        "detail": "lang.tags.imperative",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "lang.tags.imperative",
        "description": "lang.tags.imperative",
        "peekOfCode": "mod = Module()\nmod.tag(\n    \"code_imperative\",\n    desc=\"Tag for enabling basic imperative programming commands (loops, functions, etc)\",\n)\n@mod.action_class\nclass Actions:\n    def code_block():\n        \"\"\"Inserts equivalent of {\\n} for the active language, and places the cursor appropriately\"\"\"\n    def code_state_if():",
        "detail": "lang.tags.imperative",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "lang.tags.keywords",
        "description": "lang.tags.keywords",
        "peekOfCode": "class Actions:\n    def code_keyword(keywords: list[str]):\n        \"\"\"Adds keywords\"\"\"\n        for keyword in keywords:\n            actions.insert(keyword)",
        "detail": "lang.tags.keywords",
        "documentation": {}
    },
    {
        "label": "code_keyword",
        "kind": 2,
        "importPath": "lang.tags.keywords",
        "description": "lang.tags.keywords",
        "peekOfCode": "def code_keyword(m) -> str:\n    return str(m)\n@mod.action_class\nclass Actions:\n    def code_keyword(keywords: list[str]):\n        \"\"\"Adds keywords\"\"\"\n        for keyword in keywords:\n            actions.insert(keyword)",
        "detail": "lang.tags.keywords",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "lang.tags.keywords",
        "description": "lang.tags.keywords",
        "peekOfCode": "mod = Module()\nmod.tag(\"code_keywords\", desc=\"Tag for enabling commands for keywords\")\nmod.list(\"code_keyword\", desc=\"List of keywords for active language\")\n@mod.capture(rule=(\"{user.code_keyword}\"))\ndef code_keyword(m) -> str:\n    return str(m)\n@mod.action_class\nclass Actions:\n    def code_keyword(keywords: list[str]):\n        \"\"\"Adds keywords\"\"\"",
        "detail": "lang.tags.keywords",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "lang.tags.libraries",
        "description": "lang.tags.libraries",
        "peekOfCode": "class Actions:\n    def code_import():\n        \"\"\"import/using equivalent\"\"\"",
        "detail": "lang.tags.libraries",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "lang.tags.libraries",
        "description": "lang.tags.libraries",
        "peekOfCode": "ctx = Context()\nmod = Module()\nmod.tag(\n    \"code_libraries\",\n    desc=\"Tag for enabling commands for importing libraries\",\n)\n@mod.action_class\nclass Actions:\n    def code_import():\n        \"\"\"import/using equivalent\"\"\"",
        "detail": "lang.tags.libraries",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "lang.tags.libraries",
        "description": "lang.tags.libraries",
        "peekOfCode": "mod = Module()\nmod.tag(\n    \"code_libraries\",\n    desc=\"Tag for enabling commands for importing libraries\",\n)\n@mod.action_class\nclass Actions:\n    def code_import():\n        \"\"\"import/using equivalent\"\"\"",
        "detail": "lang.tags.libraries",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "lang.tags.libraries_gui",
        "description": "lang.tags.libraries_gui",
        "peekOfCode": "class Actions:\n    def code_toggle_libraries():\n        \"\"\"GUI: List libraries for active language\"\"\"\n        global library_list\n        if gui_libraries.showing:\n            library_list = []\n            gui_libraries.hide()\n            ctx.tags.discard(\"user.code_libraries_gui_showing\")\n        else:\n            update_library_list_and_freeze()",
        "detail": "lang.tags.libraries_gui",
        "documentation": {}
    },
    {
        "label": "code_libraries",
        "kind": 2,
        "importPath": "lang.tags.libraries_gui",
        "description": "lang.tags.libraries_gui",
        "peekOfCode": "def code_libraries(m) -> str:\n    \"\"\"Returns a type\"\"\"\n    return m.code_libraries\nmod.tag(\"code_libraries_gui\", desc=\"Tag for enabling GUI support for common libraries\")\n@mod.action_class\nclass Actions:\n    def code_toggle_libraries():\n        \"\"\"GUI: List libraries for active language\"\"\"\n        global library_list\n        if gui_libraries.showing:",
        "detail": "lang.tags.libraries_gui",
        "documentation": {}
    },
    {
        "label": "gui_libraries",
        "kind": 2,
        "importPath": "lang.tags.libraries_gui",
        "description": "lang.tags.libraries_gui",
        "peekOfCode": "def gui_libraries(gui: imgui.GUI):\n    gui.text(\"Libraries\")\n    gui.line()\n    for i, entry in enumerate(library_list, 1):\n        gui.text(f\"{i}. {entry}: {registry.lists['user.code_libraries'][0][entry]}\")\n    gui.spacer()\n    if gui.button(\"Toggle libraries close\"):\n        actions.user.code_toggle_libraries_hide()\ndef update_library_list_and_freeze():\n    global library_list",
        "detail": "lang.tags.libraries_gui",
        "documentation": {}
    },
    {
        "label": "update_library_list_and_freeze",
        "kind": 2,
        "importPath": "lang.tags.libraries_gui",
        "description": "lang.tags.libraries_gui",
        "peekOfCode": "def update_library_list_and_freeze():\n    global library_list\n    if \"user.code_libraries\" in registry.lists:\n        library_list = sorted(registry.lists[\"user.code_libraries\"][0].keys())\n    else:\n        library_list = []\n    gui_libraries.show()\n    ctx.tags.add(\"user.code_libraries_gui_showing\")\ndef commands_updated(_):\n    if gui_libraries.showing:",
        "detail": "lang.tags.libraries_gui",
        "documentation": {}
    },
    {
        "label": "commands_updated",
        "kind": 2,
        "importPath": "lang.tags.libraries_gui",
        "description": "lang.tags.libraries_gui",
        "peekOfCode": "def commands_updated(_):\n    if gui_libraries.showing:\n        update_library_list_and_freeze()\nregistry.register(\"update_commands\", commands_updated)",
        "detail": "lang.tags.libraries_gui",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "lang.tags.libraries_gui",
        "description": "lang.tags.libraries_gui",
        "peekOfCode": "ctx = Context()\nmod = Module()\nmod.list(\"code_libraries\", desc=\"List of libraries for active language\")\nmod.tag(\n    \"code_libraries_gui_showing\", desc=\"Active when the library picker GUI is showing\"\n)\n# global\nlibrary_list = []\n@mod.capture(rule=\"{user.code_libraries}\")\ndef code_libraries(m) -> str:",
        "detail": "lang.tags.libraries_gui",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "lang.tags.libraries_gui",
        "description": "lang.tags.libraries_gui",
        "peekOfCode": "mod = Module()\nmod.list(\"code_libraries\", desc=\"List of libraries for active language\")\nmod.tag(\n    \"code_libraries_gui_showing\", desc=\"Active when the library picker GUI is showing\"\n)\n# global\nlibrary_list = []\n@mod.capture(rule=\"{user.code_libraries}\")\ndef code_libraries(m) -> str:\n    \"\"\"Returns a type\"\"\"",
        "detail": "lang.tags.libraries_gui",
        "documentation": {}
    },
    {
        "label": "library_list",
        "kind": 5,
        "importPath": "lang.tags.libraries_gui",
        "description": "lang.tags.libraries_gui",
        "peekOfCode": "library_list = []\n@mod.capture(rule=\"{user.code_libraries}\")\ndef code_libraries(m) -> str:\n    \"\"\"Returns a type\"\"\"\n    return m.code_libraries\nmod.tag(\"code_libraries_gui\", desc=\"Tag for enabling GUI support for common libraries\")\n@mod.action_class\nclass Actions:\n    def code_toggle_libraries():\n        \"\"\"GUI: List libraries for active language\"\"\"",
        "detail": "lang.tags.libraries_gui",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "lang.tags.object_oriented",
        "description": "lang.tags.object_oriented",
        "peekOfCode": "class Actions:\n    def code_operator_object_accessor():\n        \"\"\"Inserts the object accessor operator (e.g., Java's \".\" or PHP's \"->)\"\"\"\n    def code_self():\n        \"\"\"Inserts a reference to the current object (e.g., C++ \"this\" or Python's \"self\")\"\"\"\n    def code_define_class():\n        \"\"\"Starts a class definition (e.g., Java's \"class\" keyword)\"\"\"",
        "detail": "lang.tags.object_oriented",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "lang.tags.object_oriented",
        "description": "lang.tags.object_oriented",
        "peekOfCode": "ctx = Context()\nmod = Module()\nmod.tag(\n    \"code_object_oriented\",\n    desc=\"Tag for enabling basic object oriented programming commands (objects, classes, etc)\",\n)\n@mod.action_class\nclass Actions:\n    def code_operator_object_accessor():\n        \"\"\"Inserts the object accessor operator (e.g., Java's \".\" or PHP's \"->)\"\"\"",
        "detail": "lang.tags.object_oriented",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "lang.tags.object_oriented",
        "description": "lang.tags.object_oriented",
        "peekOfCode": "mod = Module()\nmod.tag(\n    \"code_object_oriented\",\n    desc=\"Tag for enabling basic object oriented programming commands (objects, classes, etc)\",\n)\n@mod.action_class\nclass Actions:\n    def code_operator_object_accessor():\n        \"\"\"Inserts the object accessor operator (e.g., Java's \".\" or PHP's \"->)\"\"\"\n    def code_self():",
        "detail": "lang.tags.object_oriented",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "lang.tags.operators_array",
        "description": "lang.tags.operators_array",
        "peekOfCode": "class Actions:\n    def code_operator_subscript():\n        \"\"\"code_operator_subscript (e.g., C++ [])\"\"\"",
        "detail": "lang.tags.operators_array",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "lang.tags.operators_array",
        "description": "lang.tags.operators_array",
        "peekOfCode": "ctx = Context()\nmod = Module()\nmod.tag(\"code_operators_array\", desc=\"Tag for enabling array operator commands\")\n@mod.action_class\nclass Actions:\n    def code_operator_subscript():\n        \"\"\"code_operator_subscript (e.g., C++ [])\"\"\"",
        "detail": "lang.tags.operators_array",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "lang.tags.operators_array",
        "description": "lang.tags.operators_array",
        "peekOfCode": "mod = Module()\nmod.tag(\"code_operators_array\", desc=\"Tag for enabling array operator commands\")\n@mod.action_class\nclass Actions:\n    def code_operator_subscript():\n        \"\"\"code_operator_subscript (e.g., C++ [])\"\"\"",
        "detail": "lang.tags.operators_array",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "lang.tags.operators_assignment",
        "description": "lang.tags.operators_assignment",
        "peekOfCode": "class Actions:\n    def code_operator_assignment():\n        \"\"\"code_operator_assignment\"\"\"\n    def code_operator_subtraction_assignment():\n        \"\"\"code_operator_subtraction_assignment\"\"\"\n    def code_operator_addition_assignment():\n        \"\"\"code_operator_addition_assignment\"\"\"\n    def code_operator_increment():\n        \"\"\"code_operator_increment\"\"\"\n    def code_operator_multiplication_assignment():",
        "detail": "lang.tags.operators_assignment",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "lang.tags.operators_assignment",
        "description": "lang.tags.operators_assignment",
        "peekOfCode": "ctx = Context()\nmod = Module()\nmod.tag(\"code_operators_assignment\", desc=\"Tag for enabling assignment commands\")\n@mod.action_class\nclass Actions:\n    def code_operator_assignment():\n        \"\"\"code_operator_assignment\"\"\"\n    def code_operator_subtraction_assignment():\n        \"\"\"code_operator_subtraction_assignment\"\"\"\n    def code_operator_addition_assignment():",
        "detail": "lang.tags.operators_assignment",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "lang.tags.operators_assignment",
        "description": "lang.tags.operators_assignment",
        "peekOfCode": "mod = Module()\nmod.tag(\"code_operators_assignment\", desc=\"Tag for enabling assignment commands\")\n@mod.action_class\nclass Actions:\n    def code_operator_assignment():\n        \"\"\"code_operator_assignment\"\"\"\n    def code_operator_subtraction_assignment():\n        \"\"\"code_operator_subtraction_assignment\"\"\"\n    def code_operator_addition_assignment():\n        \"\"\"code_operator_addition_assignment\"\"\"",
        "detail": "lang.tags.operators_assignment",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "lang.tags.operators_bitwise",
        "description": "lang.tags.operators_bitwise",
        "peekOfCode": "class Actions:\n    def code_operator_bitwise_and():\n        \"\"\"code_operator_bitwise_and\"\"\"\n    def code_operator_bitwise_or():\n        \"\"\"code_operator_bitwise_or\"\"\"\n    def code_operator_bitwise_exclusive_or():\n        \"\"\"code_operator_bitwise_exclusive_or\"\"\"\n    def code_operator_bitwise_left_shift():\n        \"\"\"code_operator_bitwise_left_shift\"\"\"\n    def code_operator_bitwise_right_shift():",
        "detail": "lang.tags.operators_bitwise",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "lang.tags.operators_bitwise",
        "description": "lang.tags.operators_bitwise",
        "peekOfCode": "ctx = Context()\nmod = Module()\nmod.tag(\"code_operators_bitwise\", desc=\"Tag for enabling bitwise operator commands\")\n@mod.action_class\nclass Actions:\n    def code_operator_bitwise_and():\n        \"\"\"code_operator_bitwise_and\"\"\"\n    def code_operator_bitwise_or():\n        \"\"\"code_operator_bitwise_or\"\"\"\n    def code_operator_bitwise_exclusive_or():",
        "detail": "lang.tags.operators_bitwise",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "lang.tags.operators_bitwise",
        "description": "lang.tags.operators_bitwise",
        "peekOfCode": "mod = Module()\nmod.tag(\"code_operators_bitwise\", desc=\"Tag for enabling bitwise operator commands\")\n@mod.action_class\nclass Actions:\n    def code_operator_bitwise_and():\n        \"\"\"code_operator_bitwise_and\"\"\"\n    def code_operator_bitwise_or():\n        \"\"\"code_operator_bitwise_or\"\"\"\n    def code_operator_bitwise_exclusive_or():\n        \"\"\"code_operator_bitwise_exclusive_or\"\"\"",
        "detail": "lang.tags.operators_bitwise",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "lang.tags.operators_lambda",
        "description": "lang.tags.operators_lambda",
        "peekOfCode": "class Actions:\n    def code_operator_lambda():\n        \"\"\"code_operator_lambda\"\"\"",
        "detail": "lang.tags.operators_lambda",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "lang.tags.operators_lambda",
        "description": "lang.tags.operators_lambda",
        "peekOfCode": "ctx = Context()\nmod = Module()\n# TODO: this probably shouldn't be in operators\nmod.tag(\n    \"code_operators_lambda\", desc=\"Tag for enabling commands for anonymous functions\"\n)\n@mod.action_class\nclass Actions:\n    def code_operator_lambda():\n        \"\"\"code_operator_lambda\"\"\"",
        "detail": "lang.tags.operators_lambda",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "lang.tags.operators_lambda",
        "description": "lang.tags.operators_lambda",
        "peekOfCode": "mod = Module()\n# TODO: this probably shouldn't be in operators\nmod.tag(\n    \"code_operators_lambda\", desc=\"Tag for enabling commands for anonymous functions\"\n)\n@mod.action_class\nclass Actions:\n    def code_operator_lambda():\n        \"\"\"code_operator_lambda\"\"\"",
        "detail": "lang.tags.operators_lambda",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "lang.tags.operators_math",
        "description": "lang.tags.operators_math",
        "peekOfCode": "class Actions:\n    def code_operator_subtraction():\n        \"\"\"code_operator_subtraction\"\"\"\n    def code_operator_addition():\n        \"\"\"code_operator_addition\"\"\"\n    def code_operator_multiplication():\n        \"\"\"code_operator_multiplication\"\"\"\n    def code_operator_exponent():\n        \"\"\"code_operator_exponent\"\"\"\n    def code_operator_division():",
        "detail": "lang.tags.operators_math",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "lang.tags.operators_math",
        "description": "lang.tags.operators_math",
        "peekOfCode": "ctx = Context()\nmod = Module()\n# TODO: Could split into numeric, comparison, and logic?\nmod.tag(\"code_operators_math\", desc=\"Tag for enabling mathematical operator commands\")\n@mod.action_class\nclass Actions:\n    def code_operator_subtraction():\n        \"\"\"code_operator_subtraction\"\"\"\n    def code_operator_addition():\n        \"\"\"code_operator_addition\"\"\"",
        "detail": "lang.tags.operators_math",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "lang.tags.operators_math",
        "description": "lang.tags.operators_math",
        "peekOfCode": "mod = Module()\n# TODO: Could split into numeric, comparison, and logic?\nmod.tag(\"code_operators_math\", desc=\"Tag for enabling mathematical operator commands\")\n@mod.action_class\nclass Actions:\n    def code_operator_subtraction():\n        \"\"\"code_operator_subtraction\"\"\"\n    def code_operator_addition():\n        \"\"\"code_operator_addition\"\"\"\n    def code_operator_multiplication():",
        "detail": "lang.tags.operators_math",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "lang.tags.operators_pointer",
        "description": "lang.tags.operators_pointer",
        "peekOfCode": "class Actions:\n    def code_operator_indirection():\n        \"\"\"code_operator_indirection\"\"\"\n    def code_operator_address_of():\n        \"\"\"code_operator_address_of (e.g., C++ & op)\"\"\"\n    def code_operator_structure_dereference():\n        \"\"\"code_operator_structure_dereference (e.g., C++ -> op)\"\"\"",
        "detail": "lang.tags.operators_pointer",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "lang.tags.operators_pointer",
        "description": "lang.tags.operators_pointer",
        "peekOfCode": "ctx = Context()\nmod = Module()\nmod.tag(\"code_operators_pointer\", desc=\"Tag for enabling pointer operator commands\")\n@mod.action_class\nclass Actions:\n    def code_operator_indirection():\n        \"\"\"code_operator_indirection\"\"\"\n    def code_operator_address_of():\n        \"\"\"code_operator_address_of (e.g., C++ & op)\"\"\"\n    def code_operator_structure_dereference():",
        "detail": "lang.tags.operators_pointer",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "lang.tags.operators_pointer",
        "description": "lang.tags.operators_pointer",
        "peekOfCode": "mod = Module()\nmod.tag(\"code_operators_pointer\", desc=\"Tag for enabling pointer operator commands\")\n@mod.action_class\nclass Actions:\n    def code_operator_indirection():\n        \"\"\"code_operator_indirection\"\"\"\n    def code_operator_address_of():\n        \"\"\"code_operator_address_of (e.g., C++ & op)\"\"\"\n    def code_operator_structure_dereference():\n        \"\"\"code_operator_structure_dereference (e.g., C++ -> op)\"\"\"",
        "detail": "lang.tags.operators_pointer",
        "documentation": {}
    },
    {
        "label": "UserActions",
        "kind": 6,
        "importPath": "lang.talon.talon",
        "description": "lang.talon.talon",
        "peekOfCode": "class UserActions:\n    def code_operator_and():\n        actions.auto_insert(\" and \")\n    def code_operator_or():\n        actions.auto_insert(\" or \")\n    def code_operator_subtraction():\n        actions.auto_insert(\" - \")\n    def code_operator_addition():\n        actions.auto_insert(\" + \")\n    def code_operator_multiplication():",
        "detail": "lang.talon.talon",
        "documentation": {}
    },
    {
        "label": "on_update_decls",
        "kind": 2,
        "importPath": "lang.talon.talon",
        "description": "lang.talon.talon",
        "peekOfCode": "def on_update_decls(decls):\n    # todo modes?\n    for thing in [\n        \"actions\",\n        \"lists\",\n        \"captures\",\n        \"tags\",\n        \"apps\",\n        \"settings\",\n        \"scopes\",",
        "detail": "lang.talon.talon",
        "documentation": {}
    },
    {
        "label": "on_ready",
        "kind": 2,
        "importPath": "lang.talon.talon",
        "description": "lang.talon.talon",
        "peekOfCode": "def on_ready():\n    # print(\"on_ready\")\n    on_update_decls(registry.decls)\n    registry.register(\"update_decls\", on_update_decls)\napp.register(\"ready\", on_ready)\n@ctx.action_class(\"user\")\nclass UserActions:\n    def code_operator_and():\n        actions.auto_insert(\" and \")\n    def code_operator_or():",
        "detail": "lang.talon.talon",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "lang.talon.talon",
        "description": "lang.talon.talon",
        "peekOfCode": "mod = Module()\nctx = Context()\nctx_talon_lists = Context()\n# restrict all the talon_* lists to when the user.talon_populate_lists tag\n# is active to prevent them from being active in contexts where they are not wanted.\n# Do not enable this tag with dragon, as it will be unusable.\n# with conformer, the latency increase may also be unacceptable depending on your cpu\n# see https://github.com/knausj85/knausj_talon/issues/600\nctx_talon_lists.matches = r\"\"\"\ntag: user.talon_populate_lists",
        "detail": "lang.talon.talon",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "lang.talon.talon",
        "description": "lang.talon.talon",
        "peekOfCode": "ctx = Context()\nctx_talon_lists = Context()\n# restrict all the talon_* lists to when the user.talon_populate_lists tag\n# is active to prevent them from being active in contexts where they are not wanted.\n# Do not enable this tag with dragon, as it will be unusable.\n# with conformer, the latency increase may also be unacceptable depending on your cpu\n# see https://github.com/knausj85/knausj_talon/issues/600\nctx_talon_lists.matches = r\"\"\"\ntag: user.talon_populate_lists\n\"\"\"",
        "detail": "lang.talon.talon",
        "documentation": {}
    },
    {
        "label": "ctx_talon_lists",
        "kind": 5,
        "importPath": "lang.talon.talon",
        "description": "lang.talon.talon",
        "peekOfCode": "ctx_talon_lists = Context()\n# restrict all the talon_* lists to when the user.talon_populate_lists tag\n# is active to prevent them from being active in contexts where they are not wanted.\n# Do not enable this tag with dragon, as it will be unusable.\n# with conformer, the latency increase may also be unacceptable depending on your cpu\n# see https://github.com/knausj85/knausj_talon/issues/600\nctx_talon_lists.matches = r\"\"\"\ntag: user.talon_populate_lists\n\"\"\"\nmod.tag(\"talon_python\", \"Tag to activate talon-specific python commands\")",
        "detail": "lang.talon.talon",
        "documentation": {}
    },
    {
        "label": "ctx_talon_lists.matches",
        "kind": 5,
        "importPath": "lang.talon.talon",
        "description": "lang.talon.talon",
        "peekOfCode": "ctx_talon_lists.matches = r\"\"\"\ntag: user.talon_populate_lists\n\"\"\"\nmod.tag(\"talon_python\", \"Tag to activate talon-specific python commands\")\nmod.tag(\n    \"talon_populate_lists\",\n    \"Tag to activate talon-specific lists of actions, scopes, modes etcetera. Do not use this tag with dragon\",\n)\nmod.list(\"talon_actions\")\nmod.list(\"talon_lists\")",
        "detail": "lang.talon.talon",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "lang.talon.talon",
        "description": "lang.talon.talon",
        "peekOfCode": "ctx.matches = r\"\"\"\ntag: user.talon\n\"\"\"\nctx.lists[\"user.code_common_function\"] = {\n    \"insert\": \"insert\",\n    \"key\": \"key\",\n    \"print\": \"print\",\n    \"repeat\": \"repeat\",\n}\ndef on_update_decls(decls):",
        "detail": "lang.talon.talon",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"user.code_common_function\"]",
        "kind": 5,
        "importPath": "lang.talon.talon",
        "description": "lang.talon.talon",
        "peekOfCode": "ctx.lists[\"user.code_common_function\"] = {\n    \"insert\": \"insert\",\n    \"key\": \"key\",\n    \"print\": \"print\",\n    \"repeat\": \"repeat\",\n}\ndef on_update_decls(decls):\n    # todo modes?\n    for thing in [\n        \"actions\",",
        "detail": "lang.talon.talon",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "lang.terraform.terraform",
        "description": "lang.terraform.terraform",
        "peekOfCode": "class Actions:\n    def code_terraform_module_block(text: str):\n        \"\"\"Inserts a new module-related block of a given type (e.g. variable, output, provider...)\"\"\"\n    def code_terraform_resource(text: str):\n        \"\"\"Inserts a new resource block with given name\"\"\"\n    def code_terraform_data_source(text: str):\n        \"\"\"Inserts a new data block with given name\"\"\"\n@ctx.action_class(\"user\")\nclass UserActions:\n    def code_terraform_module_block(text: str):",
        "detail": "lang.terraform.terraform",
        "documentation": {}
    },
    {
        "label": "UserActions",
        "kind": 6,
        "importPath": "lang.terraform.terraform",
        "description": "lang.terraform.terraform",
        "peekOfCode": "class UserActions:\n    def code_terraform_module_block(text: str):\n        actions.user.insert_between(text + ' \"', '\"')\n    def code_terraform_resource(text: str):\n        result = f\"resource \\\"{actions.user.formatted_text(text, 'SNAKE_CASE')}\\\" \\\"\\\"\"\n        actions.insert(result)\n        actions.key(\"left\")\n    def code_terraform_data_source(text: str):\n        result = f\"data \\\"{actions.user.formatted_text(text, 'SNAKE_CASE')}\\\" \\\"\\\"\"\n        actions.insert(result)",
        "detail": "lang.terraform.terraform",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "lang.terraform.terraform",
        "description": "lang.terraform.terraform",
        "peekOfCode": "ctx = Context()\nmod = Module()\nctx.matches = r\"\"\"\ntag: user.terraform\n\"\"\"\ntypes = {\n    \"string\": \"string\",\n    \"number\": \"number\",\n    \"bool\": \"bool\",\n    \"list\": \"list\",",
        "detail": "lang.terraform.terraform",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "lang.terraform.terraform",
        "description": "lang.terraform.terraform",
        "peekOfCode": "mod = Module()\nctx.matches = r\"\"\"\ntag: user.terraform\n\"\"\"\ntypes = {\n    \"string\": \"string\",\n    \"number\": \"number\",\n    \"bool\": \"bool\",\n    \"list\": \"list\",\n    \"map\": \"map\",",
        "detail": "lang.terraform.terraform",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "lang.terraform.terraform",
        "description": "lang.terraform.terraform",
        "peekOfCode": "ctx.matches = r\"\"\"\ntag: user.terraform\n\"\"\"\ntypes = {\n    \"string\": \"string\",\n    \"number\": \"number\",\n    \"bool\": \"bool\",\n    \"list\": \"list\",\n    \"map\": \"map\",\n    \"null\": \"null\",",
        "detail": "lang.terraform.terraform",
        "documentation": {}
    },
    {
        "label": "types",
        "kind": 5,
        "importPath": "lang.terraform.terraform",
        "description": "lang.terraform.terraform",
        "peekOfCode": "types = {\n    \"string\": \"string\",\n    \"number\": \"number\",\n    \"bool\": \"bool\",\n    \"list\": \"list\",\n    \"map\": \"map\",\n    \"null\": \"null\",\n}\nctx.lists[\"user.code_type\"] = types\ncommon_properties = {",
        "detail": "lang.terraform.terraform",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"user.code_type\"]",
        "kind": 5,
        "importPath": "lang.terraform.terraform",
        "description": "lang.terraform.terraform",
        "peekOfCode": "ctx.lists[\"user.code_type\"] = types\ncommon_properties = {\n    \"name\": \"name\",\n    \"type\": \"type\",\n    \"description\": \"description\",\n    \"default\": \"default\",\n    \"for each\": \"for_each\",\n    \"count\": \"count\",\n    \"prevent destroy\": \"prevent_destroy\",\n    \"nullable\": \"nullable\",",
        "detail": "lang.terraform.terraform",
        "documentation": {}
    },
    {
        "label": "common_properties",
        "kind": 5,
        "importPath": "lang.terraform.terraform",
        "description": "lang.terraform.terraform",
        "peekOfCode": "common_properties = {\n    \"name\": \"name\",\n    \"type\": \"type\",\n    \"description\": \"description\",\n    \"default\": \"default\",\n    \"for each\": \"for_each\",\n    \"count\": \"count\",\n    \"prevent destroy\": \"prevent_destroy\",\n    \"nullable\": \"nullable\",\n    \"sensitive\": \"sensitive\",",
        "detail": "lang.terraform.terraform",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"self.terraform_common_property\"]",
        "kind": 5,
        "importPath": "lang.terraform.terraform",
        "description": "lang.terraform.terraform",
        "peekOfCode": "ctx.lists[\"self.terraform_common_property\"] = common_properties\nmodule_blocks = {\n    \"variable\": \"variable\",\n    \"output\": \"output\",\n    \"provider\": \"provider\",\n    \"module\": \"module\",\n}\nmod.list(\"terraform_module_block\", desc=\"Simple Terraform Block\")\nctx.lists[\"self.terraform_module_block\"] = module_blocks\n@mod.action_class",
        "detail": "lang.terraform.terraform",
        "documentation": {}
    },
    {
        "label": "module_blocks",
        "kind": 5,
        "importPath": "lang.terraform.terraform",
        "description": "lang.terraform.terraform",
        "peekOfCode": "module_blocks = {\n    \"variable\": \"variable\",\n    \"output\": \"output\",\n    \"provider\": \"provider\",\n    \"module\": \"module\",\n}\nmod.list(\"terraform_module_block\", desc=\"Simple Terraform Block\")\nctx.lists[\"self.terraform_module_block\"] = module_blocks\n@mod.action_class\nclass Actions:",
        "detail": "lang.terraform.terraform",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"self.terraform_module_block\"]",
        "kind": 5,
        "importPath": "lang.terraform.terraform",
        "description": "lang.terraform.terraform",
        "peekOfCode": "ctx.lists[\"self.terraform_module_block\"] = module_blocks\n@mod.action_class\nclass Actions:\n    def code_terraform_module_block(text: str):\n        \"\"\"Inserts a new module-related block of a given type (e.g. variable, output, provider...)\"\"\"\n    def code_terraform_resource(text: str):\n        \"\"\"Inserts a new resource block with given name\"\"\"\n    def code_terraform_data_source(text: str):\n        \"\"\"Inserts a new data block with given name\"\"\"\n@ctx.action_class(\"user\")",
        "detail": "lang.terraform.terraform",
        "documentation": {}
    },
    {
        "label": "UserActions",
        "kind": 6,
        "importPath": "lang.typescript.typescript",
        "description": "lang.typescript.typescript",
        "peekOfCode": "class UserActions:\n    def code_private_function(text: str):\n        \"\"\"Inserts private function declaration\"\"\"\n        result = \"private function {}\".format(\n            actions.user.formatted_text(\n                text, settings.get(\"user.code_private_function_formatter\")\n            )\n        )\n        actions.user.code_insert_function(result, None)\n    def code_protected_function(text: str):",
        "detail": "lang.typescript.typescript",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "lang.typescript.typescript",
        "description": "lang.typescript.typescript",
        "peekOfCode": "ctx = Context()\nctx.matches = r\"\"\"\ntag: user.typescript\n\"\"\"\nctx.lists[\"user.code_type\"] = {\n    \"boolean\": \"boolean\",\n    \"integer\": \"int\",\n    \"string\": \"string\",\n    \"null\": \"null\",\n    \"undefined\": \"undefined\",",
        "detail": "lang.typescript.typescript",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "lang.typescript.typescript",
        "description": "lang.typescript.typescript",
        "peekOfCode": "ctx.matches = r\"\"\"\ntag: user.typescript\n\"\"\"\nctx.lists[\"user.code_type\"] = {\n    \"boolean\": \"boolean\",\n    \"integer\": \"int\",\n    \"string\": \"string\",\n    \"null\": \"null\",\n    \"undefined\": \"undefined\",\n    \"number\": \"number\",",
        "detail": "lang.typescript.typescript",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"user.code_type\"]",
        "kind": 5,
        "importPath": "lang.typescript.typescript",
        "description": "lang.typescript.typescript",
        "peekOfCode": "ctx.lists[\"user.code_type\"] = {\n    \"boolean\": \"boolean\",\n    \"integer\": \"int\",\n    \"string\": \"string\",\n    \"null\": \"null\",\n    \"undefined\": \"undefined\",\n    \"number\": \"number\",\n    \"any\": \"any\",\n}\n@ctx.action_class(\"user\")",
        "detail": "lang.typescript.typescript",
        "documentation": {}
    },
    {
        "label": "UserActions",
        "kind": 6,
        "importPath": "lang.vimscript.vimscript",
        "description": "lang.vimscript.vimscript",
        "peekOfCode": "class UserActions:\n    def code_operator_assignment():\n        actions.auto_insert(\" = \")\n    def code_operator_subtraction():\n        actions.auto_insert(\" - \")\n    def code_operator_subtraction_assignment():\n        actions.auto_insert(\" -= \")\n    def code_operator_addition():\n        actions.auto_insert(\" + \")\n    def code_operator_addition_assignment():",
        "detail": "lang.vimscript.vimscript",
        "documentation": {}
    },
    {
        "label": "vimscript_functions",
        "kind": 2,
        "importPath": "lang.vimscript.vimscript",
        "description": "lang.vimscript.vimscript",
        "peekOfCode": "def vimscript_functions(m) -> str:\n    \"Returns a string\"\n    return m.vimscript_functions\n@mod.capture(rule=\"{self.vimscript_scope}\")\ndef vimscript_scope(m) -> str:\n    \"Returns a string\"\n    return m.vimscript_scope\n@ctx.action_class(\"user\")\nclass UserActions:\n    def code_operator_assignment():",
        "detail": "lang.vimscript.vimscript",
        "documentation": {}
    },
    {
        "label": "vimscript_scope",
        "kind": 2,
        "importPath": "lang.vimscript.vimscript",
        "description": "lang.vimscript.vimscript",
        "peekOfCode": "def vimscript_scope(m) -> str:\n    \"Returns a string\"\n    return m.vimscript_scope\n@ctx.action_class(\"user\")\nclass UserActions:\n    def code_operator_assignment():\n        actions.auto_insert(\" = \")\n    def code_operator_subtraction():\n        actions.auto_insert(\" - \")\n    def code_operator_subtraction_assignment():",
        "detail": "lang.vimscript.vimscript",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "lang.vimscript.vimscript",
        "description": "lang.vimscript.vimscript",
        "peekOfCode": "mod = Module()\nctx = Context()\nctx.matches = r\"\"\"\ntag: user.vimscript\n\"\"\"\nctx.lists[\"self.vimscript_functions\"] = {\n    \"string len\": \"strlen\",\n    \"get line\": \"getline\",\n    \"set line\": \"setline\",\n    \"length\": \"len\",",
        "detail": "lang.vimscript.vimscript",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "lang.vimscript.vimscript",
        "description": "lang.vimscript.vimscript",
        "peekOfCode": "ctx = Context()\nctx.matches = r\"\"\"\ntag: user.vimscript\n\"\"\"\nctx.lists[\"self.vimscript_functions\"] = {\n    \"string len\": \"strlen\",\n    \"get line\": \"getline\",\n    \"set line\": \"setline\",\n    \"length\": \"len\",\n}",
        "detail": "lang.vimscript.vimscript",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "lang.vimscript.vimscript",
        "description": "lang.vimscript.vimscript",
        "peekOfCode": "ctx.matches = r\"\"\"\ntag: user.vimscript\n\"\"\"\nctx.lists[\"self.vimscript_functions\"] = {\n    \"string len\": \"strlen\",\n    \"get line\": \"getline\",\n    \"set line\": \"setline\",\n    \"length\": \"len\",\n}\nctx.lists[\"self.vimscript_scope\"] = {",
        "detail": "lang.vimscript.vimscript",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"self.vimscript_functions\"]",
        "kind": 5,
        "importPath": "lang.vimscript.vimscript",
        "description": "lang.vimscript.vimscript",
        "peekOfCode": "ctx.lists[\"self.vimscript_functions\"] = {\n    \"string len\": \"strlen\",\n    \"get line\": \"getline\",\n    \"set line\": \"setline\",\n    \"length\": \"len\",\n}\nctx.lists[\"self.vimscript_scope\"] = {\n    \"argument\": \"a:\",\n    \"arg\": \"a:\",\n    \"buffer\": \"b:\",",
        "detail": "lang.vimscript.vimscript",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"self.vimscript_scope\"]",
        "kind": 5,
        "importPath": "lang.vimscript.vimscript",
        "description": "lang.vimscript.vimscript",
        "peekOfCode": "ctx.lists[\"self.vimscript_scope\"] = {\n    \"argument\": \"a:\",\n    \"arg\": \"a:\",\n    \"buffer\": \"b:\",\n    \"buf\": \"b:\",\n    \"window\": \"w:\",\n    \"win\": \"w:\",\n    \"tab\": \"t:\",\n    \"special\": \"v:\",\n    \"global\": \"g:\",",
        "detail": "lang.vimscript.vimscript",
        "documentation": {}
    },
    {
        "label": "pre_phrase",
        "kind": 2,
        "importPath": "plugin.cancel.cancel",
        "description": "plugin.cancel.cancel",
        "peekOfCode": "def pre_phrase(d):\n    n = len(cancel_phrase)\n    if \"text\" in d and \"parsed\" in d:\n        before, after = d[\"text\"][:-n], d[\"text\"][-n:]\n        if after != cancel_phrase:\n            return\n        # cancel the command\n        d[\"parsed\"]._sequence = []\n        actions.app.notify(f\"Command canceled: {' '.join(before)!r}\")\nspeech_system.register(\"pre:phrase\", pre_phrase)",
        "detail": "plugin.cancel.cancel",
        "documentation": {}
    },
    {
        "label": "cancel_phrase",
        "kind": 5,
        "importPath": "plugin.cancel.cancel",
        "description": "plugin.cancel.cancel",
        "peekOfCode": "cancel_phrase = \"cancel cancel\".split()\ndef pre_phrase(d):\n    n = len(cancel_phrase)\n    if \"text\" in d and \"parsed\" in d:\n        before, after = d[\"text\"][:-n], d[\"text\"][-n:]\n        if after != cancel_phrase:\n            return\n        # cancel the command\n        d[\"parsed\"]._sequence = []\n        actions.app.notify(f\"Command canceled: {' '.join(before)!r}\")",
        "detail": "plugin.cancel.cancel",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "plugin.command_history.command_history",
        "description": "plugin.command_history.command_history",
        "peekOfCode": "class Actions:\n    def history_toggle():\n        \"\"\"Toggles viewing the history\"\"\"\n        if gui.showing:\n            gui.hide()\n        else:\n            gui.show()\n    def history_enable():\n        \"\"\"Enables the history\"\"\"\n        gui.show()",
        "detail": "plugin.command_history.command_history",
        "documentation": {}
    },
    {
        "label": "on_phrase",
        "kind": 2,
        "importPath": "plugin.command_history.command_history",
        "description": "plugin.command_history.command_history",
        "peekOfCode": "def on_phrase(j):\n    global history\n    words = j.get(\"text\")\n    text = actions.user.history_transform_phrase_text(words)\n    if text is not None:\n        history.append(text)\n        history = history[-setting_command_history_size.get() :]\n# todo: dynamic rect?\n@imgui.open(y=0)\ndef gui(gui: imgui.GUI):",
        "detail": "plugin.command_history.command_history",
        "documentation": {}
    },
    {
        "label": "gui",
        "kind": 2,
        "importPath": "plugin.command_history.command_history",
        "description": "plugin.command_history.command_history",
        "peekOfCode": "def gui(gui: imgui.GUI):\n    global history\n    gui.text(\"Command History\")\n    gui.line()\n    text = (\n        history[:] if hist_more else history[-setting_command_history_display.get() :]\n    )\n    for line in text:\n        gui.text(line)\n    gui.spacer()",
        "detail": "plugin.command_history.command_history",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "plugin.command_history.command_history",
        "description": "plugin.command_history.command_history",
        "peekOfCode": "mod = Module()\nsetting_command_history_size = mod.setting(\"command_history_size\", int, default=50)\nsetting_command_history_display = mod.setting(\n    \"command_history_display\", int, default=10\n)\nhist_more = False\nhistory = []\ndef on_phrase(j):\n    global history\n    words = j.get(\"text\")",
        "detail": "plugin.command_history.command_history",
        "documentation": {}
    },
    {
        "label": "setting_command_history_size",
        "kind": 5,
        "importPath": "plugin.command_history.command_history",
        "description": "plugin.command_history.command_history",
        "peekOfCode": "setting_command_history_size = mod.setting(\"command_history_size\", int, default=50)\nsetting_command_history_display = mod.setting(\n    \"command_history_display\", int, default=10\n)\nhist_more = False\nhistory = []\ndef on_phrase(j):\n    global history\n    words = j.get(\"text\")\n    text = actions.user.history_transform_phrase_text(words)",
        "detail": "plugin.command_history.command_history",
        "documentation": {}
    },
    {
        "label": "setting_command_history_display",
        "kind": 5,
        "importPath": "plugin.command_history.command_history",
        "description": "plugin.command_history.command_history",
        "peekOfCode": "setting_command_history_display = mod.setting(\n    \"command_history_display\", int, default=10\n)\nhist_more = False\nhistory = []\ndef on_phrase(j):\n    global history\n    words = j.get(\"text\")\n    text = actions.user.history_transform_phrase_text(words)\n    if text is not None:",
        "detail": "plugin.command_history.command_history",
        "documentation": {}
    },
    {
        "label": "hist_more",
        "kind": 5,
        "importPath": "plugin.command_history.command_history",
        "description": "plugin.command_history.command_history",
        "peekOfCode": "hist_more = False\nhistory = []\ndef on_phrase(j):\n    global history\n    words = j.get(\"text\")\n    text = actions.user.history_transform_phrase_text(words)\n    if text is not None:\n        history.append(text)\n        history = history[-setting_command_history_size.get() :]\n# todo: dynamic rect?",
        "detail": "plugin.command_history.command_history",
        "documentation": {}
    },
    {
        "label": "history",
        "kind": 5,
        "importPath": "plugin.command_history.command_history",
        "description": "plugin.command_history.command_history",
        "peekOfCode": "history = []\ndef on_phrase(j):\n    global history\n    words = j.get(\"text\")\n    text = actions.user.history_transform_phrase_text(words)\n    if text is not None:\n        history.append(text)\n        history = history[-setting_command_history_size.get() :]\n# todo: dynamic rect?\n@imgui.open(y=0)",
        "detail": "plugin.command_history.command_history",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "plugin.datetimeinsert.datetimeinsert",
        "description": "plugin.datetimeinsert.datetimeinsert",
        "peekOfCode": "class Actions:\n    def time_format(fmt: str = None) -> str:\n        \"\"\"Return the current time, formatted.\n        fmt: strftime()-style format string, defaults to ISO format.\"\"\"\n        now = datetime.datetime.now()\n        if fmt is None:\n            return now.isoformat()\n        return now.strftime(fmt)\n    def time_format_utc(fmt: str = None) -> str:\n        \"\"\"Return the current UTC time, formatted.",
        "detail": "plugin.datetimeinsert.datetimeinsert",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "plugin.datetimeinsert.datetimeinsert",
        "description": "plugin.datetimeinsert.datetimeinsert",
        "peekOfCode": "mod = Module()\n@mod.action_class\nclass Actions:\n    def time_format(fmt: str = None) -> str:\n        \"\"\"Return the current time, formatted.\n        fmt: strftime()-style format string, defaults to ISO format.\"\"\"\n        now = datetime.datetime.now()\n        if fmt is None:\n            return now.isoformat()\n        return now.strftime(fmt)",
        "detail": "plugin.datetimeinsert.datetimeinsert",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "plugin.desktops.desktops",
        "description": "plugin.desktops.desktops",
        "peekOfCode": "class Actions:\n    def desktop(number: int):\n        \"\"\"change the current desktop\"\"\"\n        app.notify(\"Not supported on this operating system\")\n    def desktop_show():\n        \"\"\"shows the current desktops\"\"\"\n        app.notify(\"Not supported on this operating system\")\n    def desktop_next():\n        \"\"\"move to next desktop\"\"\"\n        app.notify(\"Not supported on this operating system\")",
        "detail": "plugin.desktops.desktops",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "plugin.desktops.desktops",
        "description": "plugin.desktops.desktops",
        "peekOfCode": "mod = Module()\n@mod.action_class\nclass Actions:\n    def desktop(number: int):\n        \"\"\"change the current desktop\"\"\"\n        app.notify(\"Not supported on this operating system\")\n    def desktop_show():\n        \"\"\"shows the current desktops\"\"\"\n        app.notify(\"Not supported on this operating system\")\n    def desktop_next():",
        "detail": "plugin.desktops.desktops",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "plugin.desktops.desktops_linux",
        "description": "plugin.desktops.desktops_linux",
        "peekOfCode": "class Actions:\n    def desktop(number: int):\n        ui.switch_workspace(number)\n    def desktop_next():\n        actions.user.desktop(ui.active_workspace() + 1)\n    def desktop_last():\n        actions.user.desktop(ui.active_workspace() - 1)\n    def desktop_show():\n        actions.key(\"super\")\n    def window_move_desktop(desktop_number: int):",
        "detail": "plugin.desktops.desktops_linux",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "plugin.desktops.desktops_linux",
        "description": "plugin.desktops.desktops_linux",
        "peekOfCode": "ctx = Context()\nctx.matches = r\"\"\"\nos: linux\n\"\"\"\n@ctx.action_class(\"user\")\nclass Actions:\n    def desktop(number: int):\n        ui.switch_workspace(number)\n    def desktop_next():\n        actions.user.desktop(ui.active_workspace() + 1)",
        "detail": "plugin.desktops.desktops_linux",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "plugin.desktops.desktops_linux",
        "description": "plugin.desktops.desktops_linux",
        "peekOfCode": "ctx.matches = r\"\"\"\nos: linux\n\"\"\"\n@ctx.action_class(\"user\")\nclass Actions:\n    def desktop(number: int):\n        ui.switch_workspace(number)\n    def desktop_next():\n        actions.user.desktop(ui.active_workspace() + 1)\n    def desktop_last():",
        "detail": "plugin.desktops.desktops_linux",
        "documentation": {}
    },
    {
        "label": "MacActions",
        "kind": 6,
        "importPath": "plugin.desktops.desktops_mac",
        "description": "plugin.desktops.desktops_mac",
        "peekOfCode": "class MacActions:\n    def desktop(number: int):\n        if number < 10:\n            actions.key(f\"ctrl-{number}\")\n    def desktop_next():\n        actions.key(\"ctrl-right\")\n    def desktop_last():\n        actions.key(\"ctrl-left\")\n    def desktop_show():\n        actions.key(\"ctrl-up\")",
        "detail": "plugin.desktops.desktops_mac",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "plugin.desktops.desktops_mac",
        "description": "plugin.desktops.desktops_mac",
        "peekOfCode": "ctx = Context()\nctx.matches = r\"\"\"\nos: mac\n\"\"\"\n@contextlib.contextmanager\ndef _drag_window_mac(win=None):\n    if win is None:\n        win = ui.active_window()\n    fs = win.children.find(AXSubrole=\"AXFullScreenButton\")[0]\n    rect = fs.AXFrame[\"$rect2d\"]",
        "detail": "plugin.desktops.desktops_mac",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "plugin.desktops.desktops_mac",
        "description": "plugin.desktops.desktops_mac",
        "peekOfCode": "ctx.matches = r\"\"\"\nos: mac\n\"\"\"\n@contextlib.contextmanager\ndef _drag_window_mac(win=None):\n    if win is None:\n        win = ui.active_window()\n    fs = win.children.find(AXSubrole=\"AXFullScreenButton\")[0]\n    rect = fs.AXFrame[\"$rect2d\"]\n    x = rect[\"x\"] + rect[\"width\"] + 5",
        "detail": "plugin.desktops.desktops_mac",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "plugin.desktops.desktops_win",
        "description": "plugin.desktops.desktops_win",
        "peekOfCode": "class Actions:\n    # def desktop(number: int):\n    def desktop_next():\n        actions.key(\"super-ctrl-right\")\n    def desktop_last():\n        actions.key(\"super-ctrl-left\")\n    def desktop_show():\n        actions.key(\"super-tab\")\n    # def window_move_desktop_left():\n    # def window_move_desktop_right():",
        "detail": "plugin.desktops.desktops_win",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "plugin.desktops.desktops_win",
        "description": "plugin.desktops.desktops_win",
        "peekOfCode": "ctx = Context()\nctx.matches = r\"\"\"\nos: windows\n\"\"\"\n@ctx.action_class(\"user\")\nclass Actions:\n    # def desktop(number: int):\n    def desktop_next():\n        actions.key(\"super-ctrl-right\")\n    def desktop_last():",
        "detail": "plugin.desktops.desktops_win",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "plugin.desktops.desktops_win",
        "description": "plugin.desktops.desktops_win",
        "peekOfCode": "ctx.matches = r\"\"\"\nos: windows\n\"\"\"\n@ctx.action_class(\"user\")\nclass Actions:\n    # def desktop(number: int):\n    def desktop_next():\n        actions.key(\"super-ctrl-right\")\n    def desktop_last():\n        actions.key(\"super-ctrl-left\")",
        "detail": "plugin.desktops.desktops_win",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "plugin.draft_editor.draft_editor",
        "description": "plugin.draft_editor.draft_editor",
        "peekOfCode": "class Actions:\n    def draft_editor_open():\n        \"\"\"Open draft editor\"\"\"\n        global original_window\n        original_window = ui.active_window()\n        editor_app = get_editor_app()\n        selected_text = actions.edit.selected_text()\n        actions.user.switcher_focus_app(editor_app)\n        # Wait additional time for talon context to update.\n        actions.sleep(\"200ms\")",
        "detail": "plugin.draft_editor.draft_editor",
        "documentation": {}
    },
    {
        "label": "add_tag",
        "kind": 2,
        "importPath": "plugin.draft_editor.draft_editor",
        "description": "plugin.draft_editor.draft_editor",
        "peekOfCode": "def add_tag(tag: str):\n    tags.add(tag)\n    ctx.tags = list(tags)\ndef remove_tag(tag: str):\n    tags.discard(tag)\n    ctx.tags = list(tags)\ndefault_names = [\"Visual Studio Code\", \"Code\", \"VSCodium\", \"Codium\", \"code-oss\"]\nsetting_editor_names = mod.setting(\n    \"draft_editor\",\n    type=str,",
        "detail": "plugin.draft_editor.draft_editor",
        "documentation": {}
    },
    {
        "label": "remove_tag",
        "kind": 2,
        "importPath": "plugin.draft_editor.draft_editor",
        "description": "plugin.draft_editor.draft_editor",
        "peekOfCode": "def remove_tag(tag: str):\n    tags.discard(tag)\n    ctx.tags = list(tags)\ndefault_names = [\"Visual Studio Code\", \"Code\", \"VSCodium\", \"Codium\", \"code-oss\"]\nsetting_editor_names = mod.setting(\n    \"draft_editor\",\n    type=str,\n    default=None,\n    desc=\"List of application names to use for draft editor\",\n)",
        "detail": "plugin.draft_editor.draft_editor",
        "documentation": {}
    },
    {
        "label": "get_editor_names",
        "kind": 2,
        "importPath": "plugin.draft_editor.draft_editor",
        "description": "plugin.draft_editor.draft_editor",
        "peekOfCode": "def get_editor_names():\n    names_csv = setting_editor_names.get()\n    return names_csv.split(\", \") if names_csv else default_names\n@mod.scope\ndef scope():\n    editor_names = get_editor_names()\n    for app in ui.apps(background=False):\n        if app.name in editor_names:\n            return {\"draft_editor_running\": True}\n    return {\"draft_editor_running\": False}",
        "detail": "plugin.draft_editor.draft_editor",
        "documentation": {}
    },
    {
        "label": "scope",
        "kind": 2,
        "importPath": "plugin.draft_editor.draft_editor",
        "description": "plugin.draft_editor.draft_editor",
        "peekOfCode": "def scope():\n    editor_names = get_editor_names()\n    for app in ui.apps(background=False):\n        if app.name in editor_names:\n            return {\"draft_editor_running\": True}\n    return {\"draft_editor_running\": False}\ndef handle_app_activate(app):\n    if app.name in get_editor_names():\n        add_tag(\"user.draft_editor_app_focused\")\n    else:",
        "detail": "plugin.draft_editor.draft_editor",
        "documentation": {}
    },
    {
        "label": "handle_app_activate",
        "kind": 2,
        "importPath": "plugin.draft_editor.draft_editor",
        "description": "plugin.draft_editor.draft_editor",
        "peekOfCode": "def handle_app_activate(app):\n    if app.name in get_editor_names():\n        add_tag(\"user.draft_editor_app_focused\")\n    else:\n        remove_tag(\"user.draft_editor_app_focused\")\nui.register(\"app_launch\", scope.update)\nui.register(\"app_close\", scope.update)\nui.register(\"app_activate\", handle_app_activate)\noriginal_window = None\nlast_draft = None",
        "detail": "plugin.draft_editor.draft_editor",
        "documentation": {}
    },
    {
        "label": "get_editor_app",
        "kind": 2,
        "importPath": "plugin.draft_editor.draft_editor",
        "description": "plugin.draft_editor.draft_editor",
        "peekOfCode": "def get_editor_app() -> ui.App:\n    editor_names = get_editor_names()\n    for app in ui.apps(background=False):\n        if app.name in editor_names:\n            return app\n    raise RuntimeError(\"Draft editor is not running\")\ndef close_editor(submit_draft: bool):\n    global last_draft\n    remove_tag(\"user.draft_editor_active\")\n    actions.edit.select_all()",
        "detail": "plugin.draft_editor.draft_editor",
        "documentation": {}
    },
    {
        "label": "close_editor",
        "kind": 2,
        "importPath": "plugin.draft_editor.draft_editor",
        "description": "plugin.draft_editor.draft_editor",
        "peekOfCode": "def close_editor(submit_draft: bool):\n    global last_draft\n    remove_tag(\"user.draft_editor_active\")\n    actions.edit.select_all()\n    selected_text = actions.edit.selected_text()\n    actions.edit.delete()\n    actions.app.tab_close()\n    actions.user.switcher_focus_window(original_window)\n    actions.sleep(\"300ms\")\n    if submit_draft:",
        "detail": "plugin.draft_editor.draft_editor",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "plugin.draft_editor.draft_editor",
        "description": "plugin.draft_editor.draft_editor",
        "peekOfCode": "mod = Module()\nmod.tag(\"draft_editor_active\", \"Indicates whether the draft editor has been activated\")\nmod.tag(\n    \"draft_editor_app_focused\",\n    \"Indicates that the draft editor app currently has focus\",\n)\nctx = Context()\ntags: set[str] = set()\ndef add_tag(tag: str):\n    tags.add(tag)",
        "detail": "plugin.draft_editor.draft_editor",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "plugin.draft_editor.draft_editor",
        "description": "plugin.draft_editor.draft_editor",
        "peekOfCode": "ctx = Context()\ntags: set[str] = set()\ndef add_tag(tag: str):\n    tags.add(tag)\n    ctx.tags = list(tags)\ndef remove_tag(tag: str):\n    tags.discard(tag)\n    ctx.tags = list(tags)\ndefault_names = [\"Visual Studio Code\", \"Code\", \"VSCodium\", \"Codium\", \"code-oss\"]\nsetting_editor_names = mod.setting(",
        "detail": "plugin.draft_editor.draft_editor",
        "documentation": {}
    },
    {
        "label": "default_names",
        "kind": 5,
        "importPath": "plugin.draft_editor.draft_editor",
        "description": "plugin.draft_editor.draft_editor",
        "peekOfCode": "default_names = [\"Visual Studio Code\", \"Code\", \"VSCodium\", \"Codium\", \"code-oss\"]\nsetting_editor_names = mod.setting(\n    \"draft_editor\",\n    type=str,\n    default=None,\n    desc=\"List of application names to use for draft editor\",\n)\ndef get_editor_names():\n    names_csv = setting_editor_names.get()\n    return names_csv.split(\", \") if names_csv else default_names",
        "detail": "plugin.draft_editor.draft_editor",
        "documentation": {}
    },
    {
        "label": "setting_editor_names",
        "kind": 5,
        "importPath": "plugin.draft_editor.draft_editor",
        "description": "plugin.draft_editor.draft_editor",
        "peekOfCode": "setting_editor_names = mod.setting(\n    \"draft_editor\",\n    type=str,\n    default=None,\n    desc=\"List of application names to use for draft editor\",\n)\ndef get_editor_names():\n    names_csv = setting_editor_names.get()\n    return names_csv.split(\", \") if names_csv else default_names\n@mod.scope",
        "detail": "plugin.draft_editor.draft_editor",
        "documentation": {}
    },
    {
        "label": "original_window",
        "kind": 5,
        "importPath": "plugin.draft_editor.draft_editor",
        "description": "plugin.draft_editor.draft_editor",
        "peekOfCode": "original_window = None\nlast_draft = None\n@mod.action_class\nclass Actions:\n    def draft_editor_open():\n        \"\"\"Open draft editor\"\"\"\n        global original_window\n        original_window = ui.active_window()\n        editor_app = get_editor_app()\n        selected_text = actions.edit.selected_text()",
        "detail": "plugin.draft_editor.draft_editor",
        "documentation": {}
    },
    {
        "label": "last_draft",
        "kind": 5,
        "importPath": "plugin.draft_editor.draft_editor",
        "description": "plugin.draft_editor.draft_editor",
        "peekOfCode": "last_draft = None\n@mod.action_class\nclass Actions:\n    def draft_editor_open():\n        \"\"\"Open draft editor\"\"\"\n        global original_window\n        original_window = ui.active_window()\n        editor_app = get_editor_app()\n        selected_text = actions.edit.selected_text()\n        actions.user.switcher_focus_app(editor_app)",
        "detail": "plugin.draft_editor.draft_editor",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "plugin.macro.macro",
        "description": "plugin.macro.macro",
        "peekOfCode": "class Actions:\n    def macro_record():\n        \"\"\"Begin recording a new voice command macro.\"\"\"\n        global macro\n        global recording\n        macro = []\n        recording = True\n    def macro_stop():\n        \"\"\"Stop recording the macro.\"\"\"\n        global recording",
        "detail": "plugin.macro.macro",
        "documentation": {}
    },
    {
        "label": "fn",
        "kind": 2,
        "importPath": "plugin.macro.macro",
        "description": "plugin.macro.macro",
        "peekOfCode": "def fn(d):\n    if not recording or \"parsed\" not in d:\n        return\n    actions.user.macro_append_command(d[\"parsed\"]._unmapped)\nspeech_system.register(\"pre:phrase\", fn)",
        "detail": "plugin.macro.macro",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "plugin.macro.macro",
        "description": "plugin.macro.macro",
        "peekOfCode": "mod = Module()\nmacro = []\nrecording = False\n@mod.action_class\nclass Actions:\n    def macro_record():\n        \"\"\"Begin recording a new voice command macro.\"\"\"\n        global macro\n        global recording\n        macro = []",
        "detail": "plugin.macro.macro",
        "documentation": {}
    },
    {
        "label": "macro",
        "kind": 5,
        "importPath": "plugin.macro.macro",
        "description": "plugin.macro.macro",
        "peekOfCode": "macro = []\nrecording = False\n@mod.action_class\nclass Actions:\n    def macro_record():\n        \"\"\"Begin recording a new voice command macro.\"\"\"\n        global macro\n        global recording\n        macro = []\n        recording = True",
        "detail": "plugin.macro.macro",
        "documentation": {}
    },
    {
        "label": "recording",
        "kind": 5,
        "importPath": "plugin.macro.macro",
        "description": "plugin.macro.macro",
        "peekOfCode": "recording = False\n@mod.action_class\nclass Actions:\n    def macro_record():\n        \"\"\"Begin recording a new voice command macro.\"\"\"\n        global macro\n        global recording\n        macro = []\n        recording = True\n    def macro_stop():",
        "detail": "plugin.macro.macro",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "plugin.media.media",
        "description": "plugin.media.media",
        "peekOfCode": "class Actions:\n    def play_pause():\n        \"\"\"Plays or pauses media\"\"\"\n        if app.platform == \"windows\":\n            actions.key(\"play_pause\")\n        else:\n            actions.key(\"play\")",
        "detail": "plugin.media.media",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "plugin.media.media",
        "description": "plugin.media.media",
        "peekOfCode": "mod = Module()\n@mod.action_class\nclass Actions:\n    def play_pause():\n        \"\"\"Plays or pauses media\"\"\"\n        if app.platform == \"windows\":\n            actions.key(\"play_pause\")\n        else:\n            actions.key(\"play\")",
        "detail": "plugin.media.media",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "plugin.microphone_selection.microphone_selection",
        "description": "plugin.microphone_selection.microphone_selection",
        "peekOfCode": "class Actions:\n    def microphone_selection_toggle():\n        \"\"\"Show GUI for choosing the Talon microphone\"\"\"\n        if gui.showing:\n            gui.hide()\n        else:\n            update_microphone_list()\n            gui.show()\n    def microphone_selection_hide():\n        \"\"\"Hide the microphone selection GUI\"\"\"",
        "detail": "plugin.microphone_selection.microphone_selection",
        "documentation": {}
    },
    {
        "label": "update_microphone_list",
        "kind": 2,
        "importPath": "plugin.microphone_selection.microphone_selection",
        "description": "plugin.microphone_selection.microphone_selection",
        "peekOfCode": "def update_microphone_list():\n    global microphone_device_list\n    microphone_device_list = [\"None\", \"System Default\"]\n    # On Windows, it's presently necessary to check the state, or\n    # we will get any and every microphone that was ever connected.\n    devices = [\n        dev.name for dev in ctx.inputs() if dev.state == cubeb.DeviceState.ENABLED\n    ]\n    devices.sort()\n    microphone_device_list += devices",
        "detail": "plugin.microphone_selection.microphone_selection",
        "documentation": {}
    },
    {
        "label": "devices_changed",
        "kind": 2,
        "importPath": "plugin.microphone_selection.microphone_selection",
        "description": "plugin.microphone_selection.microphone_selection",
        "peekOfCode": "def devices_changed(device_type):\n    update_microphone_list()\n@imgui.open()\ndef gui(gui: imgui.GUI):\n    gui.text(\"Select a Microphone\")\n    gui.line()\n    for index, item in enumerate(microphone_device_list, 1):\n        if gui.button(f\"{index}. {item}\"):\n            actions.user.microphone_select(index)\n    gui.spacer()",
        "detail": "plugin.microphone_selection.microphone_selection",
        "documentation": {}
    },
    {
        "label": "gui",
        "kind": 2,
        "importPath": "plugin.microphone_selection.microphone_selection",
        "description": "plugin.microphone_selection.microphone_selection",
        "peekOfCode": "def gui(gui: imgui.GUI):\n    gui.text(\"Select a Microphone\")\n    gui.line()\n    for index, item in enumerate(microphone_device_list, 1):\n        if gui.button(f\"{index}. {item}\"):\n            actions.user.microphone_select(index)\n    gui.spacer()\n    if gui.button(\"Microphone close\"):\n        actions.user.microphone_selection_hide()\n@mod.action_class",
        "detail": "plugin.microphone_selection.microphone_selection",
        "documentation": {}
    },
    {
        "label": "on_ready",
        "kind": 2,
        "importPath": "plugin.microphone_selection.microphone_selection",
        "description": "plugin.microphone_selection.microphone_selection",
        "peekOfCode": "def on_ready():\n    ctx.register(\"devices_changed\", devices_changed)\n    update_microphone_list()\napp.register(\"ready\", on_ready)",
        "detail": "plugin.microphone_selection.microphone_selection",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "plugin.microphone_selection.microphone_selection",
        "description": "plugin.microphone_selection.microphone_selection",
        "peekOfCode": "ctx = cubeb.Context()\nmod = Module()\nmicrophone_device_list = []\n# by convention, None and System Default are listed first\n# to match the Talon context menu.\ndef update_microphone_list():\n    global microphone_device_list\n    microphone_device_list = [\"None\", \"System Default\"]\n    # On Windows, it's presently necessary to check the state, or\n    # we will get any and every microphone that was ever connected.",
        "detail": "plugin.microphone_selection.microphone_selection",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "plugin.microphone_selection.microphone_selection",
        "description": "plugin.microphone_selection.microphone_selection",
        "peekOfCode": "mod = Module()\nmicrophone_device_list = []\n# by convention, None and System Default are listed first\n# to match the Talon context menu.\ndef update_microphone_list():\n    global microphone_device_list\n    microphone_device_list = [\"None\", \"System Default\"]\n    # On Windows, it's presently necessary to check the state, or\n    # we will get any and every microphone that was ever connected.\n    devices = [",
        "detail": "plugin.microphone_selection.microphone_selection",
        "documentation": {}
    },
    {
        "label": "microphone_device_list",
        "kind": 5,
        "importPath": "plugin.microphone_selection.microphone_selection",
        "description": "plugin.microphone_selection.microphone_selection",
        "peekOfCode": "microphone_device_list = []\n# by convention, None and System Default are listed first\n# to match the Talon context menu.\ndef update_microphone_list():\n    global microphone_device_list\n    microphone_device_list = [\"None\", \"System Default\"]\n    # On Windows, it's presently necessary to check the state, or\n    # we will get any and every microphone that was ever connected.\n    devices = [\n        dev.name for dev in ctx.inputs() if dev.state == cubeb.DeviceState.ENABLED",
        "detail": "plugin.microphone_selection.microphone_selection",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "plugin.mouse.mouse",
        "description": "plugin.mouse.mouse",
        "peekOfCode": "class Actions:\n    def mouse_show_cursor():\n        \"\"\"Shows the cursor\"\"\"\n        show_cursor_helper(True)\n    def mouse_hide_cursor():\n        \"\"\"Hides the cursor\"\"\"\n        show_cursor_helper(False)\n    def mouse_wake():\n        \"\"\"Enable control mouse, zoom mouse, and disables cursor\"\"\"\n        eye_zoom_mouse.toggle_zoom_mouse(True)",
        "detail": "plugin.mouse.mouse",
        "documentation": {}
    },
    {
        "label": "gui_wheel",
        "kind": 2,
        "importPath": "plugin.mouse.mouse",
        "description": "plugin.mouse.mouse",
        "peekOfCode": "def gui_wheel(gui: imgui.GUI):\n    gui.text(f\"Scroll mode: {continuous_scoll_mode}\")\n    gui.line()\n    if gui.button(\"Wheel Stop [stop scrolling]\"):\n        actions.user.mouse_scroll_stop()\n@mod.action_class\nclass Actions:\n    def mouse_show_cursor():\n        \"\"\"Shows the cursor\"\"\"\n        show_cursor_helper(True)",
        "detail": "plugin.mouse.mouse",
        "documentation": {}
    },
    {
        "label": "show_cursor_helper",
        "kind": 2,
        "importPath": "plugin.mouse.mouse",
        "description": "plugin.mouse.mouse",
        "peekOfCode": "def show_cursor_helper(show):\n    \"\"\"Show/hide the cursor\"\"\"\n    if app.platform == \"windows\":\n        import ctypes\n        import winreg\n        import win32con\n        try:\n            Registrykey = winreg.OpenKey(\n                winreg.HKEY_CURRENT_USER, r\"Control Panel\\Cursors\", 0, winreg.KEY_WRITE\n            )",
        "detail": "plugin.mouse.mouse",
        "documentation": {}
    },
    {
        "label": "on_pop",
        "kind": 2,
        "importPath": "plugin.mouse.mouse",
        "description": "plugin.mouse.mouse",
        "peekOfCode": "def on_pop(active):\n    if setting_mouse_enable_pop_stops_scroll.get() >= 1 and (gaze_job or scroll_job):\n        stop_scroll()\n    elif (\n        not eye_zoom_mouse.zoom_mouse.enabled\n        and eye_mouse.mouse.attached_tracker is not None\n    ):\n        if setting_mouse_enable_pop_click.get() >= 1:\n            ctrl.mouse_click(button=0, hold=16000)\nnoise.register(\"pop\", on_pop)",
        "detail": "plugin.mouse.mouse",
        "documentation": {}
    },
    {
        "label": "mouse_scroll",
        "kind": 2,
        "importPath": "plugin.mouse.mouse",
        "description": "plugin.mouse.mouse",
        "peekOfCode": "def mouse_scroll(amount):\n    def scroll():\n        global scroll_amount\n        if continuous_scoll_mode:\n            if (scroll_amount >= 0) == (amount >= 0):\n                scroll_amount += amount\n            else:\n                scroll_amount = amount\n        actions.mouse_scroll(y=int(amount))\n    return scroll",
        "detail": "plugin.mouse.mouse",
        "documentation": {}
    },
    {
        "label": "scroll_continuous_helper",
        "kind": 2,
        "importPath": "plugin.mouse.mouse",
        "description": "plugin.mouse.mouse",
        "peekOfCode": "def scroll_continuous_helper():\n    global scroll_amount\n    # print(\"scroll_continuous_helper\")\n    if scroll_amount and (\n        eye_zoom_mouse.zoom_mouse.state == eye_zoom_mouse.STATE_IDLE\n    ):  # or eye_zoom_mouse.zoom_mouse.state == eye_zoom_mouse.STATE_SLEEP):\n        actions.mouse_scroll(by_lines=False, y=int(scroll_amount / 10))\ndef start_scroll():\n    global scroll_job\n    scroll_job = cron.interval(\"60ms\", scroll_continuous_helper)",
        "detail": "plugin.mouse.mouse",
        "documentation": {}
    },
    {
        "label": "start_scroll",
        "kind": 2,
        "importPath": "plugin.mouse.mouse",
        "description": "plugin.mouse.mouse",
        "peekOfCode": "def start_scroll():\n    global scroll_job\n    scroll_job = cron.interval(\"60ms\", scroll_continuous_helper)\n    # if eye_zoom_mouse.zoom_mouse.enabled and eye_mouse.mouse.attached_tracker is not None:\n    #    eye_zoom_mouse.zoom_mouse.sleep(True)\ndef gaze_scroll():\n    # print(\"gaze_scroll\")\n    if (\n        eye_zoom_mouse.zoom_mouse.state == eye_zoom_mouse.STATE_IDLE\n    ):  # or eye_zoom_mouse.zoom_mouse.state == eye_zoom_mouse.STATE_SLEEP:",
        "detail": "plugin.mouse.mouse",
        "documentation": {}
    },
    {
        "label": "gaze_scroll",
        "kind": 2,
        "importPath": "plugin.mouse.mouse",
        "description": "plugin.mouse.mouse",
        "peekOfCode": "def gaze_scroll():\n    # print(\"gaze_scroll\")\n    if (\n        eye_zoom_mouse.zoom_mouse.state == eye_zoom_mouse.STATE_IDLE\n    ):  # or eye_zoom_mouse.zoom_mouse.state == eye_zoom_mouse.STATE_SLEEP:\n        x, y = ctrl.mouse_pos()\n        # the rect for the window containing the mouse\n        rect = None\n        # on windows, check the active_window first since ui.windows() is not z-ordered\n        if app.platform == \"windows\" and ui.active_window().rect.contains(x, y):",
        "detail": "plugin.mouse.mouse",
        "documentation": {}
    },
    {
        "label": "stop_scroll",
        "kind": 2,
        "importPath": "plugin.mouse.mouse",
        "description": "plugin.mouse.mouse",
        "peekOfCode": "def stop_scroll():\n    global scroll_amount, scroll_job, gaze_job, continuous_scoll_mode\n    scroll_amount = 0\n    if scroll_job:\n        cron.cancel(scroll_job)\n    if gaze_job:\n        cron.cancel(gaze_job)\n    global control_mouse_forced\n    if control_mouse_forced and config.control_mouse:\n        toggle_control(False)",
        "detail": "plugin.mouse.mouse",
        "documentation": {}
    },
    {
        "label": "start_cursor_scrolling",
        "kind": 2,
        "importPath": "plugin.mouse.mouse",
        "description": "plugin.mouse.mouse",
        "peekOfCode": "def start_cursor_scrolling():\n    global scroll_job, gaze_job\n    stop_scroll()\n    gaze_job = cron.interval(\"60ms\", gaze_scroll)\n    # if eye_zoom_mouse.zoom_mouse.enabled and eye_mouse.mouse.attached_tracker is not None:\n    #    eye_zoom_mouse.zoom_mouse.sleep(True)\nif app.platform == \"mac\":\n    from talon import tap\n    def on_move(e):\n        if not config.control_mouse:",
        "detail": "plugin.mouse.mouse",
        "documentation": {}
    },
    {
        "label": "key",
        "kind": 5,
        "importPath": "plugin.mouse.mouse",
        "description": "plugin.mouse.mouse",
        "peekOfCode": "key = actions.key\nself = actions.self\nscroll_amount = 0\nclick_job = None\nscroll_job = None\ngaze_job = None\ncancel_scroll_on_pop = True\ncontrol_mouse_forced = False\ndefault_cursor = {\n    \"AppStarting\": r\"%SystemRoot%\\Cursors\\aero_working.ani\",",
        "detail": "plugin.mouse.mouse",
        "documentation": {}
    },
    {
        "label": "self",
        "kind": 5,
        "importPath": "plugin.mouse.mouse",
        "description": "plugin.mouse.mouse",
        "peekOfCode": "self = actions.self\nscroll_amount = 0\nclick_job = None\nscroll_job = None\ngaze_job = None\ncancel_scroll_on_pop = True\ncontrol_mouse_forced = False\ndefault_cursor = {\n    \"AppStarting\": r\"%SystemRoot%\\Cursors\\aero_working.ani\",\n    \"Arrow\": r\"%SystemRoot%\\Cursors\\aero_arrow.cur\",",
        "detail": "plugin.mouse.mouse",
        "documentation": {}
    },
    {
        "label": "scroll_amount",
        "kind": 5,
        "importPath": "plugin.mouse.mouse",
        "description": "plugin.mouse.mouse",
        "peekOfCode": "scroll_amount = 0\nclick_job = None\nscroll_job = None\ngaze_job = None\ncancel_scroll_on_pop = True\ncontrol_mouse_forced = False\ndefault_cursor = {\n    \"AppStarting\": r\"%SystemRoot%\\Cursors\\aero_working.ani\",\n    \"Arrow\": r\"%SystemRoot%\\Cursors\\aero_arrow.cur\",\n    \"Hand\": r\"%SystemRoot%\\Cursors\\aero_link.cur\",",
        "detail": "plugin.mouse.mouse",
        "documentation": {}
    },
    {
        "label": "click_job",
        "kind": 5,
        "importPath": "plugin.mouse.mouse",
        "description": "plugin.mouse.mouse",
        "peekOfCode": "click_job = None\nscroll_job = None\ngaze_job = None\ncancel_scroll_on_pop = True\ncontrol_mouse_forced = False\ndefault_cursor = {\n    \"AppStarting\": r\"%SystemRoot%\\Cursors\\aero_working.ani\",\n    \"Arrow\": r\"%SystemRoot%\\Cursors\\aero_arrow.cur\",\n    \"Hand\": r\"%SystemRoot%\\Cursors\\aero_link.cur\",\n    \"Help\": r\"%SystemRoot%\\Cursors\\aero_helpsel.cur\",",
        "detail": "plugin.mouse.mouse",
        "documentation": {}
    },
    {
        "label": "scroll_job",
        "kind": 5,
        "importPath": "plugin.mouse.mouse",
        "description": "plugin.mouse.mouse",
        "peekOfCode": "scroll_job = None\ngaze_job = None\ncancel_scroll_on_pop = True\ncontrol_mouse_forced = False\ndefault_cursor = {\n    \"AppStarting\": r\"%SystemRoot%\\Cursors\\aero_working.ani\",\n    \"Arrow\": r\"%SystemRoot%\\Cursors\\aero_arrow.cur\",\n    \"Hand\": r\"%SystemRoot%\\Cursors\\aero_link.cur\",\n    \"Help\": r\"%SystemRoot%\\Cursors\\aero_helpsel.cur\",\n    \"No\": r\"%SystemRoot%\\Cursors\\aero_unavail.cur\",",
        "detail": "plugin.mouse.mouse",
        "documentation": {}
    },
    {
        "label": "gaze_job",
        "kind": 5,
        "importPath": "plugin.mouse.mouse",
        "description": "plugin.mouse.mouse",
        "peekOfCode": "gaze_job = None\ncancel_scroll_on_pop = True\ncontrol_mouse_forced = False\ndefault_cursor = {\n    \"AppStarting\": r\"%SystemRoot%\\Cursors\\aero_working.ani\",\n    \"Arrow\": r\"%SystemRoot%\\Cursors\\aero_arrow.cur\",\n    \"Hand\": r\"%SystemRoot%\\Cursors\\aero_link.cur\",\n    \"Help\": r\"%SystemRoot%\\Cursors\\aero_helpsel.cur\",\n    \"No\": r\"%SystemRoot%\\Cursors\\aero_unavail.cur\",\n    \"NWPen\": r\"%SystemRoot%\\Cursors\\aero_pen.cur\",",
        "detail": "plugin.mouse.mouse",
        "documentation": {}
    },
    {
        "label": "cancel_scroll_on_pop",
        "kind": 5,
        "importPath": "plugin.mouse.mouse",
        "description": "plugin.mouse.mouse",
        "peekOfCode": "cancel_scroll_on_pop = True\ncontrol_mouse_forced = False\ndefault_cursor = {\n    \"AppStarting\": r\"%SystemRoot%\\Cursors\\aero_working.ani\",\n    \"Arrow\": r\"%SystemRoot%\\Cursors\\aero_arrow.cur\",\n    \"Hand\": r\"%SystemRoot%\\Cursors\\aero_link.cur\",\n    \"Help\": r\"%SystemRoot%\\Cursors\\aero_helpsel.cur\",\n    \"No\": r\"%SystemRoot%\\Cursors\\aero_unavail.cur\",\n    \"NWPen\": r\"%SystemRoot%\\Cursors\\aero_pen.cur\",\n    \"Person\": r\"%SystemRoot%\\Cursors\\aero_person.cur\",",
        "detail": "plugin.mouse.mouse",
        "documentation": {}
    },
    {
        "label": "control_mouse_forced",
        "kind": 5,
        "importPath": "plugin.mouse.mouse",
        "description": "plugin.mouse.mouse",
        "peekOfCode": "control_mouse_forced = False\ndefault_cursor = {\n    \"AppStarting\": r\"%SystemRoot%\\Cursors\\aero_working.ani\",\n    \"Arrow\": r\"%SystemRoot%\\Cursors\\aero_arrow.cur\",\n    \"Hand\": r\"%SystemRoot%\\Cursors\\aero_link.cur\",\n    \"Help\": r\"%SystemRoot%\\Cursors\\aero_helpsel.cur\",\n    \"No\": r\"%SystemRoot%\\Cursors\\aero_unavail.cur\",\n    \"NWPen\": r\"%SystemRoot%\\Cursors\\aero_pen.cur\",\n    \"Person\": r\"%SystemRoot%\\Cursors\\aero_person.cur\",\n    \"Pin\": r\"%SystemRoot%\\Cursors\\aero_pin.cur\",",
        "detail": "plugin.mouse.mouse",
        "documentation": {}
    },
    {
        "label": "default_cursor",
        "kind": 5,
        "importPath": "plugin.mouse.mouse",
        "description": "plugin.mouse.mouse",
        "peekOfCode": "default_cursor = {\n    \"AppStarting\": r\"%SystemRoot%\\Cursors\\aero_working.ani\",\n    \"Arrow\": r\"%SystemRoot%\\Cursors\\aero_arrow.cur\",\n    \"Hand\": r\"%SystemRoot%\\Cursors\\aero_link.cur\",\n    \"Help\": r\"%SystemRoot%\\Cursors\\aero_helpsel.cur\",\n    \"No\": r\"%SystemRoot%\\Cursors\\aero_unavail.cur\",\n    \"NWPen\": r\"%SystemRoot%\\Cursors\\aero_pen.cur\",\n    \"Person\": r\"%SystemRoot%\\Cursors\\aero_person.cur\",\n    \"Pin\": r\"%SystemRoot%\\Cursors\\aero_pin.cur\",\n    \"SizeAll\": r\"%SystemRoot%\\Cursors\\aero_move.cur\",",
        "detail": "plugin.mouse.mouse",
        "documentation": {}
    },
    {
        "label": "hidden_cursor",
        "kind": 5,
        "importPath": "plugin.mouse.mouse",
        "description": "plugin.mouse.mouse",
        "peekOfCode": "hidden_cursor = os.path.join(\n    os.path.dirname(os.path.realpath(__file__)), r\"Resources\\HiddenCursor.cur\"\n)\nmod = Module()\nmod.list(\n    \"mouse_button\", desc=\"List of mouse button words to mouse_click index parameter\"\n)\nmod.tag(\n    \"mouse_cursor_commands_enable\", desc=\"Tag enables hide/show mouse cursor commands\"\n)",
        "detail": "plugin.mouse.mouse",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "plugin.mouse.mouse",
        "description": "plugin.mouse.mouse",
        "peekOfCode": "mod = Module()\nmod.list(\n    \"mouse_button\", desc=\"List of mouse button words to mouse_click index parameter\"\n)\nmod.tag(\n    \"mouse_cursor_commands_enable\", desc=\"Tag enables hide/show mouse cursor commands\"\n)\nsetting_mouse_enable_pop_click = mod.setting(\n    \"mouse_enable_pop_click\",\n    type=int,",
        "detail": "plugin.mouse.mouse",
        "documentation": {}
    },
    {
        "label": "setting_mouse_enable_pop_click",
        "kind": 5,
        "importPath": "plugin.mouse.mouse",
        "description": "plugin.mouse.mouse",
        "peekOfCode": "setting_mouse_enable_pop_click = mod.setting(\n    \"mouse_enable_pop_click\",\n    type=int,\n    default=0,\n    desc=\"Enable pop to click when control mouse is enabled.\",\n)\nsetting_mouse_enable_pop_stops_scroll = mod.setting(\n    \"mouse_enable_pop_stops_scroll\",\n    type=int,\n    default=0,",
        "detail": "plugin.mouse.mouse",
        "documentation": {}
    },
    {
        "label": "setting_mouse_enable_pop_stops_scroll",
        "kind": 5,
        "importPath": "plugin.mouse.mouse",
        "description": "plugin.mouse.mouse",
        "peekOfCode": "setting_mouse_enable_pop_stops_scroll = mod.setting(\n    \"mouse_enable_pop_stops_scroll\",\n    type=int,\n    default=0,\n    desc=\"When enabled, pop stops continuous scroll modes (wheel upper/downer/gaze)\",\n)\nsetting_mouse_wake_hides_cursor = mod.setting(\n    \"mouse_wake_hides_cursor\",\n    type=int,\n    default=0,",
        "detail": "plugin.mouse.mouse",
        "documentation": {}
    },
    {
        "label": "setting_mouse_wake_hides_cursor",
        "kind": 5,
        "importPath": "plugin.mouse.mouse",
        "description": "plugin.mouse.mouse",
        "peekOfCode": "setting_mouse_wake_hides_cursor = mod.setting(\n    \"mouse_wake_hides_cursor\",\n    type=int,\n    default=0,\n    desc=\"When enabled, mouse wake will hide the cursor. mouse_wake enables zoom mouse.\",\n)\nsetting_mouse_hide_mouse_gui = mod.setting(\n    \"mouse_hide_mouse_gui\",\n    type=int,\n    default=0,",
        "detail": "plugin.mouse.mouse",
        "documentation": {}
    },
    {
        "label": "setting_mouse_hide_mouse_gui",
        "kind": 5,
        "importPath": "plugin.mouse.mouse",
        "description": "plugin.mouse.mouse",
        "peekOfCode": "setting_mouse_hide_mouse_gui = mod.setting(\n    \"mouse_hide_mouse_gui\",\n    type=int,\n    default=0,\n    desc=\"When enabled, the 'Scroll Mouse' GUI will not be shown.\",\n)\nsetting_mouse_continuous_scroll_amount = mod.setting(\n    \"mouse_continuous_scroll_amount\",\n    type=int,\n    default=80,",
        "detail": "plugin.mouse.mouse",
        "documentation": {}
    },
    {
        "label": "setting_mouse_continuous_scroll_amount",
        "kind": 5,
        "importPath": "plugin.mouse.mouse",
        "description": "plugin.mouse.mouse",
        "peekOfCode": "setting_mouse_continuous_scroll_amount = mod.setting(\n    \"mouse_continuous_scroll_amount\",\n    type=int,\n    default=80,\n    desc=\"The default amount used when scrolling continuously\",\n)\nsetting_mouse_wheel_down_amount = mod.setting(\n    \"mouse_wheel_down_amount\",\n    type=int,\n    default=120,",
        "detail": "plugin.mouse.mouse",
        "documentation": {}
    },
    {
        "label": "setting_mouse_wheel_down_amount",
        "kind": 5,
        "importPath": "plugin.mouse.mouse",
        "description": "plugin.mouse.mouse",
        "peekOfCode": "setting_mouse_wheel_down_amount = mod.setting(\n    \"mouse_wheel_down_amount\",\n    type=int,\n    default=120,\n    desc=\"The amount to scroll up/down (equivalent to mouse wheel on Windows by default)\",\n)\nsetting_mouse_wheel_horizontal_amount = mod.setting(\n    \"mouse_wheel_horizontal_amount\",\n    type=int,\n    default=40,",
        "detail": "plugin.mouse.mouse",
        "documentation": {}
    },
    {
        "label": "setting_mouse_wheel_horizontal_amount",
        "kind": 5,
        "importPath": "plugin.mouse.mouse",
        "description": "plugin.mouse.mouse",
        "peekOfCode": "setting_mouse_wheel_horizontal_amount = mod.setting(\n    \"mouse_wheel_horizontal_amount\",\n    type=int,\n    default=40,\n    desc=\"The amount to scroll left/right\",\n)\ncontinuous_scoll_mode = \"\"\n@imgui.open(x=700, y=0)\ndef gui_wheel(gui: imgui.GUI):\n    gui.text(f\"Scroll mode: {continuous_scoll_mode}\")",
        "detail": "plugin.mouse.mouse",
        "documentation": {}
    },
    {
        "label": "continuous_scoll_mode",
        "kind": 5,
        "importPath": "plugin.mouse.mouse",
        "description": "plugin.mouse.mouse",
        "peekOfCode": "continuous_scoll_mode = \"\"\n@imgui.open(x=700, y=0)\ndef gui_wheel(gui: imgui.GUI):\n    gui.text(f\"Scroll mode: {continuous_scoll_mode}\")\n    gui.line()\n    if gui.button(\"Wheel Stop [stop scrolling]\"):\n        actions.user.mouse_scroll_stop()\n@mod.action_class\nclass Actions:\n    def mouse_show_cursor():",
        "detail": "plugin.mouse.mouse",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "plugin.screenshot.screenshot",
        "description": "plugin.screenshot.screenshot",
        "peekOfCode": "class Actions:\n    def screenshot(screen_number: Optional[int] = None):\n        \"\"\"Takes a screenshot of the entire screen and saves it to the pictures folder.\n        Optional screen number can be given to use screen other than main.\"\"\"\n        screen = get_screen(screen_number)\n        screenshot_rect(screen.rect)\n    def screenshot_window():\n        \"\"\"Takes a screenshot of the active window and saves it to the pictures folder\"\"\"\n        win = ui.active_window()\n        screenshot_rect(win.rect, win.app.name)",
        "detail": "plugin.screenshot.screenshot",
        "documentation": {}
    },
    {
        "label": "UserActionsMac",
        "kind": 6,
        "importPath": "plugin.screenshot.screenshot",
        "description": "plugin.screenshot.screenshot",
        "peekOfCode": "class UserActionsMac:\n    def screenshot_selection():\n        actions.key(\"cmd-shift-4\")\nctx_win = Context()\nctx_win.matches = r\"\"\"\nos: windows\n\"\"\"\n@ctx_win.action_class(\"user\")\nclass UserActionsWin:\n    def screenshot_selection():",
        "detail": "plugin.screenshot.screenshot",
        "documentation": {}
    },
    {
        "label": "UserActionsWin",
        "kind": 6,
        "importPath": "plugin.screenshot.screenshot",
        "description": "plugin.screenshot.screenshot",
        "peekOfCode": "class UserActionsWin:\n    def screenshot_selection():\n        actions.key(\"super-shift-s\")\nctx_linux = Context()\nctx_linux.matches = r\"\"\"\nos: linux\n\"\"\"\n@ctx_linux.action_class(\"user\")\nclass UserActionsLinux:\n    def screenshot_selection():",
        "detail": "plugin.screenshot.screenshot",
        "documentation": {}
    },
    {
        "label": "UserActionsLinux",
        "kind": 6,
        "importPath": "plugin.screenshot.screenshot",
        "description": "plugin.screenshot.screenshot",
        "peekOfCode": "class UserActionsLinux:\n    def screenshot_selection():\n        actions.key(\"shift-printscr\")",
        "detail": "plugin.screenshot.screenshot",
        "documentation": {}
    },
    {
        "label": "screenshot_rect",
        "kind": 2,
        "importPath": "plugin.screenshot.screenshot",
        "description": "plugin.screenshot.screenshot",
        "peekOfCode": "def screenshot_rect(rect: ui.Rect, title: str = \"\"):\n    flash_rect(rect)\n    img = screen.capture_rect(rect)\n    path = get_screenshot_path(title)\n    img.write_file(path)\ndef clipboard_rect(rect: ui.Rect):\n    flash_rect(rect)\n    img = screen.capture_rect(rect)\n    clip.set_image(img)\ndef get_screenshot_path(title: str = \"\"):",
        "detail": "plugin.screenshot.screenshot",
        "documentation": {}
    },
    {
        "label": "clipboard_rect",
        "kind": 2,
        "importPath": "plugin.screenshot.screenshot",
        "description": "plugin.screenshot.screenshot",
        "peekOfCode": "def clipboard_rect(rect: ui.Rect):\n    flash_rect(rect)\n    img = screen.capture_rect(rect)\n    clip.set_image(img)\ndef get_screenshot_path(title: str = \"\"):\n    if title:\n        title = f\" - {title.replace('.', '_')}\"\n    date = datetime.now().strftime(\"%Y-%m-%dT%H-%M-%S\")\n    filename = f\"Screenshot {date}{title}.png\"\n    folder_path = screenshot_folder.get()",
        "detail": "plugin.screenshot.screenshot",
        "documentation": {}
    },
    {
        "label": "get_screenshot_path",
        "kind": 2,
        "importPath": "plugin.screenshot.screenshot",
        "description": "plugin.screenshot.screenshot",
        "peekOfCode": "def get_screenshot_path(title: str = \"\"):\n    if title:\n        title = f\" - {title.replace('.', '_')}\"\n    date = datetime.now().strftime(\"%Y-%m-%dT%H-%M-%S\")\n    filename = f\"Screenshot {date}{title}.png\"\n    folder_path = screenshot_folder.get()\n    path = os.path.expanduser(os.path.join(folder_path, filename))\n    return os.path.normpath(path)\ndef flash_rect(rect: ui.Rect):\n    def on_draw(c):",
        "detail": "plugin.screenshot.screenshot",
        "documentation": {}
    },
    {
        "label": "flash_rect",
        "kind": 2,
        "importPath": "plugin.screenshot.screenshot",
        "description": "plugin.screenshot.screenshot",
        "peekOfCode": "def flash_rect(rect: ui.Rect):\n    def on_draw(c):\n        c.paint.style = c.paint.Style.FILL\n        c.paint.color = \"ffffff\"\n        c.draw_rect(rect)\n        cron.after(\"150ms\", canvas.close)\n    canvas = Canvas.from_rect(rect)\n    canvas.register(\"draw\", on_draw)\n    canvas.freeze()\ndef get_screen(screen_number: Optional[int] = None) -> ui.Screen:",
        "detail": "plugin.screenshot.screenshot",
        "documentation": {}
    },
    {
        "label": "get_screen",
        "kind": 2,
        "importPath": "plugin.screenshot.screenshot",
        "description": "plugin.screenshot.screenshot",
        "peekOfCode": "def get_screen(screen_number: Optional[int] = None) -> ui.Screen:\n    if screen_number is None:\n        return screen.main_screen()\n    return actions.user.screens_get_by_number(screen_number)\nctx_mac = Context()\nctx_mac.matches = r\"\"\"\nos: mac\n\"\"\"\n@ctx_mac.action_class(\"user\")\nclass UserActionsMac:",
        "detail": "plugin.screenshot.screenshot",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "plugin.screenshot.screenshot",
        "description": "plugin.screenshot.screenshot",
        "peekOfCode": "mod = Module()\ndefault_folder = \"\"\nif app.platform == \"windows\":\n    default_folder = os.path.expanduser(os.path.join(\"~\", r\"OneDrive\\\\Pictures\"))\nif not os.path.isdir(default_folder):\n    default_folder = os.path.join(\"~\", \"Pictures\")\nscreenshot_folder = mod.setting(\n    \"screenshot_folder\",\n    type=str,\n    default=default_folder,",
        "detail": "plugin.screenshot.screenshot",
        "documentation": {}
    },
    {
        "label": "default_folder",
        "kind": 5,
        "importPath": "plugin.screenshot.screenshot",
        "description": "plugin.screenshot.screenshot",
        "peekOfCode": "default_folder = \"\"\nif app.platform == \"windows\":\n    default_folder = os.path.expanduser(os.path.join(\"~\", r\"OneDrive\\\\Pictures\"))\nif not os.path.isdir(default_folder):\n    default_folder = os.path.join(\"~\", \"Pictures\")\nscreenshot_folder = mod.setting(\n    \"screenshot_folder\",\n    type=str,\n    default=default_folder,\n    desc=\"Where to save screenshots. Note this folder must exist.\",",
        "detail": "plugin.screenshot.screenshot",
        "documentation": {}
    },
    {
        "label": "screenshot_folder",
        "kind": 5,
        "importPath": "plugin.screenshot.screenshot",
        "description": "plugin.screenshot.screenshot",
        "peekOfCode": "screenshot_folder = mod.setting(\n    \"screenshot_folder\",\n    type=str,\n    default=default_folder,\n    desc=\"Where to save screenshots. Note this folder must exist.\",\n)\n@mod.action_class\nclass Actions:\n    def screenshot(screen_number: Optional[int] = None):\n        \"\"\"Takes a screenshot of the entire screen and saves it to the pictures folder.",
        "detail": "plugin.screenshot.screenshot",
        "documentation": {}
    },
    {
        "label": "ctx_mac",
        "kind": 5,
        "importPath": "plugin.screenshot.screenshot",
        "description": "plugin.screenshot.screenshot",
        "peekOfCode": "ctx_mac = Context()\nctx_mac.matches = r\"\"\"\nos: mac\n\"\"\"\n@ctx_mac.action_class(\"user\")\nclass UserActionsMac:\n    def screenshot_selection():\n        actions.key(\"cmd-shift-4\")\nctx_win = Context()\nctx_win.matches = r\"\"\"",
        "detail": "plugin.screenshot.screenshot",
        "documentation": {}
    },
    {
        "label": "ctx_mac.matches",
        "kind": 5,
        "importPath": "plugin.screenshot.screenshot",
        "description": "plugin.screenshot.screenshot",
        "peekOfCode": "ctx_mac.matches = r\"\"\"\nos: mac\n\"\"\"\n@ctx_mac.action_class(\"user\")\nclass UserActionsMac:\n    def screenshot_selection():\n        actions.key(\"cmd-shift-4\")\nctx_win = Context()\nctx_win.matches = r\"\"\"\nos: windows",
        "detail": "plugin.screenshot.screenshot",
        "documentation": {}
    },
    {
        "label": "ctx_win",
        "kind": 5,
        "importPath": "plugin.screenshot.screenshot",
        "description": "plugin.screenshot.screenshot",
        "peekOfCode": "ctx_win = Context()\nctx_win.matches = r\"\"\"\nos: windows\n\"\"\"\n@ctx_win.action_class(\"user\")\nclass UserActionsWin:\n    def screenshot_selection():\n        actions.key(\"super-shift-s\")\nctx_linux = Context()\nctx_linux.matches = r\"\"\"",
        "detail": "plugin.screenshot.screenshot",
        "documentation": {}
    },
    {
        "label": "ctx_win.matches",
        "kind": 5,
        "importPath": "plugin.screenshot.screenshot",
        "description": "plugin.screenshot.screenshot",
        "peekOfCode": "ctx_win.matches = r\"\"\"\nos: windows\n\"\"\"\n@ctx_win.action_class(\"user\")\nclass UserActionsWin:\n    def screenshot_selection():\n        actions.key(\"super-shift-s\")\nctx_linux = Context()\nctx_linux.matches = r\"\"\"\nos: linux",
        "detail": "plugin.screenshot.screenshot",
        "documentation": {}
    },
    {
        "label": "ctx_linux",
        "kind": 5,
        "importPath": "plugin.screenshot.screenshot",
        "description": "plugin.screenshot.screenshot",
        "peekOfCode": "ctx_linux = Context()\nctx_linux.matches = r\"\"\"\nos: linux\n\"\"\"\n@ctx_linux.action_class(\"user\")\nclass UserActionsLinux:\n    def screenshot_selection():\n        actions.key(\"shift-printscr\")",
        "detail": "plugin.screenshot.screenshot",
        "documentation": {}
    },
    {
        "label": "ctx_linux.matches",
        "kind": 5,
        "importPath": "plugin.screenshot.screenshot",
        "description": "plugin.screenshot.screenshot",
        "peekOfCode": "ctx_linux.matches = r\"\"\"\nos: linux\n\"\"\"\n@ctx_linux.action_class(\"user\")\nclass UserActionsLinux:\n    def screenshot_selection():\n        actions.key(\"shift-printscr\")",
        "detail": "plugin.screenshot.screenshot",
        "documentation": {}
    },
    {
        "label": "ContextSensitiveDictationActions",
        "kind": 6,
        "importPath": "plugin.talon_draft_window.draft_talon_helpers",
        "description": "plugin.talon_draft_window.draft_talon_helpers",
        "peekOfCode": "class ContextSensitiveDictationActions:\n    \"\"\"\n    Override these actions to assist 'Smart dictation mode'.\n    see https://github.com/knausj85/knausj_talon/pull/356\n    \"\"\"\n    def dictation_peek(left, right):\n        area = draft_manager.area\n        return (\n            area[max(0, area.sel.left - 50) : area.sel.left],\n            area[area.sel.right : area.sel.right + 50],",
        "detail": "plugin.talon_draft_window.draft_talon_helpers",
        "documentation": {}
    },
    {
        "label": "EditActions",
        "kind": 6,
        "importPath": "plugin.talon_draft_window.draft_talon_helpers",
        "description": "plugin.talon_draft_window.draft_talon_helpers",
        "peekOfCode": "class EditActions:\n    \"\"\"\n    Make default edit actions more efficient.\n    \"\"\"\n    def selected_text() -> str:\n        area = draft_manager.area\n        if area.sel:\n            result = area[area.sel.left : area.sel.right]\n            return result\n        return \"\"",
        "detail": "plugin.talon_draft_window.draft_talon_helpers",
        "documentation": {}
    },
    {
        "label": "UndoWorkaround",
        "kind": 6,
        "importPath": "plugin.talon_draft_window.draft_talon_helpers",
        "description": "plugin.talon_draft_window.draft_talon_helpers",
        "peekOfCode": "class UndoWorkaround:\n    \"\"\"\n    Workaround for the experimental textarea's undo being character by character.\n    This keeps a debounced undo history. Can be deleted once this todo item is\n    fixed: https://github.com/talonvoice/talon/issues/254#issuecomment-789149734\n    \"\"\"\n    # Set this to False if you want to turn it off, or just delete all references\n    # to this class\n    enable_workaround = True\n    # Stack of (text_value, selection) tuples representing the undo stack",
        "detail": "plugin.talon_draft_window.draft_talon_helpers",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "plugin.talon_draft_window.draft_talon_helpers",
        "description": "plugin.talon_draft_window.draft_talon_helpers",
        "peekOfCode": "class Actions:\n    def draft_show(text: Optional[str] = None):\n        \"\"\"\n        Shows draft window\n        \"\"\"\n        draft_manager.show(text)\n        UndoWorkaround.start_logger(text is not None)\n        ctx.tags = [\"user.draft_window_showing\"]\n    def draft_hide():\n        \"\"\"",
        "detail": "plugin.talon_draft_window.draft_talon_helpers",
        "documentation": {}
    },
    {
        "label": "draft_anchor",
        "kind": 2,
        "importPath": "plugin.talon_draft_window.draft_talon_helpers",
        "description": "plugin.talon_draft_window.draft_talon_helpers",
        "peekOfCode": "def draft_anchor(m) -> str:\n    \"\"\"\n    An anchor (string of letters)\n    \"\"\"\n    return \"\".join(m)\n@mod.capture(rule=\"(top|bottom|left|right|middle)\")\ndef draft_window_position(m) -> str:\n    \"\"\"\n    One of the named positions you can move the window to\n    \"\"\"",
        "detail": "plugin.talon_draft_window.draft_talon_helpers",
        "documentation": {}
    },
    {
        "label": "draft_window_position",
        "kind": 2,
        "importPath": "plugin.talon_draft_window.draft_talon_helpers",
        "description": "plugin.talon_draft_window.draft_talon_helpers",
        "peekOfCode": "def draft_window_position(m) -> str:\n    \"\"\"\n    One of the named positions you can move the window to\n    \"\"\"\n    return \"\".join(m)",
        "detail": "plugin.talon_draft_window.draft_talon_helpers",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "plugin.talon_draft_window.draft_talon_helpers",
        "description": "plugin.talon_draft_window.draft_talon_helpers",
        "peekOfCode": "mod = Module()\n# ctx is for toggling the draft_window_showing variable\n# which lets you execute actions whenever the window is visible.\nctx = Context()\n# ctx_focused is active only when the draft window is focussed. This\n# lets you execute actions under that condition.\nctx_focused = Context()\nctx_focused.matches = r\"\"\"\ntitle: Talon Draft\n\"\"\"",
        "detail": "plugin.talon_draft_window.draft_talon_helpers",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "plugin.talon_draft_window.draft_talon_helpers",
        "description": "plugin.talon_draft_window.draft_talon_helpers",
        "peekOfCode": "ctx = Context()\n# ctx_focused is active only when the draft window is focussed. This\n# lets you execute actions under that condition.\nctx_focused = Context()\nctx_focused.matches = r\"\"\"\ntitle: Talon Draft\n\"\"\"\nmod.tag(\"draft_window_showing\", desc=\"Tag set when draft window showing\")\nsetting_theme = mod.setting(\n    \"draft_window_theme\",",
        "detail": "plugin.talon_draft_window.draft_talon_helpers",
        "documentation": {}
    },
    {
        "label": "ctx_focused",
        "kind": 5,
        "importPath": "plugin.talon_draft_window.draft_talon_helpers",
        "description": "plugin.talon_draft_window.draft_talon_helpers",
        "peekOfCode": "ctx_focused = Context()\nctx_focused.matches = r\"\"\"\ntitle: Talon Draft\n\"\"\"\nmod.tag(\"draft_window_showing\", desc=\"Tag set when draft window showing\")\nsetting_theme = mod.setting(\n    \"draft_window_theme\",\n    type=str,\n    default=\"dark\",\n    desc=\"Sets the main colors of the window, one of 'dark' or 'light'\",",
        "detail": "plugin.talon_draft_window.draft_talon_helpers",
        "documentation": {}
    },
    {
        "label": "ctx_focused.matches",
        "kind": 5,
        "importPath": "plugin.talon_draft_window.draft_talon_helpers",
        "description": "plugin.talon_draft_window.draft_talon_helpers",
        "peekOfCode": "ctx_focused.matches = r\"\"\"\ntitle: Talon Draft\n\"\"\"\nmod.tag(\"draft_window_showing\", desc=\"Tag set when draft window showing\")\nsetting_theme = mod.setting(\n    \"draft_window_theme\",\n    type=str,\n    default=\"dark\",\n    desc=\"Sets the main colors of the window, one of 'dark' or 'light'\",\n)",
        "detail": "plugin.talon_draft_window.draft_talon_helpers",
        "documentation": {}
    },
    {
        "label": "setting_theme",
        "kind": 5,
        "importPath": "plugin.talon_draft_window.draft_talon_helpers",
        "description": "plugin.talon_draft_window.draft_talon_helpers",
        "peekOfCode": "setting_theme = mod.setting(\n    \"draft_window_theme\",\n    type=str,\n    default=\"dark\",\n    desc=\"Sets the main colors of the window, one of 'dark' or 'light'\",\n)\nsetting_label_size = mod.setting(\n    \"draft_window_label_size\",\n    type=int,\n    default=20,",
        "detail": "plugin.talon_draft_window.draft_talon_helpers",
        "documentation": {}
    },
    {
        "label": "setting_label_size",
        "kind": 5,
        "importPath": "plugin.talon_draft_window.draft_talon_helpers",
        "description": "plugin.talon_draft_window.draft_talon_helpers",
        "peekOfCode": "setting_label_size = mod.setting(\n    \"draft_window_label_size\",\n    type=int,\n    default=20,\n    desc=\"Sets the size of the word labels used in the draft window\",\n)\nsetting_label_color = mod.setting(\n    \"draft_window_label_color\",\n    type=str,\n    default=None,",
        "detail": "plugin.talon_draft_window.draft_talon_helpers",
        "documentation": {}
    },
    {
        "label": "setting_label_color",
        "kind": 5,
        "importPath": "plugin.talon_draft_window.draft_talon_helpers",
        "description": "plugin.talon_draft_window.draft_talon_helpers",
        "peekOfCode": "setting_label_color = mod.setting(\n    \"draft_window_label_color\",\n    type=str,\n    default=None,\n    desc=(\n        \"Sets the color of the word labels used in the draft window. \"\n        \"E.g. 00ff00 would be green\"\n    ),\n)\nsetting_text_size = mod.setting(",
        "detail": "plugin.talon_draft_window.draft_talon_helpers",
        "documentation": {}
    },
    {
        "label": "setting_text_size",
        "kind": 5,
        "importPath": "plugin.talon_draft_window.draft_talon_helpers",
        "description": "plugin.talon_draft_window.draft_talon_helpers",
        "peekOfCode": "setting_text_size = mod.setting(\n    \"draft_window_text_size\",\n    type=int,\n    default=20,\n    desc=\"Sets the size of the text used in the draft window\",\n)\ndraft_manager = DraftManager()\n# Update the styling of the draft window dynamically as user settings change\ndef _update_draft_style(*args):\n    draft_manager.set_styling(",
        "detail": "plugin.talon_draft_window.draft_talon_helpers",
        "documentation": {}
    },
    {
        "label": "draft_manager",
        "kind": 5,
        "importPath": "plugin.talon_draft_window.draft_talon_helpers",
        "description": "plugin.talon_draft_window.draft_talon_helpers",
        "peekOfCode": "draft_manager = DraftManager()\n# Update the styling of the draft window dynamically as user settings change\ndef _update_draft_style(*args):\n    draft_manager.set_styling(\n        **{\n            arg: setting.get()\n            for setting, arg in (\n                (setting_theme, \"theme\"),\n                (setting_label_size, \"label_size\"),\n                (setting_label_color, \"label_color\"),",
        "detail": "plugin.talon_draft_window.draft_talon_helpers",
        "documentation": {}
    },
    {
        "label": "DraftManager",
        "kind": 6,
        "importPath": "plugin.talon_draft_window.draft_ui",
        "description": "plugin.talon_draft_window.draft_ui",
        "peekOfCode": "class DraftManager:\n    \"\"\"\n    API to the draft window\n    \"\"\"\n    def __init__(self):\n        self.area = TextArea()\n        self.area.title = \"Talon Draft\"\n        self.area.value = \"\"\n        self.area.register(\"label\", self._update_labels)\n        self.set_styling()",
        "detail": "plugin.talon_draft_window.draft_ui",
        "documentation": {}
    },
    {
        "label": "calculate_text_anchors",
        "kind": 2,
        "importPath": "plugin.talon_draft_window.draft_ui",
        "description": "plugin.talon_draft_window.draft_ui",
        "peekOfCode": "def calculate_text_anchors(text, cursor_position, anchor_labels=None):\n    \"\"\"\n    Produces an iterator of (anchor, start_word_index, end_word_index, last_space_index)\n    tuples from the given text. Each tuple indicates a particular point you may want to\n    reference when editing along with some useful ranges you may want to operate on.\n    - text is the text you want to process.\n    - cursor_position is the current position of the cursor, anchors will be placed around\n      this.\n    - anchor_labels is a list of characters you want to use for your labels.\n    - *index is just a character offset from the start of the string (e.g. the first character is at index 0)",
        "detail": "plugin.talon_draft_window.draft_ui",
        "documentation": {}
    },
    {
        "label": "word_matcher",
        "kind": 5,
        "importPath": "plugin.talon_draft_window.draft_ui",
        "description": "plugin.talon_draft_window.draft_ui",
        "peekOfCode": "word_matcher = re.compile(r\"([^\\s]+)(\\s*)\")\ndef calculate_text_anchors(text, cursor_position, anchor_labels=None):\n    \"\"\"\n    Produces an iterator of (anchor, start_word_index, end_word_index, last_space_index)\n    tuples from the given text. Each tuple indicates a particular point you may want to\n    reference when editing along with some useful ranges you may want to operate on.\n    - text is the text you want to process.\n    - cursor_position is the current position of the cursor, anchors will be placed around\n      this.\n    - anchor_labels is a list of characters you want to use for your labels.",
        "detail": "plugin.talon_draft_window.draft_ui",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "plugin.talon_helpers.talon_helpers",
        "description": "plugin.talon_helpers.talon_helpers",
        "peekOfCode": "class Actions:\n    def talon_add_context_clipboard_python():\n        \"\"\"Adds os-specific context info to the clipboard for the focused app for .py files. Assumes you've a Module named mod declared.\"\"\"\n        friendly_name = actions.app.name()\n        # print(actions.app.executable())\n        executable = actions.app.executable().split(os.path.sep)[-1]\n        app_name = create_name(friendly_name.replace(\".exe\", \"\"))\n        if app.platform == \"mac\":\n            result = 'mod.apps.{} = \"\"\"\\nos: {}\\nand app.bundle: {}\\n\"\"\"'.format(\n                app_name, app.platform, actions.app.bundle()",
        "detail": "plugin.talon_helpers.talon_helpers",
        "documentation": {}
    },
    {
        "label": "create_name",
        "kind": 2,
        "importPath": "plugin.talon_helpers.talon_helpers",
        "description": "plugin.talon_helpers.talon_helpers",
        "peekOfCode": "def create_name(text, max_len=20):\n    return \"_\".join(list(islice(pattern.findall(text), max_len))).lower()\n@mod.action_class\nclass Actions:\n    def talon_add_context_clipboard_python():\n        \"\"\"Adds os-specific context info to the clipboard for the focused app for .py files. Assumes you've a Module named mod declared.\"\"\"\n        friendly_name = actions.app.name()\n        # print(actions.app.executable())\n        executable = actions.app.executable().split(os.path.sep)[-1]\n        app_name = create_name(friendly_name.replace(\".exe\", \"\"))",
        "detail": "plugin.talon_helpers.talon_helpers",
        "documentation": {}
    },
    {
        "label": "pp",
        "kind": 5,
        "importPath": "plugin.talon_helpers.talon_helpers",
        "description": "plugin.talon_helpers.talon_helpers",
        "peekOfCode": "pp = pprint.PrettyPrinter()\nmod = Module()\npattern = re.compile(r\"[A-Z][a-z]*|[a-z]+|\\d\")\ndef create_name(text, max_len=20):\n    return \"_\".join(list(islice(pattern.findall(text), max_len))).lower()\n@mod.action_class\nclass Actions:\n    def talon_add_context_clipboard_python():\n        \"\"\"Adds os-specific context info to the clipboard for the focused app for .py files. Assumes you've a Module named mod declared.\"\"\"\n        friendly_name = actions.app.name()",
        "detail": "plugin.talon_helpers.talon_helpers",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "plugin.talon_helpers.talon_helpers",
        "description": "plugin.talon_helpers.talon_helpers",
        "peekOfCode": "mod = Module()\npattern = re.compile(r\"[A-Z][a-z]*|[a-z]+|\\d\")\ndef create_name(text, max_len=20):\n    return \"_\".join(list(islice(pattern.findall(text), max_len))).lower()\n@mod.action_class\nclass Actions:\n    def talon_add_context_clipboard_python():\n        \"\"\"Adds os-specific context info to the clipboard for the focused app for .py files. Assumes you've a Module named mod declared.\"\"\"\n        friendly_name = actions.app.name()\n        # print(actions.app.executable())",
        "detail": "plugin.talon_helpers.talon_helpers",
        "documentation": {}
    },
    {
        "label": "pattern",
        "kind": 5,
        "importPath": "plugin.talon_helpers.talon_helpers",
        "description": "plugin.talon_helpers.talon_helpers",
        "peekOfCode": "pattern = re.compile(r\"[A-Z][a-z]*|[a-z]+|\\d\")\ndef create_name(text, max_len=20):\n    return \"_\".join(list(islice(pattern.findall(text), max_len))).lower()\n@mod.action_class\nclass Actions:\n    def talon_add_context_clipboard_python():\n        \"\"\"Adds os-specific context info to the clipboard for the focused app for .py files. Assumes you've a Module named mod declared.\"\"\"\n        friendly_name = actions.app.name()\n        # print(actions.app.executable())\n        executable = actions.app.executable().split(os.path.sep)[-1]",
        "detail": "plugin.talon_helpers.talon_helpers",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "plugin.text_navigation.text_navigation",
        "description": "plugin.text_navigation.text_navigation",
        "peekOfCode": "class Actions:\n    def navigation(\n        navigation_action: str,  # GO, EXTEND, SELECT, DELETE, CUT, COPY\n        direction: str,  # up, down, left, right\n        navigation_target_name: str,\n        before_or_after: str,  # BEFORE, AFTER, DEFAULT\n        regex: re.Pattern,\n        occurrence_number: int,\n    ):\n        \"\"\"Navigate in `direction` to the occurrence_number-th time that `regex` occurs, then execute `navigation_action` at the given `before_or_after` position.\"\"\"",
        "detail": "plugin.text_navigation.text_navigation",
        "documentation": {}
    },
    {
        "label": "navigation_target",
        "kind": 2,
        "importPath": "plugin.text_navigation.text_navigation",
        "description": "plugin.text_navigation.text_navigation",
        "peekOfCode": "def navigation_target(m) -> re.Pattern:\n    \"\"\"A target to navigate to. Returns a regular expression.\"\"\"\n    if hasattr(m, \"any_alphanumeric_key\"):\n        return re.compile(re.escape(m.any_alphanumeric_key), re.IGNORECASE)\n    if hasattr(m, \"navigation_target_name\"):\n        return re.compile(m.navigation_target_name)\n    return re.compile(re.escape(m.text), re.IGNORECASE)\n@mod.action_class\nclass Actions:\n    def navigation(",
        "detail": "plugin.text_navigation.text_navigation",
        "documentation": {}
    },
    {
        "label": "get_text_left",
        "kind": 2,
        "importPath": "plugin.text_navigation.text_navigation",
        "description": "plugin.text_navigation.text_navigation",
        "peekOfCode": "def get_text_left():\n    actions.edit.extend_line_start()\n    text = actions.edit.selected_text()\n    actions.edit.right()\n    return text\ndef get_text_right():\n    actions.edit.extend_line_end()\n    text = actions.edit.selected_text()\n    actions.edit.left()\n    return text",
        "detail": "plugin.text_navigation.text_navigation",
        "documentation": {}
    },
    {
        "label": "get_text_right",
        "kind": 2,
        "importPath": "plugin.text_navigation.text_navigation",
        "description": "plugin.text_navigation.text_navigation",
        "peekOfCode": "def get_text_right():\n    actions.edit.extend_line_end()\n    text = actions.edit.selected_text()\n    actions.edit.left()\n    return text\ndef get_text_up():\n    actions.edit.up()\n    actions.edit.line_end()\n    for j in range(0, text_navigation_max_line_search.get()):\n        actions.edit.extend_up()",
        "detail": "plugin.text_navigation.text_navigation",
        "documentation": {}
    },
    {
        "label": "get_text_up",
        "kind": 2,
        "importPath": "plugin.text_navigation.text_navigation",
        "description": "plugin.text_navigation.text_navigation",
        "peekOfCode": "def get_text_up():\n    actions.edit.up()\n    actions.edit.line_end()\n    for j in range(0, text_navigation_max_line_search.get()):\n        actions.edit.extend_up()\n    actions.edit.extend_line_start()\n    text = actions.edit.selected_text()\n    actions.edit.right()\n    return text\ndef get_text_down():",
        "detail": "plugin.text_navigation.text_navigation",
        "documentation": {}
    },
    {
        "label": "get_text_down",
        "kind": 2,
        "importPath": "plugin.text_navigation.text_navigation",
        "description": "plugin.text_navigation.text_navigation",
        "peekOfCode": "def get_text_down():\n    actions.edit.down()\n    actions.edit.line_start()\n    for j in range(0, text_navigation_max_line_search.get()):\n        actions.edit.extend_down()\n    actions.edit.extend_line_end()\n    text = actions.edit.selected_text()\n    actions.edit.left()\n    return text\ndef get_current_selection_size():",
        "detail": "plugin.text_navigation.text_navigation",
        "documentation": {}
    },
    {
        "label": "get_current_selection_size",
        "kind": 2,
        "importPath": "plugin.text_navigation.text_navigation",
        "description": "plugin.text_navigation.text_navigation",
        "peekOfCode": "def get_current_selection_size():\n    return len(actions.edit.selected_text())\ndef go_right(i):\n    for j in range(0, i):\n        actions.edit.right()\ndef go_left(i):\n    for j in range(0, i):\n        actions.edit.left()\ndef extend_left(i):\n    for j in range(0, i):",
        "detail": "plugin.text_navigation.text_navigation",
        "documentation": {}
    },
    {
        "label": "go_right",
        "kind": 2,
        "importPath": "plugin.text_navigation.text_navigation",
        "description": "plugin.text_navigation.text_navigation",
        "peekOfCode": "def go_right(i):\n    for j in range(0, i):\n        actions.edit.right()\ndef go_left(i):\n    for j in range(0, i):\n        actions.edit.left()\ndef extend_left(i):\n    for j in range(0, i):\n        actions.edit.extend_left()\ndef extend_right(i):",
        "detail": "plugin.text_navigation.text_navigation",
        "documentation": {}
    },
    {
        "label": "go_left",
        "kind": 2,
        "importPath": "plugin.text_navigation.text_navigation",
        "description": "plugin.text_navigation.text_navigation",
        "peekOfCode": "def go_left(i):\n    for j in range(0, i):\n        actions.edit.left()\ndef extend_left(i):\n    for j in range(0, i):\n        actions.edit.extend_left()\ndef extend_right(i):\n    for j in range(0, i):\n        actions.edit.extend_right()\ndef select(direction, start, end, length):",
        "detail": "plugin.text_navigation.text_navigation",
        "documentation": {}
    },
    {
        "label": "extend_left",
        "kind": 2,
        "importPath": "plugin.text_navigation.text_navigation",
        "description": "plugin.text_navigation.text_navigation",
        "peekOfCode": "def extend_left(i):\n    for j in range(0, i):\n        actions.edit.extend_left()\ndef extend_right(i):\n    for j in range(0, i):\n        actions.edit.extend_right()\ndef select(direction, start, end, length):\n    if direction == \"RIGHT\" or direction == \"DOWN\":\n        go_right(start)\n        extend_right(end - start)",
        "detail": "plugin.text_navigation.text_navigation",
        "documentation": {}
    },
    {
        "label": "extend_right",
        "kind": 2,
        "importPath": "plugin.text_navigation.text_navigation",
        "description": "plugin.text_navigation.text_navigation",
        "peekOfCode": "def extend_right(i):\n    for j in range(0, i):\n        actions.edit.extend_right()\ndef select(direction, start, end, length):\n    if direction == \"RIGHT\" or direction == \"DOWN\":\n        go_right(start)\n        extend_right(end - start)\n    else:\n        go_left(length - end)\n        extend_left(end - start)",
        "detail": "plugin.text_navigation.text_navigation",
        "documentation": {}
    },
    {
        "label": "select",
        "kind": 2,
        "importPath": "plugin.text_navigation.text_navigation",
        "description": "plugin.text_navigation.text_navigation",
        "peekOfCode": "def select(direction, start, end, length):\n    if direction == \"RIGHT\" or direction == \"DOWN\":\n        go_right(start)\n        extend_right(end - start)\n    else:\n        go_left(length - end)\n        extend_left(end - start)\ndef navigate_left(\n    navigation_action,\n    navigation_target_name,",
        "detail": "plugin.text_navigation.text_navigation",
        "documentation": {}
    },
    {
        "label": "navigate_left",
        "kind": 2,
        "importPath": "plugin.text_navigation.text_navigation",
        "description": "plugin.text_navigation.text_navigation",
        "peekOfCode": "def navigate_left(\n    navigation_action,\n    navigation_target_name,\n    before_or_after,\n    regex,\n    occurrence_number,\n    direction,\n):\n    current_selection_length = get_current_selection_size()\n    if current_selection_length > 0:",
        "detail": "plugin.text_navigation.text_navigation",
        "documentation": {}
    },
    {
        "label": "navigate_right",
        "kind": 2,
        "importPath": "plugin.text_navigation.text_navigation",
        "description": "plugin.text_navigation.text_navigation",
        "peekOfCode": "def navigate_right(\n    navigation_action,\n    navigation_target_name,\n    before_or_after,\n    regex,\n    occurrence_number,\n    direction,\n):\n    current_selection_length = get_current_selection_size()\n    if current_selection_length > 0:",
        "detail": "plugin.text_navigation.text_navigation",
        "documentation": {}
    },
    {
        "label": "handle_navigation_action",
        "kind": 2,
        "importPath": "plugin.text_navigation.text_navigation",
        "description": "plugin.text_navigation.text_navigation",
        "peekOfCode": "def handle_navigation_action(\n    navigation_action,\n    navigation_target_name,\n    before_or_after,\n    direction,\n    text,\n    start,\n    end,\n):\n    length = len(text)",
        "detail": "plugin.text_navigation.text_navigation",
        "documentation": {}
    },
    {
        "label": "handle_select",
        "kind": 2,
        "importPath": "plugin.text_navigation.text_navigation",
        "description": "plugin.text_navigation.text_navigation",
        "peekOfCode": "def handle_select(\n    navigation_target_name, before_or_after, direction, text, start, end, length\n):\n    if before_or_after == \"BEFORE\":\n        select_left = length - start\n        text_left = text[:-select_left]\n        match2 = match_backwards(navigation_target_name, 1, text_left)\n        if match2 is None:\n            end = start\n            start = 0",
        "detail": "plugin.text_navigation.text_navigation",
        "documentation": {}
    },
    {
        "label": "handle_move",
        "kind": 2,
        "importPath": "plugin.text_navigation.text_navigation",
        "description": "plugin.text_navigation.text_navigation",
        "peekOfCode": "def handle_move(direction, before_or_after, start, end, length):\n    if direction == \"RIGHT\" or direction == \"DOWN\":\n        if before_or_after == \"BEFORE\":\n            go_right(start)\n        else:\n            go_right(end)\n    else:\n        if before_or_after == \"AFTER\":\n            go_left(length - end)\n        else:",
        "detail": "plugin.text_navigation.text_navigation",
        "documentation": {}
    },
    {
        "label": "handle_extend",
        "kind": 2,
        "importPath": "plugin.text_navigation.text_navigation",
        "description": "plugin.text_navigation.text_navigation",
        "peekOfCode": "def handle_extend(before_or_after, direction, start, end, length):\n    if direction == \"RIGHT\" or direction == \"DOWN\":\n        if before_or_after == \"BEFORE\":\n            extend_right(start)\n        else:\n            extend_right(end)\n    else:\n        if before_or_after == \"AFTER\":\n            extend_left(length - end)\n        else:",
        "detail": "plugin.text_navigation.text_navigation",
        "documentation": {}
    },
    {
        "label": "match_backwards",
        "kind": 2,
        "importPath": "plugin.text_navigation.text_navigation",
        "description": "plugin.text_navigation.text_navigation",
        "peekOfCode": "def match_backwards(regex, occurrence_number, subtext):\n    try:\n        match = list(regex.finditer(subtext))[-occurrence_number]\n        return match\n    except IndexError:\n        return\ndef match_forward(regex, occurrence_number, sub_text):\n    try:\n        match = next(\n            itertools.islice(regex.finditer(sub_text), occurrence_number - 1, None)",
        "detail": "plugin.text_navigation.text_navigation",
        "documentation": {}
    },
    {
        "label": "match_forward",
        "kind": 2,
        "importPath": "plugin.text_navigation.text_navigation",
        "description": "plugin.text_navigation.text_navigation",
        "peekOfCode": "def match_forward(regex, occurrence_number, sub_text):\n    try:\n        match = next(\n            itertools.islice(regex.finditer(sub_text), occurrence_number - 1, None)\n        )\n        return match\n    except StopIteration:\n        return None",
        "detail": "plugin.text_navigation.text_navigation",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "plugin.text_navigation.text_navigation",
        "description": "plugin.text_navigation.text_navigation",
        "peekOfCode": "ctx = Context()\nmod = Module()\ntext_navigation_max_line_search = mod.setting(\n    \"text_navigation_max_line_search\",\n    type=int,\n    default=10,\n    desc=\"the maximum number of rows that will be included in the search for the keywords above and below in <user direction>\",\n)\nmod.list(\n    \"navigation_action\",",
        "detail": "plugin.text_navigation.text_navigation",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "plugin.text_navigation.text_navigation",
        "description": "plugin.text_navigation.text_navigation",
        "peekOfCode": "mod = Module()\ntext_navigation_max_line_search = mod.setting(\n    \"text_navigation_max_line_search\",\n    type=int,\n    default=10,\n    desc=\"the maximum number of rows that will be included in the search for the keywords above and below in <user direction>\",\n)\nmod.list(\n    \"navigation_action\",\n    desc=\"actions to perform, for instance move, select, cut, etc\",",
        "detail": "plugin.text_navigation.text_navigation",
        "documentation": {}
    },
    {
        "label": "text_navigation_max_line_search",
        "kind": 5,
        "importPath": "plugin.text_navigation.text_navigation",
        "description": "plugin.text_navigation.text_navigation",
        "peekOfCode": "text_navigation_max_line_search = mod.setting(\n    \"text_navigation_max_line_search\",\n    type=int,\n    default=10,\n    desc=\"the maximum number of rows that will be included in the search for the keywords above and below in <user direction>\",\n)\nmod.list(\n    \"navigation_action\",\n    desc=\"actions to perform, for instance move, select, cut, etc\",\n)",
        "detail": "plugin.text_navigation.text_navigation",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"self.navigation_action\"]",
        "kind": 5,
        "importPath": "plugin.text_navigation.text_navigation",
        "description": "plugin.text_navigation.text_navigation",
        "peekOfCode": "ctx.lists[\"self.navigation_action\"] = {\n    \"move\": \"GO\",\n    \"extend\": \"EXTEND\",\n    \"select\": \"SELECT\",\n    \"clear\": \"DELETE\",\n    \"cut\": \"CUT\",\n    \"copy\": \"COPY\",\n}\nctx.lists[\"self.before_or_after\"] = {\n    \"before\": \"BEFORE\",",
        "detail": "plugin.text_navigation.text_navigation",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"self.before_or_after\"]",
        "kind": 5,
        "importPath": "plugin.text_navigation.text_navigation",
        "description": "plugin.text_navigation.text_navigation",
        "peekOfCode": "ctx.lists[\"self.before_or_after\"] = {\n    \"before\": \"BEFORE\",\n    \"after\": \"AFTER\",\n    # DEFAULT is also a valid option as input for this capture, but is not directly accessible for the user.\n}\nnavigation_target_names = {\n    \"word\": r\"\\w+\",\n    \"small\": r\"[A-Z]?[a-z0-9]+\",\n    \"big\": r\"[\\S]+\",\n    \"parens\": r\"\\((.*?)\\)\",",
        "detail": "plugin.text_navigation.text_navigation",
        "documentation": {}
    },
    {
        "label": "navigation_target_names",
        "kind": 5,
        "importPath": "plugin.text_navigation.text_navigation",
        "description": "plugin.text_navigation.text_navigation",
        "peekOfCode": "navigation_target_names = {\n    \"word\": r\"\\w+\",\n    \"small\": r\"[A-Z]?[a-z0-9]+\",\n    \"big\": r\"[\\S]+\",\n    \"parens\": r\"\\((.*?)\\)\",\n    \"squares\": r\"\\[(.*?)\\]\",\n    \"braces\": r\"\\{(.*?)\\}\",\n    \"quotes\": r\"\\\"(.*?)\\\"\",\n    \"angles\": r\"\\<(.*?)\\>\",\n    # \"single quotes\": r'\\'(.*?)\\'',",
        "detail": "plugin.text_navigation.text_navigation",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"self.navigation_target_name\"]",
        "kind": 5,
        "importPath": "plugin.text_navigation.text_navigation",
        "description": "plugin.text_navigation.text_navigation",
        "peekOfCode": "ctx.lists[\"self.navigation_target_name\"] = navigation_target_names\n@mod.capture(\n    rule=\"<user.any_alphanumeric_key> | {user.navigation_target_name} | phrase <user.text>\"\n)\ndef navigation_target(m) -> re.Pattern:\n    \"\"\"A target to navigate to. Returns a regular expression.\"\"\"\n    if hasattr(m, \"any_alphanumeric_key\"):\n        return re.compile(re.escape(m.any_alphanumeric_key), re.IGNORECASE)\n    if hasattr(m, \"navigation_target_name\"):\n        return re.compile(m.navigation_target_name)",
        "detail": "plugin.text_navigation.text_navigation",
        "documentation": {}
    },
    {
        "label": "BrowserActions",
        "kind": 6,
        "importPath": "tags.browser.browser",
        "description": "tags.browser.browser",
        "peekOfCode": "class BrowserActions:\n    def address():\n        # Split title by space, check each token and token[1: -1] (it might be in brackets) for valid url.\n        # Prioritize last one if multiple are valid, return empty string if none is valid.\n        tokens = (\n            url[1:-1] if not is_url(url) else url\n            for url in reversed(actions.win.title().split(\" \"))\n        )\n        return next((url for url in tokens if is_url(url)), \"\")",
        "detail": "tags.browser.browser",
        "documentation": {}
    },
    {
        "label": "is_url",
        "kind": 2,
        "importPath": "tags.browser.browser",
        "description": "tags.browser.browser",
        "peekOfCode": "def is_url(url):\n    try:\n        # Valid if url successfully parsed\n        result = urlparse(url)\n        # and contains both scheme (e.g. http) and netloc (e.g. github.com)\n        return all([result.scheme, result.netloc])\n    except ValueError:\n        return False\n@ctx.action_class(\"browser\")\nclass BrowserActions:",
        "detail": "tags.browser.browser",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "tags.browser.browser",
        "description": "tags.browser.browser",
        "peekOfCode": "ctx = Context()\nctx.matches = r\"\"\"\ntag: browser\n\"\"\"\ndef is_url(url):\n    try:\n        # Valid if url successfully parsed\n        result = urlparse(url)\n        # and contains both scheme (e.g. http) and netloc (e.g. github.com)\n        return all([result.scheme, result.netloc])",
        "detail": "tags.browser.browser",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "tags.browser.browser",
        "description": "tags.browser.browser",
        "peekOfCode": "ctx.matches = r\"\"\"\ntag: browser\n\"\"\"\ndef is_url(url):\n    try:\n        # Valid if url successfully parsed\n        result = urlparse(url)\n        # and contains both scheme (e.g. http) and netloc (e.g. github.com)\n        return all([result.scheme, result.netloc])\n    except ValueError:",
        "detail": "tags.browser.browser",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "tags.chapters.chapters",
        "description": "tags.chapters.chapters",
        "peekOfCode": "class Actions:\n    def chapter_current() -> int:\n        \"\"\"Return current chapter number\"\"\"\n    def chapter_next():\n        \"\"\"Go to next chapter\"\"\"\n        actions.user.chapter_jump(actions.user.chapter_current() + 1)\n    def chapter_previous():\n        \"\"\"Go to previous chapter\"\"\"\n        actions.user.chapter_jump(actions.user.chapter_current() - 1)\n    def chapter_jump(number: int):",
        "detail": "tags.chapters.chapters",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "tags.chapters.chapters",
        "description": "tags.chapters.chapters",
        "peekOfCode": "mod = Module()\nmod.tag(\"chapters\", desc=\"Reader app with chapter navigation\")\n# --- Define actions ---\n@mod.action_class\nclass Actions:\n    def chapter_current() -> int:\n        \"\"\"Return current chapter number\"\"\"\n    def chapter_next():\n        \"\"\"Go to next chapter\"\"\"\n        actions.user.chapter_jump(actions.user.chapter_current() + 1)",
        "detail": "tags.chapters.chapters",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "tags.debugger.debugger",
        "description": "tags.debugger.debugger",
        "peekOfCode": "class Actions:\n    def debugger_step_into():\n        \"\"\"Step into an instruction in the debugger\"\"\"\n    def debugger_step_over():\n        \"\"\"Step over an instruction in the debugger\"\"\"\n    def debugger_step_line():\n        \"\"\"Step into a source line in the debugger\"\"\"\n    def debugger_step_over_line():\n        \"\"\"Step over a source line in the debugger\"\"\"\n    def debugger_step_out():",
        "detail": "tags.debugger.debugger",
        "documentation": {}
    },
    {
        "label": "registers",
        "kind": 2,
        "importPath": "tags.debugger.debugger",
        "description": "tags.debugger.debugger",
        "peekOfCode": "def registers(m) -> str:\n    \"Returns a register\"\n    return m.registers\n@mod.action_class\nclass Actions:\n    def debugger_step_into():\n        \"\"\"Step into an instruction in the debugger\"\"\"\n    def debugger_step_over():\n        \"\"\"Step over an instruction in the debugger\"\"\"\n    def debugger_step_line():",
        "detail": "tags.debugger.debugger",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "tags.debugger.debugger",
        "description": "tags.debugger.debugger",
        "peekOfCode": "mod = Module()\nmod.tag(\"debugger\", desc=\"Tag for enabling generic debugger commands\")\nctx = Context()\nctx.matches = r\"\"\"\ntag: debugger\n\"\"\"\nx86_registers = {\n    \"air\": \"eax\",\n    \"bat\": \"ebx\",\n    \"cap\": \"ecx\",",
        "detail": "tags.debugger.debugger",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "tags.debugger.debugger",
        "description": "tags.debugger.debugger",
        "peekOfCode": "ctx = Context()\nctx.matches = r\"\"\"\ntag: debugger\n\"\"\"\nx86_registers = {\n    \"air\": \"eax\",\n    \"bat\": \"ebx\",\n    \"cap\": \"ecx\",\n    \"drum\": \"edx\",\n    \"source\": \"esi\",",
        "detail": "tags.debugger.debugger",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "tags.debugger.debugger",
        "description": "tags.debugger.debugger",
        "peekOfCode": "ctx.matches = r\"\"\"\ntag: debugger\n\"\"\"\nx86_registers = {\n    \"air\": \"eax\",\n    \"bat\": \"ebx\",\n    \"cap\": \"ecx\",\n    \"drum\": \"edx\",\n    \"source\": \"esi\",\n    \"dest\": \"edi\",",
        "detail": "tags.debugger.debugger",
        "documentation": {}
    },
    {
        "label": "x86_registers",
        "kind": 5,
        "importPath": "tags.debugger.debugger",
        "description": "tags.debugger.debugger",
        "peekOfCode": "x86_registers = {\n    \"air\": \"eax\",\n    \"bat\": \"ebx\",\n    \"cap\": \"ecx\",\n    \"drum\": \"edx\",\n    \"source\": \"esi\",\n    \"dest\": \"edi\",\n    \"stack\": \"esp\",\n    \"frame\": \"ebp\",\n    \"instruction\": \"eip\",",
        "detail": "tags.debugger.debugger",
        "documentation": {}
    },
    {
        "label": "x64_registers",
        "kind": 5,
        "importPath": "tags.debugger.debugger",
        "description": "tags.debugger.debugger",
        "peekOfCode": "x64_registers = {\n    # general purpose\n    \"air\": \"rax\",\n    \"racks\": \"rax\",\n    \"bat\": \"rbx\",\n    \"cap\": \"rcx\",\n    \"drum\": \"rdx\",\n    \"source\": \"rsi\",\n    \"dest\": \"rdi\",\n    \"stack\": \"rsp\",",
        "detail": "tags.debugger.debugger",
        "documentation": {}
    },
    {
        "label": "windows_x64_register_parameters",
        "kind": 5,
        "importPath": "tags.debugger.debugger",
        "description": "tags.debugger.debugger",
        "peekOfCode": "windows_x64_register_parameters = [\"rcx\", \"rdx\", \"r8\", \"r9\"]\n# XXX - make this dynamic\nctx.lists[\"self.registers\"] = x64_registers\n# assembly_languages = {\n#    \"x86\": x86_registers,\n#    \"x64\": x64_registers,\n# }\nmod.list(\"registers\", desc=\"Main architecture register set\")\n@mod.capture(rule=\"{self.registers}\")\ndef registers(m) -> str:",
        "detail": "tags.debugger.debugger",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"self.registers\"]",
        "kind": 5,
        "importPath": "tags.debugger.debugger",
        "description": "tags.debugger.debugger",
        "peekOfCode": "ctx.lists[\"self.registers\"] = x64_registers\n# assembly_languages = {\n#    \"x86\": x86_registers,\n#    \"x64\": x64_registers,\n# }\nmod.list(\"registers\", desc=\"Main architecture register set\")\n@mod.capture(rule=\"{self.registers}\")\ndef registers(m) -> str:\n    \"Returns a register\"\n    return m.registers",
        "detail": "tags.debugger.debugger",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "tags.emoji.emoji",
        "description": "tags.emoji.emoji",
        "peekOfCode": "mod = Module()\nmod.tag(\"emoji\", desc=\"Emoji, ascii emoticons and kaomoji\")\n# Context matching\nctx = Context()\nctx.matches = \"\"\"\ntag: user.emoji\n\"\"\"\n# --- Define and implement lists ---\npath = Path(__file__).parents[0]\nmod.list(\"emoticon\", desc=\"Western emoticons (ascii)\")",
        "detail": "tags.emoji.emoji",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "tags.emoji.emoji",
        "description": "tags.emoji.emoji",
        "peekOfCode": "ctx = Context()\nctx.matches = \"\"\"\ntag: user.emoji\n\"\"\"\n# --- Define and implement lists ---\npath = Path(__file__).parents[0]\nmod.list(\"emoticon\", desc=\"Western emoticons (ascii)\")\nwith open(path / \"emoticon.csv\") as f:\n    ctx.lists[\"user.emoticon\"] = {\n        k.strip(): v.strip() for k, v in [line.split(\",\", 1) for line in f]",
        "detail": "tags.emoji.emoji",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "tags.emoji.emoji",
        "description": "tags.emoji.emoji",
        "peekOfCode": "ctx.matches = \"\"\"\ntag: user.emoji\n\"\"\"\n# --- Define and implement lists ---\npath = Path(__file__).parents[0]\nmod.list(\"emoticon\", desc=\"Western emoticons (ascii)\")\nwith open(path / \"emoticon.csv\") as f:\n    ctx.lists[\"user.emoticon\"] = {\n        k.strip(): v.strip() for k, v in [line.split(\",\", 1) for line in f]\n    }",
        "detail": "tags.emoji.emoji",
        "documentation": {}
    },
    {
        "label": "path",
        "kind": 5,
        "importPath": "tags.emoji.emoji",
        "description": "tags.emoji.emoji",
        "peekOfCode": "path = Path(__file__).parents[0]\nmod.list(\"emoticon\", desc=\"Western emoticons (ascii)\")\nwith open(path / \"emoticon.csv\") as f:\n    ctx.lists[\"user.emoticon\"] = {\n        k.strip(): v.strip() for k, v in [line.split(\",\", 1) for line in f]\n    }\nmod.list(\"emoji\", desc=\"Emoji (unicode)\")\nwith open(path / \"emoji.csv\") as f:\n    ctx.lists[\"user.emoji\"] = {\n        k.strip(): v.strip() for k, v in [line.split(\",\", 1) for line in f]",
        "detail": "tags.emoji.emoji",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "tags.file_manager.file_manager",
        "description": "tags.file_manager.file_manager",
        "peekOfCode": "class Actions:\n    def file_manager_current_path() -> str:\n        \"\"\"Returns the current path for the active file manager.\"\"\"\n        return \"\"\n    def file_manager_open_parent():\n        \"\"\"file_manager_open_parent\"\"\"\n        return\n    def file_manager_go_forward():\n        \"\"\"file_manager_go_forward_directory\"\"\"\n    def file_manager_go_back():",
        "detail": "tags.file_manager.file_manager",
        "documentation": {}
    },
    {
        "label": "is_dir",
        "kind": 2,
        "importPath": "tags.file_manager.file_manager",
        "description": "tags.file_manager.file_manager",
        "peekOfCode": "def is_dir(f):\n    try:\n        return f.is_dir()\n    except:\n        return False\ndef is_file(f):\n    try:\n        return f.is_file()\n    except:\n        return False",
        "detail": "tags.file_manager.file_manager",
        "documentation": {}
    },
    {
        "label": "is_file",
        "kind": 2,
        "importPath": "tags.file_manager.file_manager",
        "description": "tags.file_manager.file_manager",
        "peekOfCode": "def is_file(f):\n    try:\n        return f.is_file()\n    except:\n        return False\ndef get_directory_map(current_path):\n    directories = [\n        f.name\n        for f in islice(\n            current_path.iterdir(), settings.get(\"user.file_manager_folder_limit\", 1000)",
        "detail": "tags.file_manager.file_manager",
        "documentation": {}
    },
    {
        "label": "get_directory_map",
        "kind": 2,
        "importPath": "tags.file_manager.file_manager",
        "description": "tags.file_manager.file_manager",
        "peekOfCode": "def get_directory_map(current_path):\n    directories = [\n        f.name\n        for f in islice(\n            current_path.iterdir(), settings.get(\"user.file_manager_folder_limit\", 1000)\n        )\n        if is_dir(f)\n    ]\n    directories.sort(key=str.casefold)\n    return actions.user.create_spoken_forms_from_list(",
        "detail": "tags.file_manager.file_manager",
        "documentation": {}
    },
    {
        "label": "get_file_map",
        "kind": 2,
        "importPath": "tags.file_manager.file_manager",
        "description": "tags.file_manager.file_manager",
        "peekOfCode": "def get_file_map(current_path):\n    files = [\n        f.name\n        for f in islice(\n            current_path.iterdir(), settings.get(\"user.file_manager_file_limit\", 1000)\n        )\n        if is_file(f)\n    ]\n    files.sort(key=str.casefold)\n    return actions.user.create_spoken_forms_from_list(",
        "detail": "tags.file_manager.file_manager",
        "documentation": {}
    },
    {
        "label": "gui_folders",
        "kind": 2,
        "importPath": "tags.file_manager.file_manager",
        "description": "tags.file_manager.file_manager",
        "peekOfCode": "def gui_folders(gui: imgui.GUI):\n    global current_folder_page, total_folder_pages\n    total_folder_pages = math.ceil(\n        len(ctx.lists[\"self.file_manager_directories\"]) / setting_imgui_limit.get()\n    )\n    gui.text(f\"Select a directory ({current_folder_page}/{total_folder_pages})\")\n    gui.line()\n    index = 1\n    current_index = (current_folder_page - 1) * setting_imgui_limit.get()\n    while index <= setting_imgui_limit.get() and current_index < len(folder_selections):",
        "detail": "tags.file_manager.file_manager",
        "documentation": {}
    },
    {
        "label": "gui_files",
        "kind": 2,
        "importPath": "tags.file_manager.file_manager",
        "description": "tags.file_manager.file_manager",
        "peekOfCode": "def gui_files(gui: imgui.GUI):\n    global file_selections, current_file_page, total_file_pages\n    total_file_pages = math.ceil(len(file_selections) / setting_imgui_limit.get())\n    gui.text(f\"Select a file ({current_file_page}/{total_file_pages})\")\n    gui.line()\n    index = 1\n    current_index = (current_file_page - 1) * setting_imgui_limit.get()\n    while index <= setting_imgui_limit.get() and current_index < len(file_selections):\n        name = (\n            (file_selections[current_index][: setting_imgui_string_limit.get()] + \"..\")",
        "detail": "tags.file_manager.file_manager",
        "documentation": {}
    },
    {
        "label": "clear_lists",
        "kind": 2,
        "importPath": "tags.file_manager.file_manager",
        "description": "tags.file_manager.file_manager",
        "peekOfCode": "def clear_lists():\n    global folder_selections, file_selections\n    if (\n        len(ctx.lists[\"self.file_manager_directories\"]) > 0\n        or len(ctx.lists[\"self.file_manager_files\"]) > 0\n    ):\n        current_folder_page = current_file_page = 1\n        ctx.lists[\"self.file_manager_directories\"] = []\n        ctx.lists[\"self.file_manager_files\"] = []\n        folder_selections = []",
        "detail": "tags.file_manager.file_manager",
        "documentation": {}
    },
    {
        "label": "update_gui",
        "kind": 2,
        "importPath": "tags.file_manager.file_manager",
        "description": "tags.file_manager.file_manager",
        "peekOfCode": "def update_gui():\n    if gui_folders.showing or setting_auto_show_pickers.get() >= 1:\n        gui_folders.show()\n        gui_files.show()\ndef update_lists(path=None):\n    global folder_selections, file_selections, current_folder_page, current_file_page\n    is_valid_path = False\n    if not path:\n        path = actions.user.file_manager_current_path()\n    directories = {}",
        "detail": "tags.file_manager.file_manager",
        "documentation": {}
    },
    {
        "label": "update_lists",
        "kind": 2,
        "importPath": "tags.file_manager.file_manager",
        "description": "tags.file_manager.file_manager",
        "peekOfCode": "def update_lists(path=None):\n    global folder_selections, file_selections, current_folder_page, current_file_page\n    is_valid_path = False\n    if not path:\n        path = actions.user.file_manager_current_path()\n    directories = {}\n    files = {}\n    folder_selections = []\n    file_selections = []\n    # print(path)",
        "detail": "tags.file_manager.file_manager",
        "documentation": {}
    },
    {
        "label": "win_event_handler",
        "kind": 2,
        "importPath": "tags.file_manager.file_manager",
        "description": "tags.file_manager.file_manager",
        "peekOfCode": "def win_event_handler(window):\n    global cached_path\n    # on windows, we get events from the clock\n    # and such, so this check is important\n    if not window.app.exe or window != ui.active_window():\n        return\n    path = actions.user.file_manager_current_path()\n    if \"user.file_manager\" not in registry.tags:\n        actions.user.file_manager_hide_pickers()\n        clear_lists()",
        "detail": "tags.file_manager.file_manager",
        "documentation": {}
    },
    {
        "label": "register_events",
        "kind": 2,
        "importPath": "tags.file_manager.file_manager",
        "description": "tags.file_manager.file_manager",
        "peekOfCode": "def register_events():\n    ui.register(\"win_title\", win_event_handler)\n    ui.register(\"win_focus\", win_event_handler)\n# prevent scary errors in the log by waiting for talon to be fully loaded\n# before registering the events\napp.register(\"ready\", register_events)",
        "detail": "tags.file_manager.file_manager",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "tags.file_manager.file_manager",
        "description": "tags.file_manager.file_manager",
        "peekOfCode": "mod = Module()\nctx = Context()\nmod.tag(\"file_manager\", desc=\"Tag for enabling generic file management commands\")\nmod.list(\"file_manager_directories\", desc=\"List of subdirectories for the current path\")\nmod.list(\"file_manager_files\", desc=\"List of files at the root of the current path\")\nwords_to_exclude = [\n    \"and\",\n    \"zero\",\n    \"one\",\n    \"two\",",
        "detail": "tags.file_manager.file_manager",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "tags.file_manager.file_manager",
        "description": "tags.file_manager.file_manager",
        "peekOfCode": "ctx = Context()\nmod.tag(\"file_manager\", desc=\"Tag for enabling generic file management commands\")\nmod.list(\"file_manager_directories\", desc=\"List of subdirectories for the current path\")\nmod.list(\"file_manager_files\", desc=\"List of files at the root of the current path\")\nwords_to_exclude = [\n    \"and\",\n    \"zero\",\n    \"one\",\n    \"two\",\n    \"three\",",
        "detail": "tags.file_manager.file_manager",
        "documentation": {}
    },
    {
        "label": "words_to_exclude",
        "kind": 5,
        "importPath": "tags.file_manager.file_manager",
        "description": "tags.file_manager.file_manager",
        "peekOfCode": "words_to_exclude = [\n    \"and\",\n    \"zero\",\n    \"one\",\n    \"two\",\n    \"three\",\n    \"for\",\n    \"four\",\n    \"five\",\n    \"six\",",
        "detail": "tags.file_manager.file_manager",
        "documentation": {}
    },
    {
        "label": "setting_auto_show_pickers",
        "kind": 5,
        "importPath": "tags.file_manager.file_manager",
        "description": "tags.file_manager.file_manager",
        "peekOfCode": "setting_auto_show_pickers = mod.setting(\n    \"file_manager_auto_show_pickers\",\n    type=int,\n    default=0,\n    desc=\"Enable to show the file/directories pickers automatically\",\n)\nsetting_folder_limit = mod.setting(\n    \"file_manager_folder_limit\",\n    type=int,\n    default=1000,",
        "detail": "tags.file_manager.file_manager",
        "documentation": {}
    },
    {
        "label": "setting_folder_limit",
        "kind": 5,
        "importPath": "tags.file_manager.file_manager",
        "description": "tags.file_manager.file_manager",
        "peekOfCode": "setting_folder_limit = mod.setting(\n    \"file_manager_folder_limit\",\n    type=int,\n    default=1000,\n    desc=\"Maximum number of files/folders to iterate\",\n)\nsetting_file_limit = mod.setting(\n    \"file_manager_file_limit\",\n    type=int,\n    default=1000,",
        "detail": "tags.file_manager.file_manager",
        "documentation": {}
    },
    {
        "label": "setting_file_limit",
        "kind": 5,
        "importPath": "tags.file_manager.file_manager",
        "description": "tags.file_manager.file_manager",
        "peekOfCode": "setting_file_limit = mod.setting(\n    \"file_manager_file_limit\",\n    type=int,\n    default=1000,\n    desc=\"Maximum number of files to iterate\",\n)\nsetting_imgui_limit = mod.setting(\n    \"file_manager_imgui_limit\",\n    type=int,\n    default=20,",
        "detail": "tags.file_manager.file_manager",
        "documentation": {}
    },
    {
        "label": "setting_imgui_limit",
        "kind": 5,
        "importPath": "tags.file_manager.file_manager",
        "description": "tags.file_manager.file_manager",
        "peekOfCode": "setting_imgui_limit = mod.setting(\n    \"file_manager_imgui_limit\",\n    type=int,\n    default=20,\n    desc=\"Maximum number of files/folders to display in the imgui\",\n)\nsetting_imgui_string_limit = mod.setting(\n    \"file_manager_string_limit\",\n    type=int,\n    default=20,",
        "detail": "tags.file_manager.file_manager",
        "documentation": {}
    },
    {
        "label": "setting_imgui_string_limit",
        "kind": 5,
        "importPath": "tags.file_manager.file_manager",
        "description": "tags.file_manager.file_manager",
        "peekOfCode": "setting_imgui_string_limit = mod.setting(\n    \"file_manager_string_limit\",\n    type=int,\n    default=20,\n    desc=\"Maximum like of string to display in the imgui\",\n)\ncached_path = None\nfile_selections = folder_selections = []\ncurrent_file_page = current_folder_page = 1\nctx.lists[\"self.file_manager_directories\"] = []",
        "detail": "tags.file_manager.file_manager",
        "documentation": {}
    },
    {
        "label": "cached_path",
        "kind": 5,
        "importPath": "tags.file_manager.file_manager",
        "description": "tags.file_manager.file_manager",
        "peekOfCode": "cached_path = None\nfile_selections = folder_selections = []\ncurrent_file_page = current_folder_page = 1\nctx.lists[\"self.file_manager_directories\"] = []\nctx.lists[\"self.file_manager_files\"] = []\n@mod.action_class\nclass Actions:\n    def file_manager_current_path() -> str:\n        \"\"\"Returns the current path for the active file manager.\"\"\"\n        return \"\"",
        "detail": "tags.file_manager.file_manager",
        "documentation": {}
    },
    {
        "label": "file_selections",
        "kind": 5,
        "importPath": "tags.file_manager.file_manager",
        "description": "tags.file_manager.file_manager",
        "peekOfCode": "file_selections = folder_selections = []\ncurrent_file_page = current_folder_page = 1\nctx.lists[\"self.file_manager_directories\"] = []\nctx.lists[\"self.file_manager_files\"] = []\n@mod.action_class\nclass Actions:\n    def file_manager_current_path() -> str:\n        \"\"\"Returns the current path for the active file manager.\"\"\"\n        return \"\"\n    def file_manager_open_parent():",
        "detail": "tags.file_manager.file_manager",
        "documentation": {}
    },
    {
        "label": "current_file_page",
        "kind": 5,
        "importPath": "tags.file_manager.file_manager",
        "description": "tags.file_manager.file_manager",
        "peekOfCode": "current_file_page = current_folder_page = 1\nctx.lists[\"self.file_manager_directories\"] = []\nctx.lists[\"self.file_manager_files\"] = []\n@mod.action_class\nclass Actions:\n    def file_manager_current_path() -> str:\n        \"\"\"Returns the current path for the active file manager.\"\"\"\n        return \"\"\n    def file_manager_open_parent():\n        \"\"\"file_manager_open_parent\"\"\"",
        "detail": "tags.file_manager.file_manager",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"self.file_manager_directories\"]",
        "kind": 5,
        "importPath": "tags.file_manager.file_manager",
        "description": "tags.file_manager.file_manager",
        "peekOfCode": "ctx.lists[\"self.file_manager_directories\"] = []\nctx.lists[\"self.file_manager_files\"] = []\n@mod.action_class\nclass Actions:\n    def file_manager_current_path() -> str:\n        \"\"\"Returns the current path for the active file manager.\"\"\"\n        return \"\"\n    def file_manager_open_parent():\n        \"\"\"file_manager_open_parent\"\"\"\n        return",
        "detail": "tags.file_manager.file_manager",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"self.file_manager_files\"]",
        "kind": 5,
        "importPath": "tags.file_manager.file_manager",
        "description": "tags.file_manager.file_manager",
        "peekOfCode": "ctx.lists[\"self.file_manager_files\"] = []\n@mod.action_class\nclass Actions:\n    def file_manager_current_path() -> str:\n        \"\"\"Returns the current path for the active file manager.\"\"\"\n        return \"\"\n    def file_manager_open_parent():\n        \"\"\"file_manager_open_parent\"\"\"\n        return\n    def file_manager_go_forward():",
        "detail": "tags.file_manager.file_manager",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "tags.find_and_replace.find_and_replace",
        "description": "tags.find_and_replace.find_and_replace",
        "peekOfCode": "class Actions:\n    def find(text: str):\n        \"\"\"Finds text in current editor\"\"\"\n    def find_next():\n        \"\"\"Navigates to the next occurrence\"\"\"\n    def find_previous():\n        \"\"\"Navigates to the previous occurrence\"\"\"\n    def find_everywhere(text: str):\n        \"\"\"Finds text across project\"\"\"\n    def find_toggle_match_by_case():",
        "detail": "tags.find_and_replace.find_and_replace",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "tags.find_and_replace.find_and_replace",
        "description": "tags.find_and_replace.find_and_replace",
        "peekOfCode": "mod = Module()\nmod.tag(\"find_and_replace\", desc=\"Tag for enabling generic find and replace commands\")\n@mod.action_class\nclass Actions:\n    def find(text: str):\n        \"\"\"Finds text in current editor\"\"\"\n    def find_next():\n        \"\"\"Navigates to the next occurrence\"\"\"\n    def find_previous():\n        \"\"\"Navigates to the previous occurrence\"\"\"",
        "detail": "tags.find_and_replace.find_and_replace",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "tags.line_commands.line_commands",
        "description": "tags.line_commands.line_commands",
        "peekOfCode": "class Actions:\n    def extend_until_line(line: int):\n        \"\"\"Extends the selection from current line to the specified line\"\"\"\n    def select_range(line_start: int, line_end: int):\n        \"\"\"Selects lines from line_start to line line_end\"\"\"\n        actions.edit.jump_line(line_start)\n        actions.edit.extend_line_end()\n        number_of_lines = line_end - line_start\n        for i in range(0, number_of_lines):\n            actions.edit.extend_line_down()",
        "detail": "tags.line_commands.line_commands",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "tags.line_commands.line_commands",
        "description": "tags.line_commands.line_commands",
        "peekOfCode": "mod = Module()\nmod.tag(\n    \"line_commands\",\n    desc=\"Tag for enabling generic line navigation and selection commands\",\n)\n@mod.action_class\nclass Actions:\n    def extend_until_line(line: int):\n        \"\"\"Extends the selection from current line to the specified line\"\"\"\n    def select_range(line_start: int, line_end: int):",
        "detail": "tags.line_commands.line_commands",
        "documentation": {}
    },
    {
        "label": "messaging_actions",
        "kind": 6,
        "importPath": "tags.messaging.messaging",
        "description": "tags.messaging.messaging",
        "peekOfCode": "class messaging_actions:\n    # Navigation and UI components\n    def messaging_workspace_previous():\n        \"\"\"Move to previous workspace/server\"\"\"\n    def messaging_workspace_next():\n        \"\"\"Move to next qorkspace/server\"\"\"\n    def messaging_open_channel_picker():\n        \"\"\"Open channel picker\"\"\"\n    def messaging_channel_previous():\n        \"\"\"Move to previous channel\"\"\"",
        "detail": "tags.messaging.messaging",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "tags.messaging.messaging",
        "description": "tags.messaging.messaging",
        "peekOfCode": "mod = Module()\nmod.tag(\"messaging\", desc=\"Tag for generic multi-channel messaging apps\")\n@mod.action_class\nclass messaging_actions:\n    # Navigation and UI components\n    def messaging_workspace_previous():\n        \"\"\"Move to previous workspace/server\"\"\"\n    def messaging_workspace_next():\n        \"\"\"Move to next qorkspace/server\"\"\"\n    def messaging_open_channel_picker():",
        "detail": "tags.messaging.messaging",
        "documentation": {}
    },
    {
        "label": "multiple_cursor_actions",
        "kind": 6,
        "importPath": "tags.multiple_cursors.multiple_cursors",
        "description": "tags.multiple_cursors.multiple_cursors",
        "peekOfCode": "class multiple_cursor_actions:\n    def multi_cursor_enable():\n        \"\"\"Enables multi-cursor mode\"\"\"\n    def multi_cursor_disable():\n        \"\"\"Disables multi-cursor mode\"\"\"\n    def multi_cursor_add_above():\n        \"\"\"Adds cursor to line above\"\"\"\n    def multi_cursor_add_below():\n        \"\"\"Adds cursor to line below\"\"\"\n    def multi_cursor_select_fewer_occurrences():",
        "detail": "tags.multiple_cursors.multiple_cursors",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "tags.multiple_cursors.multiple_cursors",
        "description": "tags.multiple_cursors.multiple_cursors",
        "peekOfCode": "mod = Module()\nmod.tag(\"multiple_cursors\", desc=\"Tag for enabling generic multiple cursor commands\")\n@mod.action_class\nclass multiple_cursor_actions:\n    def multi_cursor_enable():\n        \"\"\"Enables multi-cursor mode\"\"\"\n    def multi_cursor_disable():\n        \"\"\"Disables multi-cursor mode\"\"\"\n    def multi_cursor_add_above():\n        \"\"\"Adds cursor to line above\"\"\"",
        "detail": "tags.multiple_cursors.multiple_cursors",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "tags.pages.pages",
        "description": "tags.pages.pages",
        "peekOfCode": "class Actions:\n    def page_current() -> int:\n        \"\"\"Return current page number\"\"\"\n    def page_next():\n        \"\"\"Go to next page\"\"\"\n        actions.user.page_jump(actions.user.page_current() + 1)\n    def page_previous():\n        \"\"\"Go to previous page\"\"\"\n        actions.user.page_jump(actions.user.page_current() - 1)\n    def page_jump(number: int):",
        "detail": "tags.pages.pages",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "tags.pages.pages",
        "description": "tags.pages.pages",
        "peekOfCode": "mod = Module()\nmod.tag(\"pages\", desc=\"Anything with page navigation\")\n# --- Define actions ---\n@mod.action_class\nclass Actions:\n    def page_current() -> int:\n        \"\"\"Return current page number\"\"\"\n    def page_next():\n        \"\"\"Go to next page\"\"\"\n        actions.user.page_jump(actions.user.page_current() + 1)",
        "detail": "tags.pages.pages",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "tags.snippets.snippets",
        "description": "tags.snippets.snippets",
        "peekOfCode": "class Actions:\n    def snippet_search(text: str):\n        \"\"\"Triggers the program's snippet search\"\"\"\n    def snippet_insert(text: str):\n        \"\"\"Inserts a snippet\"\"\"\n    def snippet_create():\n        \"\"\"Triggers snippet creation\"\"\"\n    def snippet_toggle():\n        \"\"\"Toggles UI for available snippets\"\"\"\n        if gui.showing:",
        "detail": "tags.snippets.snippets",
        "documentation": {}
    },
    {
        "label": "gui",
        "kind": 2,
        "importPath": "tags.snippets.snippets",
        "description": "tags.snippets.snippets",
        "peekOfCode": "def gui(gui: imgui.GUI):\n    gui.text(\"snippets\")\n    gui.line()\n    if \"user.snippets\" in registry.lists:\n        function_list = sorted(registry.lists[\"user.snippets\"][0].keys())\n        # print(str(registry.lists[\"user.snippets\"]))\n        # print(str(registry.lists[\"user.code_common_function\"]))\n        if function_list:\n            for i, entry in enumerate(function_list):\n                gui.text(f\"{entry}\")",
        "detail": "tags.snippets.snippets",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "tags.snippets.snippets",
        "description": "tags.snippets.snippets",
        "peekOfCode": "mod = Module()\nmod.tag(\"snippets\", desc=\"Tag for enabling code snippet-related commands\")\nmod.tag(\"snippets_showing\", desc=\"Active when snippets UI is showing\")\nmod.list(\"snippets\", desc=\"List of code snippets\")\nctx = Context()\n@imgui.open()\ndef gui(gui: imgui.GUI):\n    gui.text(\"snippets\")\n    gui.line()\n    if \"user.snippets\" in registry.lists:",
        "detail": "tags.snippets.snippets",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "tags.snippets.snippets",
        "description": "tags.snippets.snippets",
        "peekOfCode": "ctx = Context()\n@imgui.open()\ndef gui(gui: imgui.GUI):\n    gui.text(\"snippets\")\n    gui.line()\n    if \"user.snippets\" in registry.lists:\n        function_list = sorted(registry.lists[\"user.snippets\"][0].keys())\n        # print(str(registry.lists[\"user.snippets\"]))\n        # print(str(registry.lists[\"user.code_common_function\"]))\n        if function_list:",
        "detail": "tags.snippets.snippets",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "tags.splits.splits",
        "description": "tags.splits.splits",
        "peekOfCode": "class Actions:\n    def split_window_right():\n        \"\"\"Move active tab to right split\"\"\"\n    def split_window_left():\n        \"\"\"Move active tab to left split\"\"\"\n    def split_window_down():\n        \"\"\"Move active tab to lower split\"\"\"\n    def split_window_up():\n        \"\"\"Move active tab to upper split\"\"\"\n    def split_window_vertically():",
        "detail": "tags.splits.splits",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "tags.splits.splits",
        "description": "tags.splits.splits",
        "peekOfCode": "mod = Module()\nmod.tag(\"splits\", desc=\"Tag for enabling generic window split commands\")\n@mod.action_class\nclass Actions:\n    def split_window_right():\n        \"\"\"Move active tab to right split\"\"\"\n    def split_window_left():\n        \"\"\"Move active tab to left split\"\"\"\n    def split_window_down():\n        \"\"\"Move active tab to lower split\"\"\"",
        "detail": "tags.splits.splits",
        "documentation": {}
    },
    {
        "label": "EditActions",
        "kind": 6,
        "importPath": "tags.terminal.readline",
        "description": "tags.terminal.readline",
        "peekOfCode": "class EditActions:\n    def delete_line():\n        actions.edit.line_end()\n        actions.key(\"ctrl-u\")\n    def word_left():\n        actions.key(\"alt-b\")\n    def word_right():\n        actions.key(\"alt-f\")\n    def line_end():\n        actions.key(\"ctrl-e\")",
        "detail": "tags.terminal.readline",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "tags.terminal.readline",
        "description": "tags.terminal.readline",
        "peekOfCode": "class Actions:\n    def cut_line():\n        actions.edit.line_start()\n        actions.key(\"ctrl-k\")\n    def cut_word_left():\n        actions.key(\"ctrl-w\")\n    def cut_word_right():\n        actions.key(\"alt-d\")\n    def copy_word_left():\n        actions.user.cut_word_left()",
        "detail": "tags.terminal.readline",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "tags.terminal.readline",
        "description": "tags.terminal.readline",
        "peekOfCode": "ctx = Context()\nctx.matches = r\"\"\"\ntag: user.readline\n\"\"\"\n@ctx.action_class(\"edit\")\nclass EditActions:\n    def delete_line():\n        actions.edit.line_end()\n        actions.key(\"ctrl-u\")\n    def word_left():",
        "detail": "tags.terminal.readline",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "tags.terminal.readline",
        "description": "tags.terminal.readline",
        "peekOfCode": "ctx.matches = r\"\"\"\ntag: user.readline\n\"\"\"\n@ctx.action_class(\"edit\")\nclass EditActions:\n    def delete_line():\n        actions.edit.line_end()\n        actions.key(\"ctrl-u\")\n    def word_left():\n        actions.key(\"alt-b\")",
        "detail": "tags.terminal.readline",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "tags.terminal.terminal",
        "description": "tags.terminal.terminal",
        "peekOfCode": "class Actions:\n    def terminal_list_directories():\n        \"\"\"Lists directories\"\"\"\n    def terminal_list_all_directories():\n        \"\"\"Lists all directories including hidden\"\"\"\n    def terminal_change_directory(path: str):\n        \"\"\"Lists change directory\"\"\"\n    def terminal_change_directory_root():\n        \"\"\"Root of current drive\"\"\"\n    def terminal_clear_screen():",
        "detail": "tags.terminal.terminal",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "tags.terminal.terminal",
        "description": "tags.terminal.terminal",
        "peekOfCode": "mod = Module()\n@mod.action_class\nclass Actions:\n    def terminal_list_directories():\n        \"\"\"Lists directories\"\"\"\n    def terminal_list_all_directories():\n        \"\"\"Lists all directories including hidden\"\"\"\n    def terminal_change_directory(path: str):\n        \"\"\"Lists change directory\"\"\"\n    def terminal_change_directory_root():",
        "detail": "tags.terminal.terminal",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "tags.terminal.unix_shell",
        "description": "tags.terminal.unix_shell",
        "peekOfCode": "class Actions:\n    # Implements the functions from terminal.py for unix shells\n    def terminal_list_directories():\n        \"\"\"Lists directories\"\"\"\n        actions.insert(\"ls\")\n        actions.key(\"enter\")\n    def terminal_list_all_directories():\n        \"\"\"Lists all directories including hidden\"\"\"\n        actions.insert(\"ls -a\")\n        actions.key(\"enter\")",
        "detail": "tags.terminal.unix_shell",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "tags.terminal.unix_shell",
        "description": "tags.terminal.unix_shell",
        "peekOfCode": "ctx = Context()\nmod = Module()\nctx.matches = r\"\"\"\ntag: user.generic_unix_shell\n\"\"\"\n# Uncomment the following line to enable common unix utilities from unix_utilities.py\n# ctx.tags = [\"user.unix_utilities\"]\n@ctx.action_class(\"user\")\nclass Actions:\n    # Implements the functions from terminal.py for unix shells",
        "detail": "tags.terminal.unix_shell",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "tags.terminal.unix_shell",
        "description": "tags.terminal.unix_shell",
        "peekOfCode": "mod = Module()\nctx.matches = r\"\"\"\ntag: user.generic_unix_shell\n\"\"\"\n# Uncomment the following line to enable common unix utilities from unix_utilities.py\n# ctx.tags = [\"user.unix_utilities\"]\n@ctx.action_class(\"user\")\nclass Actions:\n    # Implements the functions from terminal.py for unix shells\n    def terminal_list_directories():",
        "detail": "tags.terminal.unix_shell",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "tags.terminal.unix_shell",
        "description": "tags.terminal.unix_shell",
        "peekOfCode": "ctx.matches = r\"\"\"\ntag: user.generic_unix_shell\n\"\"\"\n# Uncomment the following line to enable common unix utilities from unix_utilities.py\n# ctx.tags = [\"user.unix_utilities\"]\n@ctx.action_class(\"user\")\nclass Actions:\n    # Implements the functions from terminal.py for unix shells\n    def terminal_list_directories():\n        \"\"\"Lists directories\"\"\"",
        "detail": "tags.terminal.unix_shell",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "tags.terminal.unix_utilities",
        "description": "tags.terminal.unix_utilities",
        "peekOfCode": "ctx = Context()\nmod = Module()\nmod.tag(\n    \"unix_utilities\", desc=\"tag for enabling unix utility commands in your terminal\"\n)\n# Do not edit this dictionary. It is just used to initially populate 'settings/unix_utilities.csv'.\n# Edit that file instead if you want to customize your commands.\ndefault_unix_utilities = {\n    \"ark\": \"awk\",\n    \"base sixty four decode\": \"base64 -d\",",
        "detail": "tags.terminal.unix_utilities",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "tags.terminal.unix_utilities",
        "description": "tags.terminal.unix_utilities",
        "peekOfCode": "mod = Module()\nmod.tag(\n    \"unix_utilities\", desc=\"tag for enabling unix utility commands in your terminal\"\n)\n# Do not edit this dictionary. It is just used to initially populate 'settings/unix_utilities.csv'.\n# Edit that file instead if you want to customize your commands.\ndefault_unix_utilities = {\n    \"ark\": \"awk\",\n    \"base sixty four decode\": \"base64 -d\",\n    \"base sixty four\": \"base64\",",
        "detail": "tags.terminal.unix_utilities",
        "documentation": {}
    },
    {
        "label": "default_unix_utilities",
        "kind": 5,
        "importPath": "tags.terminal.unix_utilities",
        "description": "tags.terminal.unix_utilities",
        "peekOfCode": "default_unix_utilities = {\n    \"ark\": \"awk\",\n    \"base sixty four decode\": \"base64 -d\",\n    \"base sixty four\": \"base64\",\n    \"concat\": \"cat\",\n    \"change mode recurse\": \"chmod -R\",\n    \"change mode\": \"chmod\",\n    \"change owner recurse\": \"chown -R\",\n    \"change owner\": \"chown\",\n    \"curl\": \"curl\",",
        "detail": "tags.terminal.unix_utilities",
        "documentation": {}
    },
    {
        "label": "unix_utilities",
        "kind": 5,
        "importPath": "tags.terminal.unix_utilities",
        "description": "tags.terminal.unix_utilities",
        "peekOfCode": "unix_utilities = get_list_from_csv(\n    \"unix_utilities.csv\",\n    headers=(\"command\", \"spoken\"),\n    default=default_unix_utilities,\n)\nmod.list(\"unix_utility\", desc=\"A common utility command\")\nctx.lists[\"self.unix_utility\"] = unix_utilities",
        "detail": "tags.terminal.unix_utilities",
        "documentation": {}
    },
    {
        "label": "ctx.lists[\"self.unix_utility\"]",
        "kind": 5,
        "importPath": "tags.terminal.unix_utilities",
        "description": "tags.terminal.unix_utilities",
        "peekOfCode": "ctx.lists[\"self.unix_utility\"] = unix_utilities",
        "detail": "tags.terminal.unix_utilities",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "tags.terminal.windows_shell",
        "description": "tags.terminal.windows_shell",
        "peekOfCode": "class Actions:\n    # Implements the functions from terminal.py for unix shells\n    def terminal_list_directories():\n        \"\"\"Lists directories\"\"\"\n        actions.insert(\"ls\")\n        actions.key(\"enter\")\n    def terminal_list_all_directories():\n        \"\"\"Lists all directories including hidden\"\"\"\n        actions.insert(\"ls -force\")\n        actions.key(\"enter\")",
        "detail": "tags.terminal.windows_shell",
        "documentation": {}
    },
    {
        "label": "ctx",
        "kind": 5,
        "importPath": "tags.terminal.windows_shell",
        "description": "tags.terminal.windows_shell",
        "peekOfCode": "ctx = Context()\nmod = Module()\nctx.matches = r\"\"\"\ntag: user.generic_windows_shell\n\"\"\"\n@ctx.action_class(\"user\")\nclass Actions:\n    # Implements the functions from terminal.py for unix shells\n    def terminal_list_directories():\n        \"\"\"Lists directories\"\"\"",
        "detail": "tags.terminal.windows_shell",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "tags.terminal.windows_shell",
        "description": "tags.terminal.windows_shell",
        "peekOfCode": "mod = Module()\nctx.matches = r\"\"\"\ntag: user.generic_windows_shell\n\"\"\"\n@ctx.action_class(\"user\")\nclass Actions:\n    # Implements the functions from terminal.py for unix shells\n    def terminal_list_directories():\n        \"\"\"Lists directories\"\"\"\n        actions.insert(\"ls\")",
        "detail": "tags.terminal.windows_shell",
        "documentation": {}
    },
    {
        "label": "ctx.matches",
        "kind": 5,
        "importPath": "tags.terminal.windows_shell",
        "description": "tags.terminal.windows_shell",
        "peekOfCode": "ctx.matches = r\"\"\"\ntag: user.generic_windows_shell\n\"\"\"\n@ctx.action_class(\"user\")\nclass Actions:\n    # Implements the functions from terminal.py for unix shells\n    def terminal_list_directories():\n        \"\"\"Lists directories\"\"\"\n        actions.insert(\"ls\")\n        actions.key(\"enter\")",
        "detail": "tags.terminal.windows_shell",
        "documentation": {}
    },
    {
        "label": "TextArea",
        "kind": 5,
        "importPath": "test.stubs.talon.experimental.textarea",
        "description": "test.stubs.talon.experimental.textarea",
        "peekOfCode": "TextArea = None\nSpan = None\nDarkThemeLabels = None\nLightThemeLabels = None",
        "detail": "test.stubs.talon.experimental.textarea",
        "documentation": {}
    },
    {
        "label": "Span",
        "kind": 5,
        "importPath": "test.stubs.talon.experimental.textarea",
        "description": "test.stubs.talon.experimental.textarea",
        "peekOfCode": "Span = None\nDarkThemeLabels = None\nLightThemeLabels = None",
        "detail": "test.stubs.talon.experimental.textarea",
        "documentation": {}
    },
    {
        "label": "DarkThemeLabels",
        "kind": 5,
        "importPath": "test.stubs.talon.experimental.textarea",
        "description": "test.stubs.talon.experimental.textarea",
        "peekOfCode": "DarkThemeLabels = None\nLightThemeLabels = None",
        "detail": "test.stubs.talon.experimental.textarea",
        "documentation": {}
    },
    {
        "label": "LightThemeLabels",
        "kind": 5,
        "importPath": "test.stubs.talon.experimental.textarea",
        "description": "test.stubs.talon.experimental.textarea",
        "peekOfCode": "LightThemeLabels = None",
        "detail": "test.stubs.talon.experimental.textarea",
        "documentation": {}
    },
    {
        "label": "Phrase",
        "kind": 6,
        "importPath": "test.stubs.talon.grammar",
        "description": "test.stubs.talon.grammar",
        "peekOfCode": "class Phrase:\n    pass\n# grammar.vm.Phrase is also used sometimes.\nclass vm:\n    Phrase = Phrase",
        "detail": "test.stubs.talon.grammar",
        "documentation": {}
    },
    {
        "label": "vm",
        "kind": 6,
        "importPath": "test.stubs.talon.grammar",
        "description": "test.stubs.talon.grammar",
        "peekOfCode": "class vm:\n    Phrase = Phrase",
        "detail": "test.stubs.talon.grammar",
        "documentation": {}
    },
    {
        "label": "PHRASE_EXAMPLES",
        "kind": 5,
        "importPath": "test.test_dictation",
        "description": "test.test_dictation",
        "peekOfCode": "PHRASE_EXAMPLES = [\"\", \"foo\", \"foo bar\", \"lorem ipsum dolor sit amet\"]\nif hasattr(talon, \"test_mode\"):\n    # Only include this when we're running tests\n    from knausj_talon_pkg.core.text import text_and_dictation\n    def test_format_phrase():\n        for x in PHRASE_EXAMPLES:\n            assert text_and_dictation.format_phrase([x]) == x\n            assert text_and_dictation.format_phrase(x.split()) == x\n    def test_capture_to_words():\n        # if l is a list of strings, then (capture_to_words(l) == l) should hold.",
        "detail": "test.test_dictation",
        "documentation": {}
    },
    {
        "label": "UnitTestPathFinder",
        "kind": 6,
        "importPath": "conftest",
        "description": "conftest",
        "peekOfCode": "class UnitTestPathFinder(importlib.machinery.PathFinder):\n    \"\"\"\n    Makes the knausj_talon repo root directory available under\n    knausj_talon_pkg and test/stubs/talon/ available\n    under talon. Activated by the code in pytest_sessionstart()\n    A loader is needed since the 'code' folder in knausj conflicts\n    with the built in python 'code' module. Renaming the folder\n    could cause merge conflicts.\n    \"\"\"\n    @classmethod",
        "detail": "conftest",
        "documentation": {}
    },
    {
        "label": "pytest_sessionstart",
        "kind": 2,
        "importPath": "conftest",
        "description": "conftest",
        "peekOfCode": "def pytest_sessionstart():\n    \"\"\"\n    Set up test environment. Only invoked when we're in the pytest\n    environment so as not to mess with the Talon runtime.\n    \"\"\"\n    sys.meta_path.append(UnitTestPathFinder)",
        "detail": "conftest",
        "documentation": {}
    }
]